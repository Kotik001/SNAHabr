msg_content,msg_id
"Слушал подкаст DevZen с организаторами ICFPC 2020, и Павел Егоров (или кто-то другой), рассказывая кучу интересных фактов про историю реальных попыток общения землян (нас, то бишь) с инопланетянами, в какой-то момент обронил: «представляете, уже в 60-х годах ученые составили и отправили первое сообщение». Меня, собственно, именно это «представляете» больше всего позабавило. Потому что оно было бы уместно, скажем, в области медицины: представляете, в 60-х уже лечили Х. Или промышленности: представляете, в 60-х уже производили Y тонн, не знаю, автомобилей. Или представляете, в 60-х уже летали на Луну, прям как мы сейчас (что?)  Но в области общения с инопланетянами, кхм, как бы это сказать, прогресса с 60-х годов особо не было. Ну не идут инопланетяне на контакт! А без инопланетян наука общения с инопланетянами не сильно развивается. Зато люди, люди в 60-х, понятно, жили примерно такие же умные, как и сейчас (люди вообще, в среднем, одинаково умные во все периоды, только среда разная). Так что до чего бы мы ни могли додуматься сегодня, люди 60-х могли додуматься ровно с таким же успехом. Что они и сделали, причем довольно остроумно: почитайте, например, про послание Аресибо.",2
"Всю жизнь считал, что люди, которые ленятся в смайлике поставить двоеточие, скажем максимально тактично, СИЛЬНО ОШИБАЮТСЯ. ) — нет. :) — да. А сейчас сам собрал кастомную клавиатуру, на которой кнопок не очень много, и, кхм, оптимизировал раскладку. В русской пострадало двоеточие и еще кое-какая пунктуация, и руки теперь сами ленятся ставить смайлы. И тут меня осенило! Ну конечно, в обычных клавиатурах двоеточие тоже скачет между раскладками, в результате чего люди иногда даже просто на английский обратно переключаются, чтобы его набрать. Понятно, в каком-то литературном тексте такие усилия еще можно как-то оправдать, но в переписке — точно нет. Такая теория.",4
"Одна из немецких странностей, про которые почему-то очень мало говорят, и нет, это не штраф за убийство осы, это то, что двери в подъездах здесь открываются вовнутрь. Стоп, а России как? Вот именно, никогда бы не задумался, если бы не переехал. В России наружу. И да, это записывается напрямую на подкорку, минуя сознание. Так что первый месяц тут ты будешь дергать ручку не в ту сторону, чувствовать себя дураком и гадать, откуда это чувство враждебности окружающего мира. Хорошо, что я Нормана читал, он разрешил иметь проблемы с дверями и все равно считать себя нормальным человеком.",7
"Пытаясь соединить проектор у задней стены комнаты с колонкой у стены передней, я кое-что узнал:  - Колонки с сабвуфером на российском рынке почему-то называются «домашним кинотеатром». Просто колонки, без экрана, без проектора, без всего. - В Bluetooth Audio заложена задержка в районе 200 мс (на самом деле она бывает разная, зависит от кодека, размера буфера и т.п., но всегда консистентно большая). То есть для кино Bluetooth Audio более чем бесполезно. - Умные видео-плееры про это знают и искуственно задерживают видео, если отдают звук через bluetooth. Да, даже YouTube. Как программист, мне немного страшно от глубины протекания абстракции здесь. - Наблюдать задержку в bluetooth-наушниках очень просто, если сделать что-то интерактивное. Очистить корзину, например, понажимать кнопки в vim с включенным audiable bell, ну или в игру поиграть. - Другой вариант — начать подключать bluetooth-наушники, не останавливая YouTube видео. Как минимум видеоряд начнет заикаться на пару секунд, а как максимум все встанет таким раком, что веб-страницу придется перезагружать, а наушники переподключать. - Есть проприетарный кодек Apt-X с задержкой в ~120 мс. Все еще много, плюс его должны уметь и источник, и наушники/колонка. - Есть его малораспространенная версия aptX LL (low latency), дающая задержку в 40 мс. - На Алиэкспрессе можно купить трансмиттер и ресивер, в каждый из которых втыкается обычный 3,5 мм джек (иногда даже оптическое аудио!), а они передают звук между собой по aptX LL. По простоте использования это как аудио кабель, только без кабеля. И, главное, никакой завязки ни на софт, ни на возможности железа — от самих устройств требуется только аудио вход/выход. - Это работает! Уже года четыре я смотрю кино и играю в игры именно так. - На геймпадах Xbox и PlayStation есть Headphone Jack, видимо, по той же причине: на обычных bluetooth наушниках вы не смогли бы играть из-за задержки.  Внимательный читатель мог заметить, что задержка в 40 мс это хоть и мало, но больше нуля. То есть я смотрю кино просто чуть по-лучше, но все еще плохо? Тут вскрылось еще несколько фактов.  - Люди способны замечать задержку от 12 мс, если сами производят звук, например, при игре на музыкальных инструментах. - В ТВ стандартах приемлимой считается 40/60 мс. - Задержка менее 100 мс считается необнаружимой.  Так что 40 мс это вполне неплохо, особенно для кино. Но, если честно, я и в играх никакой задержки не ощущаю.",8
"Году так в 1996-м, примерно, я учился в шестом классе. И у нас была информатика. Компьютеров, в принципе, хватало на всех, но это были какие-то старые унылые советские ЭВМ. И был один ПК, который мало кто из нас, понятно, видел раньше, и к которому пускали только любимчиков препода. Меня пускали. Но история про то, что в какой-то момент на пару первому ПК купили второй и поставили рядом. И препод даже хвастался, что соединил их в сеть. Сеть, понятно, на тот момент была штукой еще более неслыханной, даже для тех, у кого дома были ПК. Поэтому моей целью стало создать такую ситуацию, в которой сеть зачем-нибудь бы пригодилась.  В какой-то момент мне это удалось: потребовалось под вполне логичным предлогом перекинуть какой-то файл с одного ПК на второй. Я зову препода и говорю: во, давайте, показывайте, как вы это по сети делаете. Он берет дискету, вставляет в комп, копирует на нее файл, вытаскивает, вставляет в соседний и копирует с дискеты. Все это сопровождается фразой «Да так проще». Финиш.  Сказать, что я был поражен, значит ничего не сказать. Это один из самых сильных уроков, которые я получил про компьютеры, технологии, юикс, продукты и прогресс в целом. И с каждым годом он становится все сильнее, потому что передать файл с одного компа на другой, даже в одной комнате, даже в одной сети, до сих пор проще всего флешкой. С момента осознания мной этого факта прошло уже 24 года.",10
"Посмотрел Знаки М. Найт Шьямалана (2002) и там есть все, кроме цветокоррекции и компьютерной графики. И как же это прекрасно! В современном цифровом кинопроизводстве цветокоррекцию любят, потому что, ну, с компьютерами это просто, дешево, скрывает какие-то огрехи в материале, и типа создает настроение. Даже не просто любят, а прям пихают практически везде. Для меня же она переводит картинку из категории «вот что случилось с настоящими людьми, в настоящем месте» в категорию «это все понарошку, мы тут нафантазировали, а потом еще фломастерами раскрасили». Чем больше трюков, тем меньше доверия. И как же клево смотреть кино относительно старое, когда этого еще не умели.  С компьютерной графикой та же штука — доверия меньше. Uncanny valley еще, даже у неживых предметов: домов, деревьев, морей — все равно всегда чувствуется, где настоящее, а где нет. В The Mandalorian (2020), как бы безупречно он ни выглядел, чувствуется, что они всю съемку тусили в павильоне, а в The Phantom Menace (1999) ездили в пустыню. И настоящее всегда круче.",11
"Проблема с Ведьмаком 3 в том, что после него решительно невозможно играть в другие игры. Не из-за геймплейных качеств, а исключительно из-за диалогов. В Ведьмаке хороший литературный текст, и, оказывается, это явление для игр практически уникальное.   В сценарном деле есть понятие планов диалога: первый это то, что произносится, сами слова. Второй — то, что герои думают и хотят на самом деле. Например, в Goodfellas есть гениальная сцена, где руководство мафии приходит к жене Рэя Лиотты и начинает убеждать ее не бросать мужа из-за измены. За всю сцену звучат только правильные слова: семейные ценности, любовь, поддержка, как они нужны друг другу. Ничего, кроме этих слов, не произносится. Гениальность же в том, что мы как зрители в этот момент уже в курсе, что им, в общем, по каким-то там причинам удобна стабильность и отсутствие скандала вокруг этой семьи, а в семейные ценности ни в какие разумеется никто из них не верит. Иногда вводят также понятие третьего плана — это мир и окружение, которые так или иначе отражаются в поведении/диалогах, но еще более косвенно.  Так вот, когда ты проходишь ворота Новиграда, и стоящий рядом охранник не останавливает тебя, но бурчит едва слышно что-то про то, что вот, развелось уродов, ты происходящее легко считываешь на всех уровнях: и что он старый служака, и что жизнь у него не сладкая, и стоит он уже на посту минимум полдня, и ему скучно, и злость надо куда-то выместить, а тут как раз ведьмак мимо проходил. И вопросов, почему он там стоит, нет, и почему в такой форме, да и остальную его жизнь можно легко представить. Everything checks out. И это не NPC даже, это так, антуражная фигурка даже скорее.  На самом деле, внутренняя логичность происходящего большая редкость не только среди игр. Ко многим фильмам и сериалам так же много вопросов, даже на уровне кто эти люди и что они тут делают, не говоря уж о том, почему они так себя ведут. Даже новый сериал по Ведьмаку такими мелочами не сильно заморачивался, ограничиваясь минимум фраз-экспозиций и торопясь поскорее переходить к рубилову.  Но с играми, с играми все гораздо хуже. Казалось бы, ты создаешь целый фантастический мир с нуля, и вроде бы хочешь максимально игрока туда погрузить, да? Но ведь ничто не погружает так сильно и глубоко, как внутренняя логичность происходящего.  Я пытаюсь играть в Horizon Zero Dawn, но это какой-то несмешной детский спектакль, по уровню проработки, конечно. Герои просто говорят прямо, что думают. А если не говорят, то логика всего остального подводит настолько, что нормально их действия не объяснить. Например, в племени есть изгои, видимо, чем-то провинившиеся. Нормальные с ними не разговаривают, что логично, видимо, их пугают. Но есть моменты, где сами изгои боятся разговаривать, хотя, казалось бы, этим-то чего терять? Или когда начальник стражи невзлюбил героиню, потому что... что? А ничего, просто. Никак не объясняется.  Казалось бы, учитывая игровые бюджеты, можно было бы и заплатить нормальному писателю. Сколько он может стоить? Больше 45 миллионов евро, видимо.",12
"Учитывая все вышесказанное, играть я предпочитаю в игры, где понятно, в чем, собственно, геймплей. Немножко экспозиции мне не мешает, но желательно, чтобы в какой-то момент тебе объяснили правила, отдали управление, и дальше ты сам по себе. А то некоторые игры это такой затяжной туториал, где от тебя ничего особо не зависит, джойстик тебе дают подержать чисто для виду, а главная твоя задача — усердно высидеть все кат-сцены. Нет, мне нравится, когда каждую секунду от тебя требуется принимать имеющие последствия решения, и это не иллюзия выбора, а дейсвительно то, что влияет на твой успех. То есть чтобы можно было не только выиграть, но и проиграть. По-настоящему.  Текущий фаворит — Dead Cells. Это такой Принц персии на спидах, причем очень сильных. Для меня это впервые, но я туда прямо провалился уже часов на сто и не могу остановиться. Примерно как с семечками — невозможно перестать щелкать (для миллениалов ближайший аналог — пупырчатая пленка). Идеал вовлечения, надо в университетах преподавать.  Как у них это получается? Я думаю, никто точно не сможет сказать. Просто все элеметны в этом конкретно случае сложились очень удачно: gameplay feel, вариативность, мета-прогресс, музыка. Но вот про текст хочу сказать. Сам текст не стремится кого-то особо рассмешить, а ирония сквозит скорее через сам мир и обстановку, чем через редкие текстовые кусочки. Примерно как в Fallout 1 — вроде в диалогах никто не шутит, все серьезно, вопросы жизни и смерти, но если посмотреть на ситуацию в целом, то без улыбки на это смотреть невозможно. Dead Cells, конечно, куда менее масштабна, но баланс выдержан примерно похожий. Это тонкая грань, и я могу только очень глубокий респект по этому поводу выразить. Выражаю: респект.",13
"В интернете травят Сбербанк за то, что они используют регистронезависимые пароли. Причем, понятно, что регистронезависимый легче подобрать, чем регистрозависимый. Непонятно, насколько это существенно. Вот что я думаю:  Есть некое социальное давление продолжать гнобить Сбербанк, no matter what, даже если сегодня он уже работает хорошо и современно.  Интересная тенденция, что люди придумывают _другие_ проблемы и авансом приписывают их Сберу, чтобы было проще критиковать (ха-ха, да у вас _наверное_ и пароли в открытом виде, вот вы мудаки).  Если оценить локальное значение (перебор сократится в 1000 раз!) могут все, с глобальным (та самая существенность) гораздо большие проблемы. Существенна ли разница между перебором в 150 000 лет и в 150 лет? Что позволит сделать подобранный пароль? Кроме пароля, есть еще 2FA, подтверждение транзакций, антифрод. Наконец, в каких ситуациях вообще ты будешь подбирать пароль? Явно не через сайт.  С относительностью тоже не очень понятно. Откуда отсчитывается «хуже» или «лучше» (в 1000 раз хуже)? Скажем, Гугл требует минимум 8 символов, но у них только латиница, а у Сбера 8 символов кириллица + латиница, но оба lowercase, что дает примерно одинаковую сложность. В Facebook вообще требуют 6 символов, что в 1000 раз хуже Сбера. И так далее.  Если порассуждать в обратную сторону, Сбер мог бы усилить свои пароли во сколько угодно раз. Добавил два обязательных символа — усилил в 1000 раз. Добавил четыре — в миллион. Где предел? Когда нужно остановиться? Если в связи с перебором пароля и есть смысл что-то обсуждать, то только абсолютные цифры, но никак не относительные.  Есть мнение, что существуют некие best practices в форматах пароля, которых все должны придерживаться. Напомню, что в IT best practices в большинстве случаев это просто то, что делает сосед. Сюда же упование на ГОСТ по паролям, как будто его писали не неизвестно какие люди, неизвестно как и откуда делавшие выводы.  Внезапно оказалось, что Facebook и Amazon тоже допускают _слегка неправильные пароли_, то есть делают примерно то же самое, что и Сбер. Можно ли это назвать best practice?  Непонятно, почему необычное, нестандартное решение приводит в первую очередь к мысли «они дураки и не понимают» вместо «они не дураки, провели исследования, эксперименты и понимают гораздо больше».  Не очень понятно также, откуда берутся таблицы скорости подбора пароля. Типа, пароль из 8 символов подбирается за 8 часов? 8 символов это 10^16 вариантов, даже если брать 1 мс на 1 вариант, это 300 000 лет. Не знаю, как на практике, но могу представить, что могут и еще более медленные хэши использоваться, вплоть до 1 сек на вариант?  Нужна какая-то мораль, пусть будет такая: бремя защиты, как ни странно, лежит не на Сбербанке, а на вас. Никакой сервис вас не обезопасит так, как обезопасит вас менеджер паролей. Уникальный для каждого сайта, длинный, по-настоящему рандомный пароль – вот единственная best practice.",14
"Куда у меня выпадали AirPods:  - Кровать - Раковина - Стакан - Кастрюля - Тротуар - Проезжая часть - Эскалатор - Пол автобуса  Когда они выходили, многие писали, как хорошо они сидят. Увы, я вам не верю. Но наушники классные. Но не держатся.",15
"Разобрал вчера свой умный дом. Год где-то продержался. Вот что действительно прижилось:  - гирлянда, включающаяся с закатом и выключающаяся в полночь, - выключение света во всей квартире пультом из кроватки, - возможность уменьшить яркость света в спальне, - голосовые таймеры на кухне через Alexa, - выключатели можно повесить в удобных местах.  А вот что нет:  - Задержка в выключателях. Нажимаешь и полсекунды-секунда проходит, прежде чем ты узнаешь, нормально ли ты нажал или надо посильнее. - Один раз из 50 выключатели не срабатывают. - Если Raspberry Pi чем-то занят, лампочку ты не подергаешь, пока он не освобоится. - Включение света по датчику движения. Срабатывает в девяти случаев из десяти, круто, когда работает, бесит, когда не срабатывает. - Выключение света по таймеру. Я так и не смог настроить простой алгоритм: пока движение есть, свет не выключается, как только движение прекращается, включается таймер и через минуту вырубает свет. Вместо этого свет тупо выключается каждые три минуты, и ты стоишь машешь руками, чтобы он включился обратно. Идиотизм. - Raspberry Pi портил файловую систему при каждом выключении из розетки. Всю машинерию нужно было переустанавливать и перенастраивать с нуля, и собственно на четвертый раз я сломался. - Цветные лампы. Пару раз пригодились, чтобы разнообразить стримы, но и все. - Интеграция с Apple Home. Довольно неудобная программа, а с цветными лампочками просто левые цвета показывал/ставил. - Датчик влажности/температуры. Не придумал что с ним делать. - Три Osram Smart+ лампочки начали мерцать в течение полугода. С такими ценами как-то не хочется новые так часто покупать.  Вывод: компьютеры зло и там, где можно без них, надо без них.",16
"Я в свое время поработал и в Eclipse, и в Idea, и в Text Mate, и в Vim, и в Atom, и в VS Code, и в Light Table даже, но остановился окончательно только на Sublime Text. Почему? Дело даже не в прожорливом электроне или тормозах редактора — комп у меня и так довольно мощный по другим причинам, а с latency в VS Code уже все очень прилично и, пожалуй, на глаз можно и не отличить.  Нет, основная причина — он не меняется. Если я правильно понимаю, его делают полтора человека, и их хватает примерно на обработку баг-репортов и косметические исправления, а сейчас так и вообще они переключились на Sublime Merge. То есть Sublime Text 3 сегодня в целом ровно такой же, каким он был год, два, пять лет назад, а если по большому счету, то практически такой же, как и ST2 двенадцать лет назад.  Но это и круто! Во-первых, да, ты привыкаешь, как к любимой пиле или отвертке.  Во-вторых есть чувство некой стабильности. На него _можно положиться_. Это тонкое ощущение на границе восприятия, но чем дальше ST не меняется, тем больше я это ощущение начинаю ценить. Макось выходит каждый год, айОС выходит каждый год, (гугловые) сервисы открываются и закрываются на интервалах в несколько лет, многие физические продукты выходят и умирают чаще, чем обновляется Саблайм. Во всей этой гонке слишком много суеты, поверхностности (изменения ради чувства новизны) и давно нет доверия: будет ли завтрашний макбук _хотя бы_ не хуже текущего? Не станет ли хуже макось? Не уберут ли функции или приложения, которыми я пользуюсь, из телефона? Изменения это хорошо, но когда каждый год что-то важное для тебя может закончиться, просто перестать функционировать просто потому что кто-то где-то хочет обогнать время? Короче, в таком безумном мире ощущение стабильности очень редко и тем более ценно. Спасибо Саблайму за это.  Ну и есть еще третье: незахламленность. У команды VS Code слишком много свободной энергии и денег, чтобы успокоиться и на чем-то остановиться. VS Code только все переделывает и пухнет просто потому, что людям, в нем работающим, надо что-то делать. У Саблайма, как я говорил, такой проблемы нет. Да, функций меньше. Да, последних фреймворков не поддерживает. Но зато когда я открываю новый файл, количество элементов на экране достаточно мало, чтобы я мог понять, что происходит, где что находится и зачем что нужно. В Sublime Text каждый элемент имеет смысл и каждый элемент принципиально важен. В VS Code я просто теряюсь, потому что (я сейчас от лица его разработчиков) ведь можно сделать _столько всего полезного_, и каждое полезное борется за твое внимание, а силы, которая бы заставила отфильтровать самое важное и не делать какой-нибудь очень умный автокомплит в каком-нибудь супер-специфичном амазон-докер-ямл-конфиге, такой силы нет. Ресурсов-то бесконечно много, почему бы и не впилить! Тот самый случай, когда меньше это больше.  Боже, храни Саблайм.",17
"Рахим в последнем подкасте «Мысли и методы» вспоминает «Cache invalidation and naming things» как две самые сложные проблемы компьютер сайнс. Ему это нужно, чтобы постебать слово Serverless, слово довольно бессмысленное и даже некорректное. На что хочется заметить, что половина компьютера так-то названа довольно дикими и произвольными словами: мышь, например. Жук. Печеньки. Якоря. Хлебные крошки. Огненная стена. Мать-доска, которая может и доска, но вроде никого не рожала. Твердый диск, который даже не круглый, да и твердость его как-то не особо выделяющаяся характеристика. Облака, очень красивое слово, но не соответствует вообще ничему и ниоткуда не следует. Наколенник-laptop. Про некорректные слова я люблю reverse proxy — прокси, который ни разу не перевернут, просто стоит в другом месте. Любимая иконка — почему любимая?   Но еще важнее, что Serverless ту поговорку ни разу не иллюстрирует. Слова, плохие или неудачные, misleading, но _хоть какие-то_ — это на самом деле очень, очень хорошо. Плохо, когда для некоторых вещей нет слов, или никто не хочет ими пользоваться, или все пользуются разными. Но если слово распространилось, закрепилось, и все в общем-то понимают, о чем речь, то это огромный успех! А само слово уже может быть любым. WYSIWYG — это что такое вообще? Но как название очень удачное, потому что ни с чем не перепутаешь.",18
"И еще немного про слова, чтобы не вставать два раза. Чем больше живешь в другой стране, тем сильнее ощущаешь, что слова означают ровно то, что они означают. То есть есть вот группа людей, они где-то живут, и вокруг них происходят какие-то вещи. Чтобы как-то ускорить взаимодействия, они дают вещам названия. И вот довольно простая мысль: названия, как сказать, прикреплены, что ли, к этим людям, а не к вещам. Раньше я думал, что есть некие объекты, или идеи, и у них есть названия: на одном языке, на другом, на третьем. Скажем, есть собака, и есть слово «собака», а есть также «dog», есть «Hund», и это все относится к собаке как явлению. Но кажется, вещи хорошо себя чувствуют и без названий вообще, а названия есть только где-то в связях между конкретными, живыми людьми, и больше нигде их нет.  Из этого следует интересный вывод, что перевод занятие довольно-таки бессмысленное. Скажем, есть Grundschule, и это определенный вид школы в Германии, примерно соответствующий начальной школе в России. Но в реальности Grundschule — это Grunschule, вполне конкретные институции в Германии и нигде больше. Нельзя сказать, что немецкие дети ходят в начальные школы, потому что все начальные школы, то, что называется словом «начальная школа» находятся в России. Или, скажем, русский человек, зашедший в немецкий дом и поднявшийся на два пролета, окажется на zweiter Stock, а не на третьем этаже. Он может сколько угодно себе объяснять, что это «как будто» третий этаж, но опять же, реальность в том, что в Германии нет этажей, просто потому что нет людей, которые бы вот это конкретное явление называли таким словом.  Или возьмем слово state. По-русски это государство, но между государством и state есть огромная разница. Когда американец слышит «state», в его мозгу зажигаются вполне конкретные нейроны, сильно другие, чем те, которые зажигаются в русском мозге при слове «государство». Одно как бы перевод другого, но смысл такого перевода очень зыбок: в русском языке просто нет слова, которое зажгло бы те же самые нейроны, что и у американца. Нет, потому что там, где живут русские, нет state, тупо территориально нет, не завезли. Есть что-то другое, и не очень понятно, есть ли смысл проводить какие-то параллели.  В свете этого наивно выглядят претензии Алана Кея и некоторых его фанатов, которые при слове ООП включают пластинку «вы неправильно термин ООП используете, правильно то, которое в SmallTalk придумали». И тут я возвращаюсь к тому, с чего начал — слова означают ровно то, что они означают. Если люди, конкретные, сегодняшние, живые, используют слово «ООП» чтобы сослаться на Джаву и С++, значит это и есть ООП, и никакого другого смысла у него быть не может. А то, что раньше это слово означало другое, ну что ж, печальный исторический факт, но нельзя какому-то слову принудительно присвоить то, что люди не имеют под ним в виду. Можно попробовать примазаться к успеху нового смысла, заявив, что ты тот же термин уже использовал, когда он еще не вошел в моду. Не умаляя ничьих заслуг, проблема ООП ведь не в том, что слово поменяло значение, а в том, что оно победило.",19
"Когда у авторов языка С кончились ASCII-символы на клавиатуре, они решили начать составлять из них комбинации. Первая же попытка -> оказалась настолько успешной, что определила развитие языков на десятилетия вперед. Сегодня два основных абьюзера этой традиции — Скала и Раст. Кажется, они решили возвести этот принцип в абсолют и придумать вообще все возможные и невозможные комбинации символов, которые даже часто не выглядят прикольно и ни на что не похожи, и составить из них абсолютно весь синтаксис языка.  Например, ..= это Right-inclusive range literal — зачем, почему так? Или {}, {:?}, {:#?}, или коллекция r"""", b"""", br"""", b'', или какой-нибудь 'b: 'a (не пропустите кавычки!), или #![] или $:. Ладно, как комбинации это может и не слишком странно, по-страннее видали (в R, например, или в регэкспах), но вот в чем проблема: все эти конструкции абсолютно не гуглятся. Когда ты немножечко с Растом познакомился и пошел читать чужой код и что-то такое встретил — все, до свидания, игры кончились. Нет ни единого шанса понять, что тут написано и зачем. Ты даже не понимаешь, в чем собственно твой вопрос.  Если же зайти с другой стороны и сначала прочитать всю книгу, а потом уже открывать редактор в первый раз — ну, во-первых мотивация очень быстро пропадает, а во-вторых эти штуки все равно остаются безымянными в голове, даже если ты старался и каким-то нечеловеческим усилием смог прикрепить к ним какой-то смысл. И когда тебе надо будет с кем-то про Раст поговорить, что-то спросить, письменно даже, у тебя просто словаря не будет, чтобы это описать. Нет, человек может думать без слов, но приходится очень сильно концентрироваться, чтобы башня из безымянных смыслов не рассыпалась. Для этого слова в общем-то и нужны — ими тупо проще оперировать, не доставая _весь_ прикрепреллый к ним смысл каждый раз.  В конечном итоге слова возникают всегда, при первой возможности — например, реклама перед Ютуб видео получила название skipad, просто потому что во время показа в углу есть кнопка Skip Ad. И если создатели языка слов не предоставляют, их придумает кто-то другой. Может быть, их будет несколько, тогда это усложнит всем жизнь. Но самое обидное — слова-то есть! Наверняка в компиляторе каждая из этих штук как-то длинно и понятно называется, просто на уровень документации и синтаксиса ее почему-то не вытаскивают.  Можно поспорить, что криптические ASCII-последовательности <strike>это современная альтернатива оккультизму</strike> сокращают длину кода. Но и однобуквенные переменные сокращают! Однако с ними вроде бы есть консенсус, что это сомнительных качеств практика. И не надо приводить в пример математиков — они увязли в традиции написания формул от руки и никогда не признают, что V – E + F = 2 читается хуже чем Vertices - Edges + Faces = 2.  Так что каждый раз, когда кто-то присылает запрос на добавление ::< или ..= в Fira Code, я молюсь на Джаву с ее extends`/`implements (гораздо лучше даже простого C++-ого :, и нет, не надо со мной спорить) или на Питон с его for ... in ... while и lambda. И джва года жду, когда кто-нибудь признает, что регэкспам нужен нормальный синтаксис, а заставлять запоминать (?<!) бесчеловечно.",20
"Так как я теперь С++ программист, рано или поздно я должен был поделиться впечатлениями. Но сначала коротка история.  Давным-давно, в другой жизни, мы набирали на работу программистов. Давали простую задачку типа перевернуть строку и разрешали писать на чем угодно. Любой язык, который ты знаешь. Ведь сила, она, брат, не в языке. Show us your best self. Так вот, про языки. Приходили сишники, и программы у них получались примерно такие, как от низкоуровнего языка и ожидаешь — страх, неуверенность, кишки, расчлененка и совершенно скучные вопросы типа «а кто выделит место под результат», которые внезапно выходят на первый план и становятся шоу-стопперами. В смысле писали они хорошо и правильно, это скорее мои ощущения от языка.  А потом пришел сиплюсплюсник. Я тогда, наивный, подумал — ну примерно то же самое получится. Но нет, он как-то очень быстро и ловко накидал программу, нигде явно память не выделял, нигде даже указателей не появилось. Все чистенько и аккуратненько, как будто на Джаве писал. А когда указатели над головами не летают, сразу чувствуешь себя сильно безопаснее. И я подумал — опа! Так что, можно было? Никогда бы не стал строить свою карьеру на внимательной работе с памятью, но без нее я вполне смог бы жить.  С тех пор эта мысль у меня висела в фоне — может быть, не так плох С++, как его малюют? Может быть, там как с Джавой — плохие программисты пишут плохо и создают языку репутацию, а хорошие сидят тихонечко, пишут хорошо и проблем не знают. Но проверить эту гипотезу поводов все не подворачивалось. Отзывы тоже были противоречивые, что скорее подтверждало мою гипотезу.  И вот наконец я попробовал С++ сам. То есть я пришел немножечно сбоку в большой и старый C++ проект, а именно Skia. Да и попробовал совсем чуть-чуть. Но главное, что свою гипотезу я, кажется, проверил: неважно, насколько хорошо ты обложился умными указателями, рефкаунтерами и move конструкторами. Неважно, сколько человек писало, смотрело, ревьюило и потом использовало твой код. Неважно, насколько прожжеными плюсовиками они были, неважно, как долго компания развивает экспертизу именно в C++ и насколько хороши их best practices. Все равно рано или поздно кто-нибудь, где-нибудь, как-нибудь, что-нибудь продолбает. Это точно такая же бомба замедленного действия, как и С, а промышленный код выглядит примерно так же страшно и ничуть не менее безопасно. В Skia контрибутит 170 человек. На ней работают Chrome, Android, Flutter, Firefox и Xamarin. И я, одним глазом на нее поглядывающий, без опыта низкоуровнего программирования, без опыта С или С++, нашел за 6 месяцев два случая некорректной работы с памятью. А ведь я их даже не искал! Причем в одном случае мне пришлось объяснять, почему это баг — даже натренированный глаз, когда ему показываешь сломанный код, не всегда способен заметить ошибку.  Итог, увы, неутешительный. Людям верить нельзя. Хороший программист даже себе не должен верить. Машинам — можно. Тотальные гарантии — единственное, что нас спасет. In the long run, конечно.",21
"Раз уж мы тут про эзотерические символы в программировании, поделюсь тем, про что мало говорят и что абсолютно гениально сделано в Кложе. Там в именах функций, переменных, макросов, короче, везде, где тебе нужно имя, можно использовать любые символы. Ну, почти любые — пробел, например, нельзя (хотя, non-breaking space уже можно, и выглядит это ДИКО), и еще пара небольших ограничений. Но все остальное — fair game. И это гораздо больше свободы, чем в любом другом языке. ГОРАЗДО.  Начнем с kebab-case. Да, дефис вполне легальный символ. В других языках же как — «эээ, мнээ, а как мы различииим, это одно имя, а может целое выражеееение, kebab минус case? Не знаюююю. Сложнааа». В Кложе этой проблемы нет, там нет неоднозначности. А минус, конечно, есть, и он вполне обычная функция с вполне легальным именем -. И camelCase, и snake_case чисто визуально выглядят сильно хуже, чем платонический идеал kebab-case*. Да и нажимать минус на клавиатуре в разы приятнее, чем тянуться до шифта или ставить подчеркивание.  Во-вторых, в других языках ведь как любят? Начинайте имя с буквы, пожалуйста, а все ваши изварщения пишите после нее. Потому что снова -a это минус и а или одна -a? В Кложе начинать можно с чего угодно (ну, почти — с цифр таки нельзя). Это делает возможным такие имена как *name, *name*, -name и даже <name>, что тоже, на мой взгяд, выглядит весьма неплохо (уж получше mField или fVar ).  В-третьих, букв в имени вообще может не быть! Скажем, -> или ->> вполне себе объявлены самыми обычными средствами, никакой магии. Есть библиотеки, расширяющие этот набор всякими <-, =>, <!! и прочее. Ту же |> можно объявить вообще никого не спрашивая и никак язык не меняя. Во-первых, это красиво!  Ну и вообще — засовывать в имена символы, которые обычно в языках зарезервированы, это как перейти с обтягивающих плавок на свободные боксеры. Лучшее в Кложе соглашение — для булевых переменных и методов ставить в конце знак вопроса: contains?, empty?. Когда видишь такое в коде, это очень естественно выглядит: (empty? coll). Для сайд-эффектов добавляют восклицательный знак: send!, swap!. Для трансформаций можно впихнуть стрелку: (string->number ""123""), например.  Лично я люблю в имена таплов засовывать плюс: (let [name+address [name address]] ...) и ставить штрихи для разных версий одного по смыслу значения:  (let [req'  (update req ...)       req'' (update req' ...)]   req'')  В любом другом языке это бы называлось req1, req2 и т.п., но мне штрихи нравятся гораздо больше. Кстати, чтобы где-то об этом то ли рассказать, то ли написать, мне пришлось специально гуглить, как подобное будет в английском называться. Оказалось — prime. Req prime, req double prime, etc.  Со штрихами, кстати, далеко не все Кложе-грамматики дружат (моя sublime-clojure — дружит). Слишком уж неожиданно даже для Кложуристов выглядит такая возможность. Но компилятор не против.  В общем, в Кложу я вас конечно приглашаю, но я знаю, что никто не пойдет. А попробовать такое больше негде. Но если кто-то из вас вырастет и напишет свой язык, я надеюсь, что он вспомнит эту статью. При всей спорности скобочек свобода в выборе имен — одно из самых безусловно красивых свойств, которые можно дать языку.  *  Ладно, совсем платонический — это пробелы в именах. Звучит бредово, но и файлах их, например, сначала запрещали. А потом поняли, что у людей нет проблем давать чему-то названия из нескольких слов. Это у компьютеров есть.",22
"В дизайне интерфейсов, и вообще во всей науке человеко-компьютерного взаимодействия, интуиция конечно существует, но надо постоянно себе напоминать, что и абсолютно контр-интуитивные вещи встречаются сплошь и рядом. Додуматься до них нельзя никак, только увидеть.  Вот например управление в 3д-играх. Я вырос на Quake и мышке, мышку никогда не инвертировал и был уверен что эта опция нужна людям, кхм, очень странным. Консолей у меня особо не было, геймпада тоже, пока я не купил Switch. И внезапно — впервые в жизни захотел инвертировать правый стик. Ну вот показалось естественным! И прижилось. Пробовал потом вернуться — все, не могу. На мышку это открытие никак не повлияло.  Нашел статью, где выдвигалась следующая теория: когда вид из глаз, ты вроде как мышкой двигаешь конец своего ружья — вверх потянул, ружье пошло вверх. Логично. А с геймпадом ты обычно играешь от третьего лица, и управляешь уже камерой, которая как бы болтается за персонажем. Жмешь вверх — камера едет вверх в пространстве, но смотрит все еще на твоего персонажа, так что угол зрения опускается вниз. Сам бы я не додумался, но в принципе звучит логично.  Какое время меня это объяснение устраивало. Но потом я понял: по вертикали я камеру инвертирую, а по горизонтали-то нет! То есть если жму влево — камера едет вправо, а взгляд влево. А если жму вверх, камера едет вверх, а взгляд вниз! И вся стройная башня из рассуждений рассыпалась.  Теперь у меня вообще нет никакой, даже гипотетической, модели, как объяснить связь моторных рефлексов с результатом. Что не мешает играть и получать удовольствие.",23
"Лет десять назад у меня был коллега из Ульяновска, тоже звали Никитой, кстати. Устроился он тогда в компанию, у которой несколько лет уже работал большой, живой, высоконагруженный продукт, приносивший достаточно денег, чтобы платить команде в России. Продукт активно дорабатывался прямо по живому, а чтобы не сойти с ума, функциональность была покрыта интеграционным тест сьютом. Все бы хорошо, но фичи приоритезировались больше, чем тесты, которые в результате начали подгнивать, перестали отражать реальную ситуацию, и в какой-то момент превратились из инструмента безопасного релиза в театр безопасности. Никто не знал, можно ли им верить, они падали в рандомные моменты времени даже на работающем коде, CI перезапускал тест сьют трижды (!) и считал тест успешным, если он прошел хотя бы один раз из трех. Ситуация быстро кульминировала в пик outages (несколько штук в неделю), невыспавшуюся команду и дерганый менеджмент. Дошло до того, что по общему соглашению разработку вообще всех новых фич остановили на полгода (!), которые посвятили исключительно техдолгу, починке тестов и настройке нормальных процессов релиза. Довольно беспрецендентный шаг, по моему опыту, который тем не менее завершился ощутимым успехом (тоже, кстати, редкость, чтобы такие большие планы ожидаемо сбывались) — работать снова стало возможно. Потом, правда, деньги кончились, но это другая уже история.  Никита тогда занимался как раз починкой тест сьюта и вынес несколько патентованых афоризмов™.  Зачем тесты:  - Тесты помогают двигаться вперед, не оглядываясь назад. - Тесты не делают программу лучше или надежнее. Код самой программы делает программу лучше и надежнее. Акцент всегда на коде! Тесты всегда средство. - Тесты пишутся только из острой необходимости, когда нет других способов обеспечить надежность (простота, гарантии компилятора, БД, ОС). - Смысл тестов в том, чтобы падать. - Прошедший/упавший тест — это сигнал, единица информации. - Тест, падающий всегда, плох. Он ничего не показывает. - Также плох и тест, не падающий никогда. - Мигающий тест не несет информации, это шум.  Что тестировать:  - Ровно то, что программа обеспечивает де факто. - Про каждый (каждый!) тест должно быть понятно, почему он написан, что проверяет, почему это нужно проверять. - Не должно быть тестов «на всякий случай», «просто». - Нет смысла тестировать простые, предсказуемые вещи. - Юнит-тесты тестируют то, что удобно, вместо того, что требует тестирования. - Погоня за 100% покрытием (или любым другим — 90%, 85%) бессмысленное дрочево^W^W формализм.  Как тестировать:  - Тесты не должны отнимать больше усилий, чем код. - Тесты должны быть гибкими и податливыми, не быть обузой, когда надо изменить код. - Не запускать тесты в отдельных, специально создаваемых условиях. Эмуляция окружения, БД, mock-и дают уверенность, что волшебные феечки в волшебной стране работают нормально, а интересно должно быть, как работает реальность. - Асинхронность — не проблема. Надо признать ее существование и тестировать ровно то и ровно так, как оно на самом деле происходит. - Тестирование sleep-ами, фиксированные взятые с потолка задержки, retry тестов — прямая дорога к моргающим тестам, дергающемуся глазу, неврозу, дурке. - Тесты должны быть быстрыми, чтобы запускаться как можно чаще. Duh. - Тесты должны работать локально так же просто, как и на CI. - Кажется, что это сложно или невозможно? Только кажется. Обычно фундаментальных препятствий к этому нет, надо лишь один раз заморочиться. - Править код, архитектуру и даже инфраструктуру (например, взять другую БД!), чтобы написать тесты хорошо — нормально. Тесты тоже часть архитектуры.  От себя добавлю, что главное в тестах — понимание. Когда вы берете в руки отвертку, вы точно знаете, какой именно шуруп вы хотите подкрутить, кто здесь цель, кто средство, какие критерии успеха. Так же должно быть, когда вы садитесь писать тест. Осознанность, епта!",24
"Устроил себе вчера blast from the past и собрал свою библиотеку под Ubuntu 14.04. Это примерно времен 5S-айфона. Казалось бы, всего шесть лет прошло, что там могло поменяться? К тому же LTS релиз, апдейты вроде все еще выходят (с другой стороны, у Ubuntu каждые два года LTS — не очень-то и long).  Ну, в C++ изменился размер std::basic_string, с 8 до 32 байтов. Причем изменился он еще в C++ 11, но в Ubuntu решили не торопиться. Шутили в чате про размер байтов в военное время.  У Maven отключили http-репозиторий (в 2014 еще считалось нормальным качать себе на продакшн-сервер и потом спокойно запускать любую каку без шифрования).  У Java протухли какие-то там алгоритмы шифрования, правится как всегда прописыванием магической строки в магический файл (буквально магической, `\xfe\xed\xfe\xed\x00\x00\x00\x02\x00\x00\x00\x00\xe2\x68\x6e\x45\xfb\x43\xdf\xa4\xd9\x92\xdd\x41\xce\xb6\xb2\x1c\x63\x30\xd7\x92`). Конечно это безопасно, не волнуйтесь!  Короче, компьютер из 2014-го сегодня наверное бы работал, но с головными болями минимум на пару дней. При всей открытости и бесплатности айтишных стандартов и ресурсов, доступ к ним желателен только из сегодняшнего дня. Надеюсь, когда-нибудь мы научимся думать не только в прошлое, но и в будущее.",25
"По сети гуляют ролики, как новые M1 ноутбуки от Эппл могут подключать/отключать внешние дисплеи и открывать/закрывать собственную крышку мгновенно, без какого-либо моргания и без единого черного кадра в процессе. До сих пор так не умеел больше никто, включая сам Эппл: это всегда две-три секунды морганий, дерганий, зажигающихся и тухнущих экранов, прыгающих окон и тому подобных неприятных промежуточных состояний. Причем моргают всегда все экраны, даже те, для которых формально ничего не меняется.  Люди встречают это с большим воодушевлением, но есть и скептики: тоже мне проблема, и без этого нормально жили, поважней что ли проблем нет. К ним я и хочу обратиться.  Представьте, что у вас есть автомобиль жигули. Не современный, а такой, из 70-х. И это в принципе рабочий автомобиль, он выполняет свою функцию, на нем можно ездить. Правда, двери у него плохо подогнаны: тяжело закрываются, дребезжат при езде. И это, ну, минорная деталь, да? На автомобиле все еще можно добираться из точки А в точку Б, можно возить картошку. Есть множество вещей в самом автомобиле, более важных, которые можно было бы улучшать: скорость, мощность, расход, да даже комфорт сидений важнее будет, чем хлябающая и слегка поддувающая дверь. То есть дверь ни на что вообще почти не влияет. Более того, в стране все автомобили имеют двери схожего качества: это стандарт индустрии, никто не делает лучше и не старается. Нормальных дверей никто и не видел даже.  Ну вот Эппл починил наконец эту дверь.  Хорошо это или плохо? Очень просто — другого пути от ваз-2101 к современным европейским автомобилям нет. Где-то на этом пути кто-то должен был остановиться и починить эту ебаную дверь.",26
"Волей случая я уже две недели живу на мобильном интернете. То есть интернета не то чтобы совсем нет, но не разгуляешься.  Так вот, любопытно, как почти весь софт начинает выть и страдать, что давно не видел сети:  - Сама макось задалбывает, чтобы ей дали ну пару гигабайтиков минорного апдейта качнуть.   - Факт, что в вайфае нет сети, заслуживает, по мнению разработчиков, отдельной нотификации и перманентной перечеркнутой иконки (мол, мужик, ты че, нафига тебе ТАКОЙ вайфай?).  - Айфон жалуется, что уже две недели не бэкапился. Айфотос ноет, что месье не синхронизировался уже 18 дней (справедливости ради, у него и с интернетом не очень-то получалось).  - ЭполТВ вообще нахрен виснет при подключении к локалке без интернета. Видимо, вариант, что сеть будет, а интернета в ней не будет, даже в голову не приходил разработчикам.  - Даже Стим, у которого вообще все давно скачано и запускается локально _без всяких проблем_, сначала покажет тебе специальное окно, мол, чувак, поиграть не получится, а потом кнопку “Use in offline mode”, как будто это что-то настолько принципиально плохое, что не стоит даже и пытаться во что-то играть, рядом даже есть кнопка “не, ну раз оффлайн, я лучше вообще ни во что играть не буду, пойду в экселе еще раз хуй из формул нарисую, закрывай”.  - Больше всех порадовала Ubuntu, которая на машине вообще без всякого намека на интернет показала мне на старте окно с двумя апдейтами. Скачать, правда, не смогла.  Все это напоминает ревущего мальчика, которого мама оставила одного посреди магазина и для него это конец света, тогда как окружающие не понимают вообще, в чем серьезность проблемы. Pathetic.  И среди всего возвышается глыба Nintendo Switch. Устройство 2017 года, которое про интернет слышало как будто только по рассказам знакомых. Понятно, что оно должно работать в самолетах и поездах по задумке, но они пошли дальше и сделали это предположение _дефолтом_. Ни одна функция не требует интернета и даже не предпочитает его наличие. Свич может лежать месяцами без настроенного вайфая и даже знака не подаст, что что-то не так. Если я все правильно понимаю, Свич можно вообще ни разу в жизни к интернету не подключать, а игры покупать на картриджах. Вот это я понимаю, визионерство!  При этом ты не чувствуешь никаких ограничений вообще. Включаешь, играешь, пользуешься, все как обычно. Никаких облачных логинов, напоминаний, синхронизаций, никаких «да как же я вас пущу, интернета же нет!», никаких проверок «на всякий случай», иконок «вайфая нет» или «вайфай есть, но хуевый». Да что там, если таки захочется онлайн, его надо будет отдельно в магазине покупать!  В общем, очень бодрящий опыт. На его фоне понимаешь, насколько остальные устройства любят ныть и страдать по пустякам.",27
"Про Эппл у меня есть очень простое правило: никогда не покупать первые версии ничего. Не то чтобы они не работали – работают, делают все, что обещали. Просто через год всегда выходит вторая версия, и она всегда сильно, сильно лучше. Это понимание заняло у меня 10 лет, а у вам потребуется пять минут:  2010: Первый айПад. Не было селфи-камеры (причем в чертежах дырка под нее была!). Апдейты закончились через два года. iPad 2, для сравнения, продержался пять (!), был легче, тоньше, ну как обычно.  2011: iPhone «вы неправильно его держите» 4. Первый ретиновый телефон. Ладно, тут меня бог миловал, я брал уже 4S. Обновления на 4 перестали приходить в 2014, а на 4S — в 2016 (а секьюрити прилетел вообще в прошлом году!)  2012: Первый ретиновый MacBook Pro. Напоминаю, никто не знал, каково это – работать в ретине на компьютере, хоть десктопе, хоть лаптопе. Доволен покупкой, но: проблемы с матрицей, отвалившаяся через год видеокарта (с программой бесплатной замены, впрочем), старый displayport. Буквально в следующей версии они поддержали 4k @ 60Hz, а я жил пять лет с 30 Hz. Как-то стремно было к ретиновому ноуту подключать не-ретиновый дисплей.  2015: Apple Pencil. Рисует первый Pencil так же, как и второй, а вот заряжается максимально идиотски. Успокаивает меня только мысль, что второй задержался на три года.  2017: AirPods. Опять же, классная штука, но вторые эйрподсы получили шумоподавление, резиновые вкладыши, а потом еще и беспроводную зарядку и пространственное позиционирование. Первые получили хуй. Зато под первые чехольчиков больше.  Вообще я это все писал к выходу M1, который, конечно, выглядит очень привлекательно. Но сегодня вот еще наушники анонсировали, что прибавило актуальности. Правило очень простое: пока можете что-то не покупать, не покупайте. М2 будет еще лучше 🙂",28
"Есть в программировании очень простой принцип: не надо помогать. Ну может не в программировании, но у меня есть. Что это значит? Если какая-то система взяла на себя ответственность и что-то делает, может быть несовершенно, не нужно пытаться исправить это слоями выше. Не надо чинить воду в квартире, если протекает труба в подвале.  Классический пример это скроллинг страниц в браузере. Скроллингом занимается браузер. Вот и пусть занимается. Хочется побыстрее или помедленнее? Перехочется. Хочется каких-то эффектов, анимаций, постраничного пролистывания? Не надо, держите руки в карманах.   Смысл скроллинга в браузере не в том что у него самая оптимальная скорость, и не в том что он всем подходит. И даже не в том, что он покрывает в сто раз больше краевых случаев, чем вы когда-либо сможете придумать (хотя это так). Смысл только в том, что он на всех страницах работает одинаково. Что среди тысяч сайтов, которые ты посещаешь за день, тебе не нужно каждый раз к нему адаптироваться. Безобразно, зато однообразно — тоже, кстати, великий принцип.  Или ввод телефонного номера любят делать. Лучший способ ввести номер — дать текстовое поле. А все, кто «помогают» сверх этого, на самом деле просто ломают привычки (да еще и хуево реализуют главный вариант и забывают про сто неглавных).  И такое везде. Свой загрузчик шрифтов поверх системного. Файл вотчер поверх системного вотчера. Интерфейс для просмотра картинок в браузере, хотя браузер и так прекрасно показывает картинки. Пляски с бубном, чтобы разогнать программу, изначально написанную на медленном языке.  И как бы я ни топил за скорость и хороший юикс, есть одна вещь, которой нельзя ради них жертвовать — это простота программы. Размазанные по коду заплатки к протекающим абстракциям программу усложняют. Противоестественное использование платформы усложняет ее еще больше.  А дальше просто: сложная программа → сложно охватить весь спектр возможных ситуаций и поведений → сложно держать в голове все частные случаи и кто чинит что и зачем → сложно вносить изменения → и в результате все равно хуевый юикс.  Иногда, чтобы программу починить, нужно просто убрать все костыли и подпорки, не пытаться умничать и чинить то, что не ты сломал, и принять ограничения платформы. Это честно, просто, прозрачно и по сумме факторов лучше для всех, и для пользователей, и для вас.",29
"Одна из вещей, которые я остро, активно не понимаю в программировании, это строгая инкапсуляция. То есть когда ты прячешь детали реализации так, что до них хрен доберешься.  С точки зрения автора библиотеки, это просто неправильный момент для принятия решения. Думать, что ты заранее можешь предвидеть все, что когда-либо может понадобиться кому-то, это играть в бога. А если ты не знаешь заранее, как решить, что прятать, а что нет?  С точки зрения потребителя библиотеки, иметь доступ к внутренностям строго лучше, чем не иметь. Программисты же не дегенераты и сами себе хуже делать не будут. Пока хватает публичного АПИ, они будут им пользоваться и радоваться. А когда его перестанет хватать, у них появится выбор: заложиться на внутренности или пойти нахер. Понятно, что приватное АПИ может поменяться или исчезнуть, и что придется отслеживать эти изменения в новой версии. Способ не очень, но еще раз напомню, что альтернатива – просто перестать писать программу, закрыть проект, уехать в деревню.  Короче, это решение должно быть в руках потребителя, а не автора. Задача автора — просто предупредить, что фиксировано, а что будет меняться. Но не отбирать возможности пользоваться внутренностями совсем.  Я просто не знаю, как можно иначе.",30
"Впервые белый терминал я увидел году так в 2010. До этого, ну, DOS, понятно, черный, cmd.exe, PuTTY, да и Линуксы все — тоже черные. А тут заглянул коллеге через плечо и нечаянно порвал шаблон. Ощущения примерно как от разглядывания негатива: мозг уже понял логически, что происходит, а глаза все еще шлют сигналы «it doesn’t look like anything to me». Такая вот сила формата.  Потом в какой-то момент перебрался на мак, а там у терминала как раз по-умолчанию светлая тема (хотя иконка все еще темная, кстати). Ну я решил так и оставить. И привык!  Прошло 8 лет, программисты в Эппл доделали все полезные фичи и начали делать бесполезные. Так появился Dark Mode, а с ним и мода на темные темы для всего не-программистского: телефонов, приложений, сайтов.  По оценкам, 70% процентов программистов предпочитают темные темы. Но я их так и не полюбил.  Во-первых, я почти не сижу за компом без света, хоть и работаю по ночам.  Во-вторых, читать черные буквы на белом как будто удобнее? Это самый спорный пункт, поэтому настаивать не буду.  В-третьих, оттенок черного у всех приложений разный, и это подбешивает. Белый более-менее у всех одинаковый, а вот полностью черный никто не ставит, а какой выбрать серый, договориться не могут. В результате мозгу приходится адаптироваться при переключении.  В-четвертых, тени почти не нарисуешь, а это важный визуальный хинт в иерархии UI. Можно делать вместо них glow, но он сообщает мозгу не то, что хотелось.  В-пятых, картинки. Картинки нельзя как-то логически перевести в «обратный» или «неяркий» режим, поэтому они всегда в темных темах выглядят не на своем месте. Включая иконки, да. Включая специально для темного режима нарисованные.  Ну и в-шестых, темная тема всегда выглядит как подделка с алиэкспресса. Даже в супер-качественных реализациях типа macOS это все-равно что-то, что пытается выглядеть по-другому постфактум, а не дизайнилось так с нуля.  Если подумать, то для программистов у темных тем есть только одно преимущество: цвет букв можно сделать поярче. Но как только выходишь из редактора, это преимущество кончается. Ну и работа по ночам, но это, кажется, не очень здоровый режим?  Короче, не рекомендую. Айда со мной на светлую сторону силы!",31
"Непопулярного мнения пост, но:  Мне кажется, многие вещи, которые в программировании называют «сложными» и рутинно реализуют с ошибками, на самом деле не сложные, если в них разобраться.  Например, мне кажется, что календарь/даты/время/таймзоны довольно простая штука.  Или цветовые пространства. Или HiDPI scaling. Или юникод/типографика. То есть я читал text rendering/text editing hates you и думал: ну когда сложность-то начнется? Так и не началась, настолько все логично. Да даже распределенные системы.   То есть там есть некая глубина, которая больше, чем мог бы подумать человек с улицы, но она а) вполне постижима и б) непротиворечива.  Сложные они, мне кажется, только в том смысле, что если начать что-то писать, не разобравшись, обязательно сделаешь кучу глупостей, типа прибавления 24 часов, чтобы получить следующий день. Это примерно как граммы с калориями складывать: бессмысленно по определению, но теоретически можно сделать. И потом начнут лезть баги, которые ты будешь штопать местно, а их поток будет только прибавляться. Two-Phase Commit пример такого подхода.  Но я бы не назвал это «сложно». Скорее, контринтуитивно, и то только на первый взгляд.  Сложно — это с багами драйверов разбираться. Или неправильно реализованное АПИ компенсировать. По сравнению с тем, что программируют другие люди, какой-нибудь календарь это практически идеально чистая платоновская модель, работать с которой одно удовольствие.  А какие-нибудь универсальные советы-лозунги типа «храните все в UTF-8 и UTC» не сильно помогают. Не надо хранить даты в UTC. Надо понимать, что происходит.",32
"Был такой эксперимент: у человека изолировались половины мозга, каждая стала управлять только своей половиной тела. В одно ухо ему шептали простые команды, например сесть или встать. А потом спрашивали другую половину, почему, по ее мнению, их тело только что село или встало. И она всегда находила объяснение: захотелось, устал, и т.п. Интересно, как людям свойственно искать и, что характерно, находить глубокий смысл даже там, где его нет.   К чему это я? Меня давно забавляет бардак в линуксовых папках, которые /etc/usr/val/lib/bin/sbin/local/opt в разных комбинациях. Что это за папки? Что в них хранится? Чем они отличаются? Ответы легко нагуглить, но читаются они как абсурдистский роман: слова создают иллюзию смысла, но водят тебя по кругу.  Почему? Потому что эти объяснения придумывали уже _после_ того, как хаос организовался. Это как пытаться объяснить природное явление, ураган например, или почему первые две ветки на дереве выросли вправо, а третья влево. В 70-х у кого-то закончилось место и он завел папку /usr на другом диске. Сегодня есть целые культы вокруг того, что именно означает каждая загогулька в этом самом /usr. А это не больше чем исторический анекдот.  Для таких случаев у меня есть очень простой тест: если бы в этом был хоть какой-то смысл, его было бы легко объяснить. Если же объяснения все никак не выходит, то это не потому что концепция сложная, а потому что смысла там просто нет. Есть только лабиринт из слов. Кстати, работает и с любыми другими булшит-технологиями.",33
"Явное лучше неявного. Банальность сказал, да?  И тем не менее миллионы программистов ломают голову над тем, как бы поменьше писать. Дизайнеры языков придумывают соглашения и умолчания. Неявный this, property вместо getter, имплиситы в Scala, ресиверы в Kotlin, convention over configuration. Потом страдают, тратя человеко-годы на их реализацию. Эстафета переходит разработчикам ИДЕ, которые должны эти новые «возможности» поддерживать. Возможности тут в кавычках, потому что это просто другой способ делать старые вещи. Потом весь этот конгломерат попадает в руки программстам, которые сначала не стесняются _не писать_ вещи, «держать в уме», а потом справедливо чешут голову в попытках понять, как же эта магия работает.  Проблема длинного, сложного и запутанного кода не в том, что эта сложность не спрятана. Проблема в том, что он сложный. И чем виднее и нагляднее это будет, тем лучше.  А распутывать то, что не имеет текстового представления, что не записано буквами явно, буквально, это самое бессмысленное занятие на свете.",34
"Думали, это канал про программирование? Теперь не только!  Итак, я посмотрел Тенет и остался недоволен. Потом посмотрел кучу «разборов» и остался недоволен еще больше. Нам обещали головоломку, и ее проблема не в том, что она слишком простая, или слишком сложная и запутанная. Она просто неправильная! Она подминает логику в нужных местах ради более эффектного результата! И об этом никто почему-то не говорит.  Любой фильм про путешествия во времени должен для себя решить, по каким правилам он играет. По большому счету есть два варианта: неизменяемое прошлое (так все всегда и было) и параллельные реальности.  Неизменяемое прошлое значит, что все события во всех временных пластах сосуществуют одновременно и не противоречат друг другу. Путешественник в прошлое разбил какую-то вазу значит, что ваза была всегда разбита, просто он еще не знал, что ее разобьет именно он. Свободы воли нет, все преопределено, дедушку убить нельзя, да и вообще прошлое не меняется. Зато можно плести красивые замкнутые на самих себя логические лабиринты. Примеры: 12 обезъян, Гарри Поттер и узник Азкабана, первые три Терминатора, Interstellar.  Это самый непротиворечивый вариант логически, но непонятно, куда, собственно, девается свобода воли. Если я встречаю себя из будущего в красной кепке, непонятно, что помешает мне после этого надеть кепку синюю. Обычно это решается так, что по сюжету ты либо путешествуешь достаточто далеко, чтобы такие детали не имели смысла, либо не пересекаешься с самим собой (скучно!), либо ситуация, вопреки твоим желаниям, складывается так, что заставит тебя одеться и повести себя ровно так, как ты помнил из прошлого. В книгах/кино это работает, потому что именно этому сценарию активно помогает автор, а вот представить это в жизни сложно.   Параллельные реальности с драматической точки зрения поинтереснее: первый раз ты живешь как обычно, потом перемещаешься назад, и в этот момент возникает новая временная линия, теперь уже с тобой из прошлого. Делай что хочешь, меняй события как угодно, убивай Гитлера и своего дедушку, повлияет это только на новый таймлайн. Можешь потом прыгнуть в будущее этого таймлайна и насладиться плодами своего труда. Это большая часть фильмов: Primer, Назад в будущее, 11.22.63, Looper, И грянул гром, Эффект бабочки.  Логически это тоже непротиворечивый вариант: если убъешь дедушку, ну, в новом таймлайне тебя не будет, но свой старый ты никак не поменяешь. Пожалуй, убивать дедушку даже рекомендуется! Иначе в будущем окажется два тебя, а это создает некоторые неудобства, например, с пропиской по месту жительства.  К сожалению, логика не очень нравится сценаристам кино, так что они начинают фантазировать. Твои действия в новом прошлом начинают влиять на твое прошлое оригинальное. Помешал отцу закадрить маму — исчез. Отрубил себе молодому ногу — тут же стал одноногим. Подвести непротиворечивые правила под это сложно. Что такое это «тут же», например? Почему рука/нога исчезает на экране в какой-то конкретный момент, если время было и есть всегда? Если ты отменил свое собственное существование, то на чьи приключения мы перед этим полтора часа смотрели? В Тенете, натурально, есть фраза «это парадокс, у него нет разгадки». Слышал, что называется, звон. Ну да, ну да, мыслить в четырех измерениях сложнее, чем писать плохие диалоги.  (На всякий случай уточню, потому что это, кажется, популярное заблуждение: у всех парадоксов всегда есть разгадки/объяснения. Они только кажутся противоречивыми на первый взгляд, с какой-то одной точки зрения. На самом деле они подчеркивают не противоречия, а недопонимание).",35
"Итак, в чем мои претензии к Тенету? Тенет хочет казаться умным, но на поверку оказывается предельно глупым.  Какие тут правила перемещения во времени? Мы не знаем, но хуже всего, не знают и герои. Первое, что сделал бы любой реальный человек, получивший доступ к такой машине? Проверил бы, может он менять прошлое или нет. А дальше просто: если не может (первый тип), то париться не о чем. Что ни делай, все равно все получится так, как всегда получалось. Если мир не разрушился, то он уже и не разрушится. Однако, если прошлое менять все-таки можно, то имеет смысл максимально предупредить себя прошлого, чтобы у него получилось лучше, чем у тебя.  Проблема в том, что вся интрига фильма строится только на том, что герои не знают, в каком типе реальности они оказались, и из-за этого не делятся информацией и вообще почти ничего друг другу не говорят. «Невежество — наши боеприпасы». Но в этом нет смысла в обоих случаях!  (Справедливости ради, кажется, что фильм таки относится к типу с фиксированным прошлым, хоть это нигде и не проговаривается. Потому что если об этом сказать, пропадет главная интрига — мир не нужно будет спасать).  Вторая логическая дырища это сам макгаффин — мистический алгоритм, способный уничтожить мир. Если ты такой ответственный ученый, который понял, что совершил открытие, грозящее гибелью всему миру, зачем делить его на девять частей и устраивать спецслужбам scavenger hunt? Почему просто его не уничтожить?   Это два глиняных столпа, абсурдность которых мешает вообще хоть как-то логически рассуждать об этом фильме.  Остальной сюжет построен примерно так же: каждая конкретная сцена имеет локальный смысл, но не глобальный. Чем дольше про фильм думаешь, тем глупее он становится. Возможно, сценарист/режиссер знал, какие моменты он очень хотел снять, а потом белыми нитками попытался их хоть как-то связать вместе.  Зачем давать Сатору собрать алгоритм, чтобы потом героически предотвращать последствия, если достаточно уничтожить любой его кусок (по сюжету, у хороших ребят была такая возможность, но они выбрали использовать куски как приманку).  Концовка, где счет идет на секунды, при том что у ребят есть машина времени, и они могли бы: прилететь пораньше, чтобы не спешить. Или попозже, т.к. алгоритм не уничтожают, а закапывают на 200 лет, и вытащить его можно в любой момент после этого. Наконец, можно убить Сатора до того, как он засетапит все девять кусков — вы же можете летать в прошлое, алло.  Открывающая сцена в опере, где десятки террористов захватывают сотни заложников, чтобы украсть коробку из гардероба (!). Не знаю, что за гардеробщицы там работают, но номерок кажется не стоит терять.  У Нолона вообще странное представление об устройстве мира: в фильме дважды звучит фраза «служба безопасности аэропорта непроницаема», я падал с дивана оба раза. Или почему миллиардер, занимающийся яхтенным спортом, не умеет плавать?  В фильме еще есть неработающий setup/payoff, когда в самом конце мы узнаем, что именно Нил спас протагониста в самом начале в опере. Это никак не вписано в сюжет, никто не знает, когда он это сделал, а когда нам это раскрывают, это не меняет практически ничего. Ну спас и спас, его там двадцать раз спасали в течение сцены. Настоящий «этим человеком был Альберт Энштейн» момент.  Наконец, в чем смысл поддельной пилюли с цианистым калием? Если пилюля фальшивая, чувак ее ест, она не работает, его продолжают пытать. С тем же успехом можно было ничего не давать. А если пилюля симулирует смерть, да еще так натурально, что способна обмануть профессиональных наемников, то, кхм, оперативникам-то можно было об этом и рассказать.  В общем, я бы очень хотел посмотреть именно такой фильм, именно про путешествия во времени назад, где все переплетено и в конце складывается в красивый паззл. К сожалению, Тенет больше про напускную серьезность и претенциозность, под которыми, увы, ничего нет. Зато гы-гы-гы, смотрите, чайка летит назад. Ну, это правда прикольно.",36
"Стоит конечно признаться, я избалован Java. Казалось бы, самая немодная технология в мире, однако:  Когда хайпили контейнеры, я пожимал плечами. JVM ставится вообще без каких-либо зависимостей, просто копированием папки, и... все! Все работает. Хочешь в /home положи, хочешь десяток JVM рядом держи и запускай хоть параллельно. Даже никакие переменные прописывать не надо.  Когда каждый язык изобретал свой package management, я опять пожимал плечами. Раздутые node_modules? В Maven каждая зависимость иммутабельна, скачивается один раз в жизни и дальше шарится между вообще всеми возможными приложениями. Lock-файлы? В Maven версии прописываются не диапазонами, граф зависимостей однозначен в любой момент времени настоящего и будущего, безо всяких .lock-файлов. Удалить из Maven Central ничего нельзя, так что драмы вроде left-pad тоже невозможны. Что такое reproducible builds я тоже никогда не понимал: как в принципе можно так напрограммировать, что билд будет не reproducible? История о том, что node_modules надо периодически удалять, если где-то что-то застряло, стабильно вызывали смех: вы там что, даже файл надежно скачать не можете?  Когда я пытаюсь скомпилять какой-нибудь C/C++ проект, каждый раз с нежностью вспоминаю Java: просто запустил и просто работает. Сетап у всех одинаковый, тулинг одинаковый, препроцессора нет, ручек у компилятора тоже. В системе не должно стоять магического набора говна, про которое надо каким-то образом догадаться да еще и версии угадать. Конечно, от такой жизни захочешь Докер.  К сожалению, с появлением Gradle преимущества Java в простоте сборки потихоньку сходят на нет: попытаться запустить проект на Gradle так же сложно, как и на C++. Но я еще помню хорошие времена. Особенно когда новая версия JVM выходила раз в пять лет, и тупо вообще весь мир сидел на одной и той же.  А, я не говорил, что JVM-тулинг вообще весь кросс-платформенный? Если вы свели сборку/запуск к <mvn что-то>, то она запустится на Windows так же тривиально, как и на macOS/Linux.  Вот уж воистину, сколько плюсов от того, что просто делаешь не что-то сверхординарное, а просто логично и нормально. По нашим временам — редкость.",37
"Одна из проблем, которую Clojure окончательно решила, и про которую обычно не говорят, это сериализация. Я был свидетелем дискуссий про нее и когда-то давно в Java и в Python, и уже недавно в Scala, Kotlin и Haskell. Оно и понятно: это простая изолированная проблема, конечно, программисты _мечтают_ ей заниматься. Им это понятно, и бизнес не лезет, и есть возможность сделать как хочется. Так что у нас есть куча библиотек, куча мнений, споров, подходов там, где их никто особо и не просил.  А в Кложе такой проблемы просто нет. Когда начинаешь заниматься Кложей, даже не понимаешь сразу, что произошло. Просто жить стало чуть легче, дышать чуть свободнее, а голова чуть освободилась для действительно важных проблем. Когда я говорю, что в Кложе минимум церемоний и максимально короткое время от мысли до кода, решающего проблему, частично это и про отсутствие сериализации.  Магии, конечно, никакой нет. Проблема в классах: каждый уникальный, как гребаная снежинка, и к каждому нужен свой подход. Плюс идея инкапсуляции приводит нас к тому, что класс должен сам знать, как себя сериализовывать. В лучших ООП-традициях, вместо инкапсуляции аспект сериализации растекается по всей кодбазе и засирает все, что можно, поднимая coupling до небес. Про миграции, кхм, я вежливо промолчу. Как и про поддержку нескольких форматов.  Собственно, если в ответ на предыдущий абзац в вас поднялась волна праведного возмущения: «ну как же, можно же вот так сделать, можно вот такую вот библиотеку взять, и она порешает проблему так-то и так-то», то вы попали в ловушку и тоже начали думать об аспекте системы, который этого не заслуживает. Представить нужно не то, как это нужно решать, а то, что где-то живут красивые существа высокого роста с кожей лунного цвета, которые давно уже перестали кипятить, оставили проблему в прошлом и занимаются, собственно, решением задачи.",38
"После https://t.me/nikitonsky_pub/38 несколько людей мне написали, что нечестно хвастаться Кложей, не объяснив, что же конкретно там сделали. Справедливо, исправляюсь.  Почему в Кложе нет проблем с сериализацией? Потому что весь язык построен вокруг работы с голыми структурами данных (списками, мапами, массивами, множествами). Конечно, такие структуры легко серилизовать в любом языке. Уникальность Кложи в том, что и остальной язык тоже построен так, что больше тебе ничего не нужно. Голые структуры максимально глубоко, естественно и _удобно_ интегрированы везде, настолько, что кроме них почти ничего и нет.  Как только ты начинаешь вводить классы, схема ломается, потому что сериализация, которая знала о плюс-минус десяти типах данных, теперь должна знать о десяти тысячах твоих уникальных DTO. Красивое решение «засунуть это знание в сами DTO» на поверку оказывается ужасной идеей, потому что раньше сериализация была маленькой и сбоку (как она и должна быть), а теперь она прибита гвоздями к самому сердцу системы и еще размазана по всей кодбазе ровным слоем.   Потом оказывается, что «просто» сохранить/прочитать недостаточно, нужно и мигрировать, и поддерживать несколько версий, и разные JSON/YAML/Protobuf/XML поддерживать одновременно, и иногда еще в разном виде отдавать разным клиентам. В мире Кложи ты просто пишешь маленькие трансформирующие функции под каждую такую «проблему», которые тоже лежат и не отсвечивают для остального кода. Скажем, взять поле «зарплата» из мапы «отдел» и переложить в мапу «сотрудник», в случае со словарями тривиально. Это просто еще одна функция, которая вызовется где-то между отправкой на сериализацию и собсвенно сериализацией. Локальность проблемы и ее решения, красота.  В ООП-мире же приходится городить огороды, потому что аннотации/теги на классах это удобно, пока ты не хочешь чуть-чуть поменять логику. Ты же не можешь исключительно перед сериализацией сказать «а теперь представь, что в классе Отдел поля зарплата больше нет, зато в классе Сотрудник теперь есть». И вот у тебя начинают жить legacy-поля, копии твоих DTO-классов для поддержки старых форматов и прочая ересь.   Другими словами, чтобы решить проблему сериализации, нужно починить весь остальной язык. Что объясняет, почему нельзя это решение «просто перенести» куда-то еще.  Что-то близкое есть в JS с его JSON. Пока ты не используешь JS-классы и не суешь прототипы, не используешь ничего кроме строковых ключей, не разрешаешь в своих мапах ключи constructor и prototype и вообще ограничиваешь ключи [a-z][a-z0-9]*, ну и не складываешь ничего кроме строк, чисел (не слишком больших) и true/false, не пользуешься Map/Set и сериализуешь только в/из JSON. Но в остальном да, похоже.  И в Erlang, кстати, похоже. Вообще, когда начинаешь думать о распределенных системах, понимаешь, что классы жутко негибкая, капризная штука и с сетью не дружат вообще. А дружат чистые данные. И что вместо того, чтобы с этим фактом героически бороться (и проигрывать), проще принять и задизайнить под это язык. Что? Классов не будет? Что ж, невелика потеря.",39
"Для разнообразия простой, короткий, конкретный совет:  Всегда используйте длинные версии ключей в Bash-скриптах.  Да, это весь совет. Потому что читать все эти  grep -wq ls -hal ps -efH nc -4u -w0 curl -fLo4 tar -cvzf xargs -0vrf  просто нет сил уже. Голова не резиновая, есть более полезные вещи чтобы ее занять. А ключи везде разные, системы нет, прописные буквы и строчные часто означают СИЛЬНО разное, гуглить это невозможно, да и выглядит как оккультная магия.  Сравните:  /bin/bash -eux и   /bin/bash -o errexit -o nounset -o xtrace  Ладно, у себя в консоли можете делать что хотите. Но скрипты увидят другие люди, и эти люди тоже чьи-то дети! Хотя бы ради них.",40
"Я уже четыре года смотрю на Ютубе видео про Третьих Героев Меча и Магии. Сэра Троглодита всегда, других геройщиков по настроению. Иногда в фоне пока работаю — очень классная музыка.  Сам я до этого играл в универе на любительском уровне, так что это еще и очень образовательные видео. Узнал много нового, научился всяким трюкам (я так думал).  Так вот, сел я на выходных поиграть сам, и... У меня ничего не получилось! То есть не «в два раза хуже», а раз в 100 хуже, полный крах. Я практически ничего не мог сделать, армия таяла на глазах, куда идти я не знал, в итоге сидел дома строил капитолий.  К чему я это? Больше всего меня поразило, насколько долго (четыре года!) можно смотреть на чужую игру в упор и не видеть суть. Оказывается, смотреть/слушать/учиться и делать самому это два принципиально разных навыка. Очевидно, да, но все-таки мне почему-то казалось, что если учиться чему-то, то навык деланья будет как бы автоматом качаться тоже, только в более медненной пропорции. Типа 1/2 или 1/3. Или 1/5 хотя бы. Но нет. Стоит на месте.   Так что всем теоретикам и диванным комментаторам привет, я с вами!",41
"История дня: два британских аристократа организовали в Оксфорде в 1946 году общество для людей с высоким интеллектом. Единственным критерием приема был IQ тест, нужно было показать результат в верхних 2%, то есть лучше чем 98% остальных людей. Назвали Менза («стол» на латыни), имея в виду круглый стол и что в сообществе все на равных.  И тут же в нем разочаровались. Первый был недоволен, что вместо аристократов в него в основном вступают простые рабочие. Сюрприз-сюрприз, интелект (если он вообще хоть как-то измеряется IQ тестами) распределен между людьми равномерно; богатый — не значит умный примерно с той же вероятностью в верхних слоях общества, что и в нижних.  Ну а второй рассчитывал, что общество сфокусируется на действительно важных и высокоинтеллектуальных дебатах и проблемах, а члены вместо этого начали обмениваться друг с другом логическими загадками и играть в игры. Тоже ожидаемо, учитывая, что IQ тесты — это как раз чисто абстрактные паззлы на чисто абстрактную логику.  Называется Mensa, если захотите погуглить и поржать еще немножко.",42
"Есть такая выдающаяся билд-система для плюсов, Ninja. Ее автор Evan Martin задолбался компилировать хром мэйком и написал свою систему с фокусом на супер-быстрой инкрементальной сборке. Получилось так хорошо, что на нее все быстренько в С++ мире и переехали.  Про создание Ninja есть отличная статья, гуглится по «The Performance of Open Source Software Ninja». Там много хороших решений, но я хочу подчеркнуть две вещи.  Первая — чтобы получить быструю программу, достаточно захотеть быструю программу. Спроектировать и написать ее после этого если не тривиально, то все равно не слишком сложно. Гением быть не нужно, и пятьсот программистов тоже не нужно (и даже вредно), достаточно одного.  Почему же нас не окружает миллион быстрых программ, если это так просто? А потому что никто не хочет именно скорости, по крайней мере не по-настоящему. Скорость может быть объявлена целью на словах, но на деле быть пятой или десятой в списке приоритетов, уступая место всякой шелухе: фичам, привлекательности для потребителей, удобству программистов, трендовости, срокам разработки, раздутым командам, заключенным партнерствам.  Вторая интересная мысль о том, что мало написать быструю программу, надо еще создать ощущение скорости. В случае Ninja решение настолько же простое, насколько и гениальное: если Ninja делать нечего, она печатает ровно одну строчку («ninja: no work to do.») и завершается.  Казалось бы, подумаешь. Я тоже так могу! Не можешь. Естественная тенденция для программистов: насрать в лог побольше и удивляться, чего это их программу никто не любит. Какой-нибудь Maven высирает 25 строк даже если не сделал НИ-ЧЕ-ГО. Найти упоминание об этом важнейшем факте в 25 строках разноцветного орнамента, скажем так, нетривиально.  Чтобы получить засранный лог, ничего специально делать не нужно, он таким получится сам собой, со временем. А вот чтобы привести логи в компактную и полезную форму, требуется прилагать дополнительные усилия.  Во-первых, нужно осознать это как проблему: каждый случайный println и raise в кодебазе это, внезапно, интерфейс вашего приложения, его лицо, одежка, по которой его будут встречать. А значит применимы все принципы и законы UI/UX.  Во-вторых, нужно уметь встать на сторону пользователя и понять, что важно видеть на экране именно для него, а не для разработчика приложения.  В-третьих, нужна железная воля, чтобы принять эти решения: каждый кусочек информации потенциально полезен _когда-нибудь_, вопрос только в том, где провести черту и когда выкинуть полезные, но не часто нужные сообщения, приведет к улучшению для среднего пользователя.  Ну и в-четвертых нужно пойти и реализовать этот самый лаконичный аутпут. А это работа, на которую может не хватить времени или сил, или которая может потребовать серьезной переделки кода. Разбросанные по коду принты разбросаны там, где их было удобнее всего оставить, а не там, где они расскажут самую красивую или последовательную историю.  То, что ninja печатает ровно одну строку не значит, что она ничего не делает. Нет, происходит куча работы, о которой потенциально можно было бы рассказать: какое окружение использовалось, какие версии программ, в какие папки смотрели, сколько файлов обработано. Просто Эвану хватило яиц принять решение, что это все внутренняя кухня, которая пользователям не особо интересна, пока программа работает нормально и никакая жопа нигде не отвалилась. Ну и хватило сил пойти и реализовать такой вот corner case.  Будете писать утилитки в следующий раз — вспомните о Ninja и о том, что она такой лаконичной получилась не сама собой. Над этим специально нужно работать.",43
"Если вы программист, то наверняка самозванец и знаете об этом (см. синдром самозванца). Умом мы понимаем, что все знать нельзя, но на деле кажется, что это недочет, который надо исправить, причем как можно тише, иначе стыдно. Я решил освободить мыслительные и душевные ресурсы и открыто признаться в том, чего я не знаю и не умею, хоть и зарабатываю на этом деньги:  Докер. Понятия не имею, как с ним обращаться: что скачивать, как писать докерфайлы, какие команды запускать, что умеет, а что нет. Пару раз тыкал, путался, ничего не понял, показался жутко нелогичным.  Облачные провайдеры. Я знаю, что там сейчас целые стеки и можно накликать себе целую high-load систему, не выходя из AWS Console (No Code, хе-хе), и я даже работал в таких стартапах. Но для меня это всегда было не больше, чем способом создать N линуксовых виртуалок. Но я и не понимаю толком, зачем кому-то что-то большее, так что эта история совершенно прошла мимо.  Ни разу в жизни не видел микросервиса. Не то чтобы жалею, но факт остается фактом. Наверное, незнакомство с Докером и AWS и этот пункт связаны.  “Современный” фронтенд. Что такое вебпак, гульп, бабель, постцсс, сасс, лесс, автопрефиксер. Что из этого актуально, что устарело, кто за что отвечает, кто в кого входит — ноль идей. Тешу себя мыслью, что «а зачем, вы каждый год разные», но тем не менее.  Git CLI. Это чуть более сознательный выбор. Всегда пользуюсь графическим UI, потому что CLI неудобный и нелогичный, хрен запомнишь. Сам Git, мне кажется, я знаю неплохо, но вот CLI... Восхищаюсь людьми, которые могут на память воспроизвести git log --pretty=oneline --abbrev-commit, git push origin :branch и помнят, чем отличаются git diff, git diff --staged, git diff --cached и git diff HEAD и все пять видов reset (mixed, soft, hard, merge и keep).  Ни разу не писал приложения под телефоны, какие-нибудь AppKit/UIKit для меня пустой звук.  SQL знаю довольно посредственно, на уровне select/join/group by/limit/in (давно не пользовался). Таблицу не создам (ну, с гуглом наверное создам), индекс не оптимизирую, запрос не отлажу, шардинг/репликацию не настрою, изоляцию транзакций не выберу.  Монады, теория категорий, ковариантность и прочие «научные» основы нашего мастерства. Те, кто с этим знакомы, общаются так, что без этого даже Hello World правильно не напишешь, я же как-то пока справляюсь по старинке.  Ассемблер не знаю совсем, даже не знаю, как его добывать и на что там смотреть.  Практически все про 3Д-графику. Когда я начинал программировать, шейдеров еще не было, а с тех пор мне так и не довелось разобраться. Поэтому для меня 3Д это все еще текстуры и треугольники.  Бенчмаркинг и оптимизация кода. Кажется, есть какие-то более правильные, «научные» способы (не знаю!), но все что я когда-либо делал, это запускал код в цикле на 100 000 раз и потом делил время на 100 000.  Машин лернинг, AI и биткоины прошли точно так же мимо. В теории я понимаю, что нужно комп с мощной ГПУ и гонять на нем сетку пару дней, на практике даже на видео не видел, как это делается и какой софт для этого используется.  Такой вот список. Делитесь своими слепыми пятнами, самозванцы!",44
"Самое тупое, что может быть — это апскейльнутые до 60 fps и 4k видео из менее детального источника. Эта функция иногда встроена прямо в телевизоры, иногда на Ютуб заливают предобработанные локально видосы. И это максимально ужасно.  Дело вот в чем. Движение на экране — это иллюзия. Глазу показывают статичные картинки, а мозг внутри аппроксимирует их в непрерывный процесс. Если ему показывают 24 кадра в секунду, снятые с интервалом в 1/24 секунды, все честно: он видит положения объектов ровно тогда, когда они на самом деле происходили, и может воссоздать любые промежуточные состояния.  А теперь подстава: движение бывает нелинейным. Объект может ускоряться, замедляться, поворачиваться, удаляться и приближаться. Это значит, что если бы то же самое видео снимали каждые 1/48 секунды, средние кадры не были бы арифметическии средними между двумя соседними.  Но это ровно то, что делает аппроксимация! Она просто ставит между двумя известными кадрами их усреднение с коэффициентом 0.5. Это не просто бессмысленно, это вредно! Мозг не может нормально считать движение, потому что этот среднее состояние противоречит соседним, и ему нужно его как-то отфильтровать. Поэтому такое движение выглядит максимально неестественно и смысла в нем немного: картинка выглядит хуже с аппроксимацией, чем без нее. Наверное, единственный смысл такой фичи маркетинговый (сможете смотреть своего Чарли Чаплина в 120 fps, деды!).  А как же нейронные сети, скажете вы? Нейронные сети, действительно, могут учитывать чуть больше информации и делать нелинейные промежуточные кадры. Но и они а) не всесильны, б) ошибаются и в) не могут волшебным образом воссоздать упущенную информацию, которой в исходном материале нет. Как бы они ни были хороши, в информационном смысле они не могут доложить вам новых данных, они могут только лучше или хуже переживать то, что в материале и так уже есть. Зачем мне смотреть на аппроксимацию того, что мой мозг сделает лучше, не очень понятно.  То же касается любых способов «улучшить что-то на ровном месте». Пиксельная графика, растянутая линейным фильтром (или даже нелинейным) всегда хуже, чем просто толстые, честные квадратные пиксели. Просто потому, что пытается создать смысл из воздуха.",45
"По горячим следам, никого не хочу разозлить, но надо написать, чтобы освободить голову.  Если вы купили новый телевизор, первое, что нужно с ним сделать — отключить любые «улучшатели» изображения. Это интерполяция кадров, да, но также задранный контраст, шарпенинг (выкручивайте в 0), шумоподавление, и мало ли что там еще бывает. Точно все со словами «улучшение», «умный» или «демо режим».  Почему? Телевизоры продаются в окружении десятков таких же телевизоров, и чтобы как-то выделяться, в магазине картинку задирают до противоестественных («продающих») величин. Да, излишне контрастная перешарпленная картинка обращает на себя внимание, но только в моменте. Долго смотреть на это невозможно, да и не нужно — дома-то у вас телевизор один и конкурировать ему ни с кем не надо.  Доказательство, что эти «улучшения» не делают лучше, очень простое. Вы правда думаете, что голливудская студия потратила 200 миллионов долларов на фильм, но не догадалась задрать цвета и пошарпить изображение? Если бы изображению от этого становилось лучше, это сделали бы еще при мастеринге. Но почему-то не делают. То же самое касается растягивание 24-кадрового (мульт)фильма до 60 кадров. Думаете, в голливуде не умеют делать то, что встроено в каждый телевизор?",46
"Возвращаемся к постам про программирование. Сегодня hot take: логирование переусложнено.  Определить легко: если какой-то топик вызывает бурные дискуссии, на которых люди не могут договориться о значении терминов, значит дизайн системы плохой. Система, которая не вносит ясности, не нужна.  Давайте посмотрим на уровни логирования. Что такое, например, WARNING? ERROR понятно, что-то сломалось. На INFO мы еще посмотрим, но пока предположим, что INFO это что-то, что очень нужно сообщить пользователю, но ничего не сломалось. А что в такой системе координат WARNING? Ничего не сломалось, сообщить надо, но чуть нужнее, чем INFO?   Чувствуете, как сложно определить, что выбрать? Видите километры споров на горизонте? Так пахнет плохой дизайн.  Теперь INFO. Типа, это что-то, что надо сообщить пользователю. Это тоже очень сомнительная мысль, что программа общается с пользователем через лог-файлы. Нормальная работа это нормальная работа, если все идет хорошо, то в лог никто смотреть и не будет. А если не идет, то это уже ERROR!  DEBUG, внезапно, один из самых полезных уровней. Это информация о происходящем, которая, типа, может быть полезна разработчику. С этой концепцией я в целом согласен, иногда бывает полезно почитать, что там происходило.  В целом у DEBUG такая же тонкая грань с INFO, как и у WARNING с ERROR. Идея о том, что есть некоторый промежуточный человек между разработчиком и пользователем, которому интересны какие-то дополнительные сообщения, кроме ошибок, но не интересен весь остальной вывод для разработчика, ну, зыбкая.  Про TRACE я тактично промолчу. Это такой странный уровень, который целиком не нужен никогда и никому, но иногда ситуативно типа его можно для какой-то подсистемы включить. Но с тем же успехом можно println-ов навставлять, потому что вставленный по какой-то причине кем-то TRACE никому никогда в жизни больше не пригодится и можно с тем же успехом его не коммитить вообще.  Наконец, системы «тонкой настройки», лог-конфиги, когда можно прицельно включать логирование для конкретного класса или подсистемы. Красивая мысль, ни разу в жизни не пригождалась, одного общего рубильника на все обычно достаточно. А вот геморроя создает знатно, и 95% моего взаимодействия с системами логирования — попытки заткнуть все библиотеки до уровня ERROR, потому что срут в логи они знатно, но зачем это мне, а не разработчику библиотеки, непонятно.  Главная проблема текущего состояния в названии уровней: вроде глупо писать важную информацию в error, если это не ошибка, или писать ошибку в info, даже если мы ее обработали. А если хочется предупредить, то это получается как бы ворнинг должен быть, независимо от того, кому и когда эта информация релевантна.  Поэтому:  - уровня логирования нужно всего два: verbose и important. - В important печатаем только ошибки и business-critical вещи, в verbose печатаем все, что может быть интересно разработчику. - Всякие «успешно подсоединился к хосту АБВ», «забиндил порт УФХЦЩ» — в verbose и не нужны (см. мой пост про ninja). - Библиотеки всегда фильтруются только по important, потому что отлаживать их обычно все-таки надо только самим разработчикам библиотеки.  Такой дизайн. Аж руки зачесались свою библиотеку пойти написать.",47
"К статической типизации я отношусь взвешенно. Понимаю, что у нее есть как плюсы, так и минусы. Как и с любой технологией, главное, чтобы вы понимали, что конкретно вы получаете. Осознанность (©) (™).  Про самое осмысленное использование я читал у Gary Bernhardt в Execute Program. Они взяли TypeScript, заморочились тем, чтобы протянуть одни и те же типы от базы до конечных API-endpoints (а может и до фронтенда? Наверное, до фронтенда тоже). Ну и типа пожинали плоды потом, наслаждались тем, как любое изменение показывает тебе _действительно_ _все_ места, которые ломаются в системе. Отличный пример использования статической типизации как инструмента для достижения конкретной цели, которая сформулирована явно.  Про самое ужасное использования я слышал от Сергея Зефирова, когда он прямо на докладе про Хаскель признался, что типы для него это что-то вроде паззла-головоломки, и как приятно бывает потратить пару часов, чтобы эту головоломку решить.  Посередине между двумя этими крайностями статическая типизация, которую выбирают по инерции, типы, которые запутывают, а не помогают, типы, которые мешают сделать тривиальные вещи, типы, которые создают работу там, где по смыслу ее нет, типы, которые абстрагируют то, что абстрагировать не нужно, типы, которые скрывают понимание проблемы, обход системы типов там, где она как раз, казалось бы, нужна. За свою жизнь я видел, пожалуй, больше плохого статически типизированого кода, чем хорошего, и решение, конечно, не в том, чтобы затипизировать еще сильнее, а в том, чтобы разобраться в задаче. Статическая типизация не учит программировать и не помогает думать, увы.  Я очень рад за Сергея (каждый программирует как хочет), но я все-таки предпочитаю, чтобы инструмент помогал мне решать мои проблемы, а не создавал новые на пустом месте. На возражения «типы вскрывают настоящую сложность задачи, которую ты не осозновал» предлагаю признаться: почти все мы пишем довольно несложные вещи. Вся привнесенная сложность — она, ну, привнесенная, от скучающего ума, ищущего, куда себя приложить. В конце концов нам нужно взять байты из одного места и отправить их в другое. Все, что происходит между, происходит только в нашей голове, и нам решать, будет ли эта башня из мысленных конструкций готическим собором или кратчайшей тропинкой из точки А в точку Б.  Я не хочу сказать, что я против статической типизации по какой-то причине (хотя наверняка кто-нибудь это именно так и прочитает). Я пытаюсь сказать, что типы сами по себе они ничего не дают и не делают программу лучше. Они не заменяют логику, простоту, хороший дизайн. Но если знать, чего ты от типов хочешь, их можно правильно использовать. А если не знать, то получится как всегда.",49
"Одна из самых полезных привычек, которые я недавно приобрел — заводить папку script в каждом проекте и складывать туда скрипты с предсказуемыми именами. run.sh, build.sh, test.sh, bootstrap.sh — что-то типа такого. Прочитал я это, кажется, в Гитхаб блоге, но найти уже не могу. Но я даже лучше вам расскажу!  Раньше было как? Проект на Кложе, значит есть стандартный project.clj, ну и ты вроде как помнишь что надо писать lein run или lein repl. Потом появляются алиасы, они конечно записаны в project.clj, но туда надо постоянно заглядывать, чтобы вспомнить. Потом появился deps.edn, какие-то проекты на него уже переехали, а какие-то пока не трогал, и приходится помнить уже про два способа запуска: clj и lein. Потом где-то решил поэкспериментировать с тестовым фреймворком, и вот там уже своя особая команда для запуска тестов. Потом где-то автоматизировал весь релиз, а где-то достаточно простого lein deploy. Потом появилась Fira Code, которая вообще на Питоне, и блог на Руби.  Короче, вы поняли. Зоопарк. С каждой конкретной системой в отдельности (maven, pip, lein, clj, gradle, cmake) можно было бы обойтись мышечной памятью и встроенными алиасам, но самих систем слишком много, они все разные и помнить все это нет никаких сил.  Нужна объединяющая идея. И это папка script! Настолько же удобно и гениально, насколько просто и тупо. Но это работает! Это просто набор стандартных ручек, которые всегда торчат одинаково в одних и тех же местах у _всех_ проектов. Внутри может быть one-liner типа lein run — пофиг! Главное, что про это не нужно помнить.  Насколько это удобно понимаешь, когда встречаешь проект без этого. Где-то положил скрипты в корень — и все никак не можешь их вызвать. Где-то сумничал и назвал start.sh вместо run.sh и вот пальцы уже тупят, не понимая, почему не получается запустить проект. А вот когда это работает, то это настоящее волшебство и совсем другой уровень жизни. Рекомендую.  UPD: В комментах деды топят за Make для этих же целей. Про Make у меня есть такое мнение:  - Нет автодополнения по Tab (или его надо устанавливать) - Скрипты могут быть на разных языках (у меня как минимум есть sh, python, clojure и babashka) - Неудобно запускать из другой директории - Ну и Make надо учить. Если уже его знаешь, наверное, он может выглядеть привлекательно. Я не знаю, и каких-то других аргументов именно _за Make_, кроме «я его уже знаю», не видно.",50
"Моя любимая фигня — когда программисты садятся в терминал и начинают пытаться сделать его красивым. Ну там сначала цвета, конечно, потом крутилки из /-\|, потом прогрессбары разной степени изобретательности, потом рамочки, потом powerline и панельки всякие в vim-е, ну и git log --graph конечно, в котором люди вообще вензеля выписывают.  Вопрос, собственно: если вам так сильно нужны графические штуки, в чем смысл сидеть в терминале и его убогими, никак для графики не предназначенными костылями воспроизводить парадигмы графического UI? Чтобы доказать — кому, что? Vim с панелями в терминале это не CLI, это такой же GUI, только плохо нарисованный.  У меня, конечно, есть ВЕРСИЯ. Версия заключается в том, что минимум графических средств позволяет делать более лаконичные интерфейсы, что ли. Когда все расставлено по сетке, используется один шрифт, минимальная цветовая палитра, и уже сильно некрасиво не сделаешь, как ни старайся.  Плюс унификация, все терминальные программы очень похожи друг на друга, что создает ощущение экосистемы, что ли. Примерно как если бы все маковские приложения использовали только стандартные виджеты (ага).  Плюс возможность настройки под себя. Терминал — это как CSS в начале веба, когда его поставлял не сайт, а юзер. Тогда можно было поставить свой любимый шрифт и цвет фона только для себя, но зато на всех сайтах сразу.  И вот ради этого ощущения люди готовы терпеть все остальное: плохую псевдографику, нестыкующиеся линии, проблемы с копи-пастом, интерфейс терминала вокруг интерфейса приложения. Я хотел сюда еще дописать «неудобство разработки», но понял, что удобство разработки-то поди у консольных UI повыше будет.  Мораль такая, что при разработке UI-фреймворка надо стремиться к лаконичности и простоте разработки терминала, только без минусов.",51
"Одна из вещей, про которые я железно уверен, что они работают (а таких ОЧЕНЬ немного) — код-ревью.  Когда-то я работал в компании Эхо, где мы изобретали встраиваемые виджеты комментариев, еще до Дискуса (да, я такой старый).  И там была одна практика — на любую задачу должен посмотреть хотя бы еще один человек и дать окей. Ну, была и была, мы все честно в эту игру играли, не то чтобы каких-то высот продуктивности и качества достигали. Может и достигали, я не знаю, просто как-то особенно это не ощущалось.  А потом рутина подзадолбала и наша команда решила сделать небольшой сайд-проект для внутреннего использования. Только нам хотелось делать его на расслабоне, по пятницам, в противовес остальной, серьезной, ответственной и оттого немного нудной работе. Ну и конечно мы первым делом упразднили код ревью! Коммитили прямо в мастер, каждый сам решал, чем заниматься, как писать и так далее.  Завалилось наше начинание очень скоро и очень живописно. Коммитили мы конечно быстро, но такая фигня получалась. По итогам все согласились (абсолютно добровольно и единогласно!) что не хватает именно код ревью. Нагляднее и доходчивее я мало что ощущал в жизни.  Почему? Гипотеза у меня очень простая: коммуникация. Ревью это простой и понятный формат проговорить важные вещи, сверить часы, поделиться информацией о реализации, согласовать что-то, поднять какой-то вопрос.  Казалось бы, раз это такие важные вещи, почему бы их не обсуждать проактивно? А потому что. Не получается. Не работает. На каждый чих собирать собрание не будешь, многие вещи не кажутся важными тебе, но покажутся другим. Про что-то ты просто заблуждаешься и думаешь «чего тут обсуждать». Ревью — это регулярный повод для разговора, удобный для всех участников.  Другие форматы? Гораздо хуже. Дизайн-митинги, стендапы, пост-мортемы слишком редко проходят, на них слишком много людей и повестка обычно слишком расплывчата. Ревью же максимально конкретны, максимально узкой компанией, с макмимально ясной целью, да еще и щадят расписание участников из-за своей асинхронной природы.  И не стоит боятсься, что ревью вас замедлят. На длинной дистанции — только ускорят, а еще сделают атмосферу в команде здоровой, и связи укрепят. Пойду дальше и скажу, что на мой взгляд это вообще _единственный_ правильный способ работы в команде.  Так что вот, рекомендую попробовать.",52
"Продолжая про код ревью, я научился тогда одной важной вещи, плоды которой пожинаю до сих пор. Называется «не доебываться по мелочам».  Когда мы только начинали, никто не знал, что конкретно писать в ревью, а что нет. Поэтому писали все, что в голову приходило, важное или неважное. В первую очередь я, как человек занудный и педантичный, мог докопаться чуть ли не до форматирования. Быстро стало понятно, что это всех изматывает, жить так нельзя, ну и ребята сделали мне интервеншн.  Правило очень простое: комментировать только тогда, когда можешь внятно сказать, почему так делать нельзя. Не «будет лучше», а именно нельзя. Альтернативные решения, которые ты придумал — в топку. Советы по улучшению перформанса в некритичных местах кода — помалкиваем. Форматирование или собственные идеи по наименованию тем более. Заворачивать что-то из-за соображений на будущее, «когда-то нам понадобится Х, поэтому давай сейчас переделаем», тоже не окей — когда понадобится, тогда и сделаем.  Но самое главное — помалкивать, если не можешь сформулировать проблему, или если формулировка звучит неубедительно. А мои любимые «Этот код говно», «так писать нельзя», «тут все плохо» — не аргументы, а роспись в собственном неумении формулировать мысли. Думать вслух в принципе окей, и не знать всех ответов тоже окей, но ревью не место для этого. Думай в свободное время, но на обсуждение выноси конкретику.",53
"Когда обращаешь внимание, что какая-то программа долго запускается, часто можно услышать возражение: «первый запуск медленный, зато инкрементальный быстрый». Типа, пострадай один раз, а потом станет легко и приятно.  Не станет. Инкрементальность — это всегда а) компромисс (запускать каждый раз долго, надо было что-то придумывать), поэтому б) решение задним числом (спохватились, когда уже все написали и поняли, что тормозит) и в) просто очень сложно. Ну не силен человеческий мозг в комбинаторике, не может держать в уме все возможные n² переходов.  Как результат, все инкрементальные тулзы без исключения, которые я видел, работали ненадежно и требовали постоянного перезапуска. Clojure, ClojureScript Compiler, Gradle, Kotlin Compiler, вся IDEA целиком. Причем не в единичных случаях, а на постоянной основе — либо изменений оказывалось так много, что какая-то ошибка обязательно да вылезала, либо просто юзкейс не предусмотрели.  Так что идея разогнаться инкрементальностью звучит красиво только на бумаге, а на практике это нереализуемый ад, который еще никто, то есть вообще никто, не смог реализовать стабильно. И нет, никто не смог, а я смогу — не сможешь. И я не смогу. Никто не сможет.  Инкрементальность лучше, чем ничего, но это компромисс. Инкрементальность всегда добавляют от плохой жизни, а не от хорошей. Лучше (и проще) — писать сразу быструю программу, которой не нужна инкрементальность.",54
"Короче, писать скрипты на Баше не нужно. Bash на удивление удобный язык, да. Но он так же и очень плохой.  - Bash просто отвратительный язык программирования. Аргументы функций, возвращаемые значения, глобальные переменные, типов нет, списков нет, регэкспы ужасные короче ужас. Даже простые вещи приходится постоянно гуглить, а написать прилично выглядящую и читающуюся, пусть даже слегка нетривиальную программу, практически невозможно. Если подумать, бредовая же идея — интерфейс интерактивного набора коротких однострочных команд засунуть в batch-файл и сделать основой автоматизации всего проекта. Бред! И ровно то, что происходит.  - Куча артефактов древних, про которые ничего не понятно, кроме того факта, что рано или поздно они выстрелят в ногу. В чем разница между $(...) и бэктиками? Между [] и [[]]? И еще там какой-то пробел где-то рядом с этими скобками очень важно поставить, кажется. Каждый раз, когда читаю про то, как правильно дважды эскейпить символы в scp, иду в итоге и напиваюсь.  - Многое bash не делает сам, а делегирует «утилитам». Самое подлое, что эти утилиты разные, но только _слегка_, то есть вроде как бы делают одно и тоже, но вроде как и чуть-чуть по-разному. Такая бомба замедленного действия, ждущая своего исключения. Я написал, может, двести строк на Bash, но даже на таком маленьком объеме успел напороться на два расхождения в xargs и в sed между macos и linux.  - Запустить bash на Windows в принципе можно, но означает притащить с собой половину Линукса, и все равно наесться говна на кросс-платформенности. Нет в mingw какого-нибудь zip и привет. Лично я очень долго уговаривал Windows выбрать правильный виндовый компилятор, но вызывать его из линуксового bash-скрипта.  - В Bash опасные дефолты. Очень легко написать программу, которая работает сейчас у меня, но не сработает в слегка другой ситуации. Пробелы в именах файлов до сих пор не побеждены, да! Я лично жрал это говно послдений раз вот прям в 2020. Не проверили exit-код? Зажуем ошибку. Опечатались в переменной? Подставим пустую строку! Запустили скрипт из другой директории? Посчитаем все пути относительно нее!  - Иногда же наоборот, бесит, что там, где как раз «разумные дефолты» диктуют ошибку проглотить (например, потому что работа уже сделана и ничего делать не надо), оно ломается и ставит раком весь процесс. mkdir поверх уже созданной папки? Ужас какой, остановим всю программу! cp с нулем файлов (ну потому что предыдущий шаг ничего не произвел)? Невозможно, на всякий случай тормози поезд! `rm`-у нечего удалять? Непорядок, начальника!  Да, любой из аргументов выше можно опровергнуть: да ты не разобрался. Ну вот мой hot take: а я и не хочу разбираться! Мне не нужна докторская по скриптингу, скриптинг это по определению то, на что я хочу тратить минимум усилий. Чем безболезненне, тем лучше.  Главная уловка-22 в том, что на баше легко _начинать_. Одно-двухстрочники действительно, ни на чем удобнее не сделать. Но дальше bash не масштабируется, а люди все равно продолжают писать. Чтобы выкинуть bash надо _принять решение_, а чтобы продолжать, не нужно делать ничего, даже просыпаться не нужно.  Какая альтернатива? Питон. Отличный язык, очень лаконичный, минимум церемоний, батарейки все в комплекте: argparse, subprocess, os.path, glob, shutil, urllib.request, zipfile. Везде, ну, почти одинаковый.  Кросс-платформенный. На маке/линуксе даже как будто из коробки?  Так что я все понимаю. Сложно. Но надо меняться. Даже если кажется, что все окей, даже если все так делают. Потому что bash — это все-таки затянувшийся несмешной пранк, который почему-то начали воспринимать серьезно. Пора ему туда же, где сейчас Перл — на свалку, ой, простите, полку истории.",55
"Каждый раз, проходя мимо фронтенд-стека, удивляюсь: ребята, у вас уже был идеальный сетап для разработки. Редактируешь файл на диске, хоть HTML, хоть CSS, хоть JS, обновляешь страницу — бам! Все работает. Никаких компиляций, никакой инфраструктуры, никаких приложений, достаточно реально блокнота. TextMate в свое время взлетел как раз на волне того, что для разработки ничего более сложного не было нужно. Компилятор встроен в браузер, оптимизирован под time to interactive, REPL там же офигенный, дебаггер, визуальный отладчик один из лучших.  Как это можно было добровольно испортить? Как можно было отказаться от этих даров богов в пользу медленного и сложного пайплайна? Нажал кнопочку, вебпак запустился, минуту пошуршал, стрелочки в терминале красиво погонял туда-сюда. Минуту!!! ... профит? Потом еще пойди разбери, что он там нагенерил и откуда это пришло (наверняка для этого тоже есть ТеХнОлОгИи, но это тушение пожара огнем какое-то, ей богу).  Получается, деградация веб-разработки произошла ровно по одной причине: она выглядела недостаточно серьезно. Как это – файл в блокноте написал и все? Ты точно разработчик? А деньги за что получаешь? Конференции, опять же, вокруг TextMate-based workflow не соберешь, а молодым людям хочется общаться.  Если что-то делается слишком просто и очевидно, некуда прикладывать мозг, а человек у молодого растущего человека не любит, когда мозг ничем не занят. Видимо, есть какой-то естественный уровень сложности, с которым человеку приятно работать. Если сложности меньше, она добавляется искуственно, на ровном месте, чтобы мозг не работал вхолостую.",56
"Языки пока еще застряли в парадигме разработчика и его машины, а мир тем временем связал интернет. Глобальные репозитории пакетов и импорт зависимостей с github — хорошо, но это только начало. Нужно идти дальше.  Концепция такая: весь код, который кто-либо когда-либо писал, должен быть доступен тривиально, так же, как вызвать соседнюю функцию из текущего файла. Потому что, ну, а почему нет?  Что мешает? Количество церемоний. NPM и node_modules подошли близко, но оверхед на публикацию пакета все еще очень высокий. Вот количество файлов в репозитории is-array, js-функции из одной (!) строчки:   .gitignore .jepso-ci.json History.md Makefile Readme.md component.json index.js package.json test/test.html   Можно еще меньше, но все равно это как минимум несколько файлов. Кроме этого, нужно завести репу на github, пакет на npm, опубликовать из одного в другое, потом выбирать версию, импортить это в package.json, нажимать npm install, и наконец можно использовать. Сложна!  Понятно, что сто раз подумаешь, импортить либу или скопировать код, настолько код проще и короче, чем весь процесс «управления зависимостями» и публикации библиотеки. Так вот, этого противоречия быть не должно. Если я написал простую функцию, я должен так же лекго ей поделиться, или так же легко ее подключить.  Вторая проблема, которую несут библиотеки – версии. Код библиотек может меняться, с транзитивными зависимостями эти изменения могут не всем в кодбазе понравиться, а отдельных неймспейсов у версий библиотек нет. Поэтому добавляются зависимости неохотно — опасно, сложно, хрупко.  И третья проблема это избыточность. is-array это вырожденный случай с одной функцией, обычно, конечно, функций в библиотеке минимум десятки, а дальше сколько угодно. Тебе могут быть не нужны все их них, но подключать приходится все и сразу. JS-ники изобрели tree-shaking, потому что в браузер отдавать балласт не очень здорово, а на бэкенде так и живут — заимпортил сотню классов, использовал два.  И вот к какому решению я пришел:  - Репозиторий функций, а не пакетов. - У каждой функции уникальное fully qualified имя, как URL. - Функции иммутабельны. Хочешь что-то поменять — создавай новую. Неудобно, зато надежно. - Функции могут зависеть только от других уже опубликованных функций. - Тривиальный импорт из юзер кода. Прям в любом месте import-remote me.tonsky.collections.group-by as group-by; и все, вперед использовать, как будто она у тебя всегда была в соседнем файле написана. Никаких package.json, лок-файлов и никаких прогресс-баров, как она скачивается. Минимум церемоний.  Одна из проблем, которую такая штука решит, это папка utils. Коллекция хлама, который вроде как нужен, но публиковать глупо, потому что оно по определению не сочетается друг с другом. Так и мигрирует кое-то поштучно из проекта в проект.  Вторая — tree-shaking. В такой схеме он не нужен, потому что импортится только и точно то, что используется.  Нужен ли для этого какой-то специальный язык или рантайм? Кажется, что нет! На Кложе такое можно сделать макросом, у меня даже был прототип, но до продукта я его не довел, потому что там надо тот самый репозиторий организовывать. Кажется, и на JS можно.  Может кто-то сделает.",57
"Сегодня четвертый день, как я борюсь с макОС-ом в попытке поставить системный светофор по нужным мне координатам. Дорогой дневничок,  День первый.  - Мы хотим вписать светофор в наш собственный заголовок. По красоте, как у всех. - Если скрыть тайтлбар, светофор пропадает. Логично. - Его можно добавить обратно, но теперь кнопки не реагируют на перемещение. - Их родительский view тоже не реагирует на перемещение. - Нужно создать новый view и перенести кнопки туда. Сами кнопки двигать все еще нельзя. Зато теперь можно двигать родительский view! - У кнопок остается неубираемый оффсет, типа (7, 6). Собственно, чтобы поставить кнопку на X,Y, надо поставить наш view на (X - 7, Y - 6). - Этот оффсет разный на разных версиях ОС. На Каталине, например, (7, 3). - Путем нехитрой тригонометрии подгадываем координаты, чтобы кнопки в конечном счете встали куда нужно. - Тестируем ховер. Плюсы: ховер работает. Минусы: когда наводишь на пустое место, где кнопки стояли раньше, ховер тоже срабатывает :(  День второй.  - Кажется, дело в старом родителе, у которого забрали кнопки, но который до них дозванивается. - Удаляем его, ховер начинает работать как нужно. - Тестируем переход в фуллскрин. Чудом фуллскрин работает как надо сразу. Пронесло. - Выходим из фуллскрина. Кнопки встают на свои дефолтные места. Ну еб твою мать! - Ладно. Мыж программисты. Выливаем воду из чайника, зовем нашу функцию еще раз, кнопки встают куда нужно. - Снова тестируем ховер. Работает. Ходим в фуллскрин и обратно. Позицию починили. А ховер, сука, опять не работает!!!  День третий.  - Перепробовано миллион вариантов, кого куда добавлять, за какие методы подергать и какие маски поставить. - Изучены исходники Electron, включая историю изменений фичи про светофор, Chromium и Firefox. - Прошерстен StackOverflow. - Успех пришел из ответа с одним (!) апвотом. Окно после выхода из фуллскрина надо поресайзить — увеличить на пиксель и вернуть обратно. - Объяснение — кнопки ходят в своего родителя (!) и дергают у него приватный АПИ (!!). - Причесываю, коммичу наконец (нормально ли, три дня без эякуляции^W^W коммитов?), ложусь спать.  День четвертый.  - Добрые коллеги не поленились каждый завести по тикету, что на старте появился новый warning. - Оказывается, рутовый view не ожидал, что в него будут что-то добавлять. Он проверяет по списку знакомых ему вьюх, и если что-то незнакомое, то ругается. Но работает. - В чем смысл такой логики? Ты либо не работай, либо не ругайся. А так пассивная агрессия какая-то. - Переставил кнопки в content view. Ворнинг ушел. Дело объявляется закрытым.  Ну то есть как закрытым? Кнопки все еще слетают при смене системной темы (!) и прыгают при выходе из фуллскрина. Но я больше не могу, нужно переключится на какую-то осмысленную деятельность. Кстати, если бы я просто сразу сам нарисовал эти три сраных кружка, я бы управился за полдня со всеми ховерами, альтами и попапом на фулскрин. Да, выглядело бы несистемно на старых или новых версиях. Но полдня!  Больше всего расстраивает, что это вроде как и называется инженерной работой у нас в индустрии. Ходить с бубном вокруг каких-то хреново сделанных артефактов в надежде на дождь. Решить тривиальнейшую задачу средствами, сравнимыми с удалением гланд через задний проход. Какое-то бессмысленное колесо сансары, одни делают говно, другие этим говном вынуждены пользоваться, все несчастны.   Отдельно «порадовало» знакомство с нативной разработкой под Мак. С одной стороны, я понимал, что в проприетарной системе не может быть счастья, но с другой, у Эппла же все такое красивое снаружи, может и внутри как-то неплохо? Конечно же НЕТ. Всю дорогу преследовали флешбеки из веб-разработки, которая ввела меня в депрессию в прошлый раз. Только тут еще хуже — вместо условного MDN и Caniuse, где квирки хоть как-то задокументированы, а буйство фантазии Хрома сдерживается конкуренцией, в Эппл экосистеме о хитрых поведениях и ручках не написано нигде и нужно тупо догадываться.  Но всем, типа, нормально. Так и живем.",58
"Когда тебе пять лет, ты воспринимаешь мир как данность, не ставишь ничего под сомнение и просто запоминаешь, как что работает. Тебя научили ходить в туалет самостоятельно, но в какой-то момент неизбежно случается страшное: заканчивается туалетная бумага. Ты паникуешь и бежишь к маме/папе, которые спокойно показывают тебе шкафчик в ванной, где лежат запасные рулоны. Ты запоминаешь этот факт, начинаешь пользоваться и живешь спокойно дальше.  В десять лет ты оказываешь в гостях, страшное случается снова, но знакомый рецепт уже не работает: либо бумаги нет в шкафчике, либо вообще нет того самого шкафчика на привычном месте. Твой кругозор невероятно расширяется, ты понимаешь, что у других людей мир бывает устроен и по-другому.  В пятнадцать лет ты уже живешь один, и когда заканчивается бумага, ты понимаешь, что знаешь каждый шкафчик в квартире и ни в одном из них бумага волшебным образом не материализуется. Ты идешь в магазин и покупаешь ее первый раз в жизни самостоятельно, что опять же, сильно расширяет твое понимание, как работает мир.  В двадцать пять ты уже взрослый, у тебя свои дети, работа, друзья, хобби, куча забот. Жена звонит, что закончилась бумага, ты хватаешь первую попавшуюся пачку в магазине, забегаешь домой на пять минут в перерыве между курсами французского и барквизом с друзьями, перехватываешь на кухне сосиску, суешь в первый попавшийся ящик купленные по дороге восемь рулонов бумаги и убегаешь дальше. В этот же день у сына случается ситуация, и мама показывает ему: смотри, как мир устроен, бумага всегда лежит вот тут.  Это пост про программирование, кто не понял.",59
"В контексте UI фреймворков один занимает особенное место в моем сердце. Это Swing. Мне всегда казалось, что в любой сложной вещи можно разобраться. Может быть долго, неудобно, энтерпрайзно, с багами, со странными дефолтами, но это все познаваемые вещи, неприятно, но познаваемые.  Swing это следующий уровень просветления. Познаваемость для него – non-goal. В нем все работает не так, как ожидаешь. Вещи выравниваются по фрактальным направляющим, вместо рядов и строк загадочные лайауты со сторонами света (!), дети встают процентов на 60-75 от доступного места, контролы слегка кривоваты, ресайзятся через раз, а программисты ходят ушибленные, шепчут «достаточно один раз понять gridbaglayout», затягиваются сигаретой и замолкают на двадцать минут. И это при том, что я пятнадцать лет вебом занимался, то есть по определению видел некоторое дерьмо.  Вот как можно было так напрограммировать, а?",60
"Основная идея ИДЕ и честного семантического анализа кода (а не быстрого синтаксического) в том, что оно понимает разницу между karas и karas(), что переменные indeks в двух соседних функциях это разные вещи, хоть и называются одинаково, и так далее. Как результат, надежнее работают рефакторинги, переименования, find usages, go to declaration и autocomplete. Собственно, на этом обещании и построена вся бизнес-модель.  В противовес такому сложному анализу появился когда-то анализ максимально простой: предлагать все подходящие слова из того же файла. Идея в том, что если ты пишешь какое-то слово, с высокой вероятностью оно в этом файле уже есть, а слишком уж похожих слов, ну, не так много. Популяризовал TextMate, потом это перешло в Sublime, далее и в Atom с VS Code. Казалось бы, полный колхоз и возврат в каменный век, но практика показала, что а) такой подход работает, и неплохо, гораздо лучше, чем может показаться, и б) иногда он работает лучше, чем семантический и умный.  Примеры, когда права ИДЕ, достаточно очевидны и приводить их я не буду. А вот когда побеждает простой текстовый матчинг по текущему файлу? А вот когда:  - Когда программа сломана / недописана / синтаксически некорректна. То есть в процессе написания. То есть ровно тогда, когда тебе эти подсказки больше всего нужны. - Когда нет поддержки конкретного языка или просто в сплошном тексте. - Когда имя размазано по программе, а не сконцентрировано в одной сущности. fun switch(style: SwitchStyle, colors: SwitchColors): Switch. Тут четыре упоминания корня switch, но для ИДЕ это просто четыре разные сущности, функция и три разных класса. Инструментов для работы с каждой по отдельности сколько угодно, а вместе — ноль. - Когда ты пытаешь сослаться на что-то в «неправильном» контексте. Например, объявить функцию с таким же именем, как переменная, или в println вставить (""soloma: "" + soloma). Переменная, понятно, найдется, а вот то, что внутри строки, для ИДЕ просто непрозрачный текст. - Когда что-то сломалось (что не такая уж редкость).  В целом ИДЕ делает ставку на лучший результат, но только когда дела обстоят хорошо. Легковесные редакторы ставят на среднего качества опыт через эвристику, зато работающую всегда и везде.  Так и живем.",61
"Лет десять назад я очень увлекся юзабилити и интерфейсами. Читал книжки взахлеб, советы Горбунова и Бирмана, презентации Головача, отвечал на UX StackExchange, даже подработал дизайнером интерфейса немного. Очень уж легко и естественно мне заходила эта тема, казалось, что ничего важнее быть не может, я даже подумывал о смене профессии.  И вот на одной конференции выступала Ольга Павлова, основательница компании, продающий как раз UX экспертизу, с каким-то докладом, проилюстрированном исключительно мемами. Кстати, тогда же я понял, что UX это не про красоту, не про оригинальность и не про хороший вкус, а про содержание.  После доклада я задал ей два вопроса: как, по ее мнению, измененился спрос на UI/UX? Ответ: вырос экспоненциально и не продолжает. И второй: как сильно, по ее мнению, влияет UI/UX на успех продукта? Ответ: процентов 10.  Короче, это меня тогда очень впечатлило и, хочется верить, вовремя повернуло мозги в нужную сторону. Потому что легко представить, что ничего важнее UX в продукте нет, и проигнорировать все остальные 90% факторов. Примерно как «клиент всегда прав» не может быть главным принципом для бизнеса.  Подтверждение неважности UX я вижу каждый день на каждом шагу. Сотни суперуспешных продуктов имеют отвратительный UX целиком или в деталях, и это совершенно никак не мешает им быть успешными. GTA Online загружается пять-семь минут? На бизнес не влияет. У Apple Music вместо интерфейса запутавшаяся рыболовная сеть, но музыку играет, идет предустановленным на телефоны, что еще надо? Patreon самая известная crowdfunding платформа, и там _ничего_ не сделано нормально, зато деньги надежно капают на счет. Про Амазон вы и сами представляете. Гугл-драйв. Медиум. Биг Сур. Букинг. Линкедин. Это все не просто «можно что-то улучшить», это целиком продукты, делавшиеся или без UX-эксперта, или намеренно во вред пользователю.  Увлекаться UX я не перестал, зато перестал думать, что обладаю самым главным знанием на свете. Скорее это такое гиковское увлечение, клуб по интересам, довольно изолированное от реального мира и никому кроме нердов не интересное. Но пока интересно — почему бы и нет?",62
"Давным-давно, в 2012 году, у Студии Артемия Лебедева была традиция публичных вакансий, примерно как домашки у Ильи Бирмана сейчас: делаешь задание, а потом арт-директор публично разбирает все присланные работы.  Я в одном таком поучаствовал. Нужно было сделать интерфейс для админки Бизнес-линча (еще одна древняя штука). И вот я напридумывал целую систему автоматизации производства: персональные теги, инбоксы, целый worflow статусов работ, коллаборативность. Все это тщательно продумал, красиво отрисовал и сел ждать вердикта.  Вердикт был: прохладно. Людвиг Быстроновский прошел по всем работам и задиссил их по одному простому принципу: можно ли листать заявки без кликов или нельзя. Почти ни у кого было нельзя 🙂 У меня, конечно, было много продвинутых функций, но не было базового удобства.  Так я усвоил важный принцип дизайна: простота. Никому не охота садиться за штурвал звездолета без необходимости, даже если за штурвалом ты будешь работать в полтора раза лучше. Любой интерфейс добавляет когнитивной нагрузки, а люди все занятые. Когда идешь заниматься сторонней задачей, хочется нагрузку на мозг снизить, даже ценой ухудшения производительности. Скажем, нет смысла учить шорткаты в тулзе, которой пользуешься десять минут раз в неделю.  Примеров вокруг полно. Мы все любим Гугл не потому, что с одним-единственным полем поиска легко найти то что нужно, а потому что не нужно думать о всяких-разных настройках. Даже если с доп. настройками мы искали бы точнее. Или какой-нибудь айфон времен расцвета Эппл (сейчас-то уже все мобильные ОС практически идентичны), который ничего не поддерживал и почти ничего не умел, зато то, что Эппл соизволила реализовать, просто работало. Мало и просто >>> много или удобно.  Другой способ думать об этом: у каждой фичи или настройки есть ее когнитивная стоимость. Если польза от фичи не превышает эту стоимость, добавлять ее не стоит. Итоговая сложность интерфейса должна быть соразмерна решаемой задаче, и да, даже ценой удобства.",63
"По интернету гуляет статья «Speed is the killer feature», которая, типа, как раз по мою душу. И там, конечно, все правильно написано, я и сам сто раз про это говорил.  Но фокус там на проблемах, которые вызывает latency, а я хочу поговорить о преимуществах, которые дает скорость. Так вот, в использовании цифровых продуктов (нет, речь не о молоке) есть некоторый порог скорости, после которого происходит качественный скачок в использовании.  Скажем, ты сидишь на митинге и тебе нужно что-то быстренько записать. Идею ты открывать явно не будешь, хоть там формально и есть текстовый редактор. Да что там, даже Notion для записи быстрой мысли, которая пришла в голову и через пятнадцать секунд уйдет, — оверкилл. А вот Саблайм запустится за полсекунды даже в холодную, ничего не спросит, и таким образом нет-нет да и превратится в «дефолтный» редактор для любых заметок, продолжение рук, которое не видно и про которое не помнишь.  То же самое с Телеграмом — я его запускаю раз сто на дню, чтобы быстро кому-то что-то скинуть, чтобы записать что-то, чтобы перекинуть файлы с компьютера на компьютер, чтобы поделиться мемом с женой за соседним столом. Слак же открываю с трудом, стратегически, раз, может быть, в день. Хотя и то, и то — мессенжер.  То же самое произошло с мобильными телефонами когда-то: их не нужно было «будить» (или, прости господи, «грузить»), поэтому выросло миллион новых вариантов использования по сравнению с компьютерами. Поиграть пять минут в метро, например, или прочитать пару страниц в очереди. Представляете такое с ноутбуком? И не только из-за форм-фактора, ноутбук тупо просыпаться дольше будет.  Так это обычно и происходит: если интерфейс не мешает, ты начинаешь делать вещи, которые раньше просто не делал, потому что, ну, неудобно было, и ты даже не замечал, что тебе это нужно.  Другая особенность, которая возникает, когда все работает мнгновенно: ты начинаешь комбинировать функции под свои сценарии. Если щелк-щелк-щелк работает мнгновенно, последовательность запоминается на мышечном уровне. А если в перерывах между кликами надо ждать компьютера, включается медленное сознание и привычка не вырабатывается. Поэтому, например, смотреть документацию в браузере такое мучение, а в каком-нибудь Dash, где все скачано локально — нет.  Так что писать быстрые программы нужно не потому, что пользователи не дожидаются и куда-то уходят. Нет, они очень терпеливы. Скорость нужна, чтобы вместо десяти вариантов использования, которые вы предусмотрели, пользователи открыли сто или тысячу, фантазировали, экспериментировали и приспосабливались. Это очень сложно делать в медленной программе, а вот быстрая к такому сама подталкивает.",64
"В далеком 2012-м году все сидели на Скайпе. Скайп никому особо не нравился, мне больше всех, поэтому я начал инициативу по переводу компании на Campfire. Ну да, Слака-то не было тогда еще. И Телеграма не было.  Собрали всю команду в одной комнате (тогда еще были офисы, помните?). Перспективы выглядели радужно. Все поддержали идею, кто горячо, кто умеренно, но все согласились, что мессенжер надо менять. Создали всем аккаунты и решили, что только в Campfire и будем переписываться.  Первый день все шло неплохо. На второй люди переспали, мозг перезагрузился, и нет-нет да и начали приходить случайные сообщения через скайп. Ну ничего, я напоминал людям, что они не туда пишут, мало ли — привычка, мы, как дебилы, переходили в соседний мессенжер, чтобы еще раз обсудить тот же вопрос. Через неделю в Кэмпфайр не писал уже никто, а я устал быть чуваком, который ходит и упрашивает всех переехать.  Ладно. Собрали второе совещание. Спрашиваю, мол, а чего все снова в Скайпе-то? Да хз. Что-то не нравится? Нет, все нравится. Может, кто-то передумал? Нет, никто не передумал. А чего все в Скайп пишут? Хз, само так получается.  В общем, я еще побегал, поуговаривал, попредлагал решений, но ничего не сработало. На третью неделю я перегорел, инициатива провалилась, а я на собственной шкуре оценил гравитационную мощь инерции, и насколько против нее не попрешь.  Через год уже другой сотрудник поднял тему переезда, я его конечно поддержал, но вписываться, наученный, уже не стал. И да, у него точно так же ничего не вышло. В следующей компании я наблюдал аналогичную попытку съехать с Flowdock, которая провалилась похожим образом. Да что там, у нас в JetBrains есть свой собственный чат в составе Space, и даже собственных сотрудников невозможно убедить им пользоваться. Не потому что плохой — нет, нормальный — но потому что инерция.  В этой истории у меня осталась только одна непонятная деталь: а как получилось у Слака? Что они такого особенного сделали, что смогли эту инерцию переломить? Не то чтобы у них какие-то уникальные функции были, или скорость, или простота (ох уж их система логинов!), или позиция на рынке. Что такого есть у них, что люди _хотят_, сами, добровольно, им пользоваться? И чего нет у их конкурентов? Понятно, что стадный инстинкт (где друзья, там и я), но каким чудом они набрали критическую массу?",65
"На словах почти все языки понимают важность глобально уникальных имен: у файловой системы может быть, например, Path, и у графической библиотеки может быть Path, но есть один нюанс^W^W^W никаких проблем не возникает: у тебя java.nio.file.Path, а у меня javafx.scene.shape.Path, не перепутаешь.  Почти никто, впрочем, не понимает, что эта уникальность должна сохраняться в пользовательском коде. Иначе начинаются всякие нелокальные эффекты: заимпортишь один пакет, а у тебя код ломается, потому что он уже использовал такой же класс из другого пакета. То, в чем комплятор только что прекрасно разбирался, внезапно становится китайской грамотой, и только из-за _добавления_ кода. Можно еще веселее: создать новый класс в своем пакете и сломать чужой, который import твой.пакет.* делал!  Читать тоже сложно: смотришь в коде, написано: “List”. Думаешь: а какой конкретно List? Чтобы узнать, надо идти наверх и смотреть на импорты. А если в импортах wildcard, то надо в каждый пакет идти и смотреть, не экспортит ли он случайно класс с таким именем. Так, собственно, и возникли IDE: язык так плохо сдизайнен, что без IDE не разберешься.  Решается проблема тривиально: fully qualified name надо писать в месте использования, а не в месте импорта, а импорты вообще запретить. Ну, может, алиасы оставить.  Один только язык подошел к делу правильно: Эрленг. Если я правильно помню, там как раз никаких импортов нет, а функции из другого пакета надо по полному имени вызывать.  Глобально уникальные имена вообще гениальная штука, она такая простая и при этом столько всего решает, что даже удивительно, как люди продолжают ее избегать и героически решать связанные с неоднозначностью проблемы.",66
"Интересно, как Unix когда-то был интерактивной средой, в которой люди буквально жили: хранили списки покупок, писали письма, читали интернет. Язык C в то время был просто подспоркой в обживании этой среды: быстренько заавтоматизировать что-то, упростить себе жизнь. Ну, я так себе это представляю, конечно, я пока не такой старый.  Артефакты тех времен — например, пользователи. Хоум дир, права доступа на каждый файл, группы — когда компьютеры были дорогими, а программисты дешевыми, приходилось общежительствовать.  Или локаль — штука, попавшая в стандарт языка C прямиком из соглашения операционной системы. То, как будут парситься флоаты в языке, зависит от того, как пользователь настроил свое окружение! Сейчас так уже не делают, конечно — языков в изобилии, а операционные системы не каждую декаду появляются. Этот пост вообще вдохновлен багом с локалью: недавно фиксил SVG парсер, который путал . и , на Линуксе, потому что там до сих пор теребят LC_ALL.  Сегодня это все милые штуки, бесконечно устаревшие, конечно, и ничего кроме головной боли уже не вызывают. Скорее бы сделали «серверный» линукс, в котором все это вычищено и оставлена самая суть.",67
"Посмотрел The Outsider по Кингу, с которым у меня очень долгое недопонимание.  Интересно, как человек, настолько подробно понимающий мелкие детали человеческих жизней (а Кинг весь про детали) может, но почему-то не хочет, сколь-нибудь долго про них писать. Каждый раз, начав за здравие, все равно скатывается в свехестественную дичь, растеряв и все свои сильные стороны по пути, и весь интерес к происходящему.  У меня, конечно, есть теория. Что если Кинга в детстве что-то очень сильно, по-настоящему напугало, настолько, что до сих пор не отпускает? И он продолжает писать книжки, чтобы как-то этот страх успокоить, сталкивая в книгах зло с рациональным, будничным, реалистичным, то, что его окружает каждый день, и давая силам добра победить скукой и занудством. Ну, хотя бы в книге.",68
"Одну вещь заметил в интернете — встраивать видео умеет только Ютуб. Все остальные доморощенные плееры и даже нативный тег <video> всегда работают через раз. Кривоватенько, косоватенько, что-нибудь нет-нет да отвалится, качество шакальное включит, буферизация неожиданная выскочит, в фуллскрин не перейдет, перейдет, но не развернется, контролы не покажет, или покажет, но не уберет.  Что печально, потому что Ютуб, как и все гугловое, я не очень люблю. Но надо признать, что они через всю эту хтонь бог знает каким количеством человеко-веков прошли таки до конца и победили, а остальные такими ресурсами не располагают.  Короче, сложная проблема компьютер сайнс.",69
"Супер-полезная фича, которую я видел только в Эрленге — тотальный порядок на всех значениях, даже разных типов. Можно спокойно сравнивать числа и строки, словари и були, атомы и функции. Физического смысла это не несет, и не очень важно, больше ли true чем 'a' или меньше. Важно, что это как-то решено и глобально согласовано для всех значений.  Удобно это, в основном, чтобы значения разных типов хранить в сортированном контейнере и делать бинарный поиск, например. Да, странно, нечасто нужно, но иногда удобно — а почему бы и нет?  В остальных языках разные типы обычно вообще несравнимы, а одинаковые просто нарушают контракт линейного порядка. NaN < 1 || NaN > 1 || NaN === 1 => false, NaN != NaN  — честно, конечно, теоретически чисто, но непрактично. Ну вот кому хорошо от того, что попавший в сет NaN ломает тебе все инварианты? Или отдельная история про то, что ==`/`=== работает отдельно от <`/`>, что только путает карты:   a = function() { return 1; } b = function() { return 1; } a > b => false a < b => false a <= b => true a >= b => true a == b => false   Будь как Эрленг, короче. Сравнивай яблоки с огурцами.",70
"Сначала антагонисты в кино были плоские и злодействовали просто из-за злодейства. Зритель поумнел, и им придумали мотивацию, потом характеры, потом и положительные черты. Закончилось все это моральным релятивизмом — «мир не делится на черное и белое», «у каждого своя правда», «встань на его место».  Что идея довольно плохая, потому что у некоторых вещей есть вполне четкие границы, которые не надо размывать. Можно, конечно, сколько угодно упражняться в толерантности и safe speech, только их цель не в том, чтобы назвать черное белым. Хотя механика и похожа.  Самый отвратительный пример такой тенденции — фильм «Бог простит» Рёфна, но там, кажется, режиссер просто довыебывался и это просто хуевый фильм.  А вот из популярного посмотренный вчера мульт «Райя и последний дракон». Дальше будут общие спойлеры к сюжету, но это шаблонный детский диснеевский мультик, так что вы сами можете представить, что там происходит.  Так вот, в конце фильма главная антогонистка, которая до этого: предала героиню, убила ее отца, разрушила мир, преследовала и еще два раза пыталась убить героиню после этого, застрелила ее дракона у нее на глазах из арбалета, перед финальным столкновением произносит: «Да, я сделала все эти вещи, но и ты хороша: ты мне не доверяешь. Поэтому ты виновата во всем произошедшем настолько же сильно, насколько и я».  Как говорится, под аккомпанемент множественных фейспалмов, занавес. Оверкомпенсировали немножко.",71
"У Пелевина в «Тайных видах на гору Фудзи» была интересная мысль, что наука не особо что-то там позволяет понять и вообще не вносит никакой окончательной ясности.  С одной стороны вроде бы как же так, что вообще может быть честнее и незыблемее науки? Знание не одежда, которая меняется каждый сезон. А с другой:  <<<<<<<  — Вот, например, люди раньше верили, что Земля плоская. А Солнце над ней летает. Но теперь мы точно знаем, что Земля вращается вокруг Солнца. Разве это знание когда-нибудь выкинут в мусор?»  — Уже выкинули, — ухмыльнулась Кларисса. — Ты просто не следишь за темой. Большинство известных физиков сегодня верит, что мир и мы сами — это нечто вроде компьютерной симуляции. А применительно к ней бессмысленно говорить, что одна её часть вращается вокруг другой, потому что в симуляциях бывают лишь расчётные коды.  >>>>>>>  Оказалось что и в науке вроде бы только-только в чем-то разобрались, как бум, тренд меняется и все по новой.  Причем это именно что тренд, что вижу, то и пою: придумали и осознали математику и вдруг вжух — весь мир объяснился математикой. Придумали теорию множеств и внезапно все, даже математика, теперь есть множество. Изобрели компьютеры, поняли что это такое и как работает и вот уже мы все живем в симуляции.  Пока компьютеров не было, никто не понимал, о чем вообще речь, и такое объяснение в голову никому, конечно, не приходило — слов таких не было, мыслительных трафаретов в голове.  Про симуляцию, кстати (из «iPhuck 10»):  <<<<<<<  [Взять хотя бы] ...актера и гей-икону Киану Ривза – особенно того периода, когда он еще не мочил из двух стволов русскую мафию (зигмунд, молчать), а подрабатывал Буддой.  «Пацаны, мы в Матрице!!!»  Кто в молодости не шептал этих слов? Только тот, у кого нет ни ума, ни сердца.   >>>>>>>  Что дальше? Не знаю, просимулируют мозг, наверное, и окажется, что вся вселенная тоже в каком-то смысле мозг и разумна. И думает о котиках.",72
"Проблема: важный и неважный код выглядят абсолютно одинаково.  Например, пришли тебе в функцию данные, ты пять строчек провеяешь значения на null, какой-то список в цикле заполяешь. Потом наконец дергаешь одну-единственную, но ключевую сука функцию, и потом еще десять строк ловишь всякие исключения и обрабатываешь результат. И вот эта функция в середине — может быть, основа всего твоего бизнеса, или какая-то важная библиотека, на которой все держится. В ней происходит самое важное, а то что вокруг — ну, необходимость, но скучные мелкие детали, которые могут быть какими угодно. Но выглядит ключевая функция как одна самая обычная строчка среди двух сотен точно таких же строк обвеса.  Вопрос, собственно, в том, можно ли что-то с этим сделать. Ответов не обещаю, но зато можно посмотреть, как происходят рассуждения у меня в голове.  Первое соображение такое, что важные детали люди особо нигде и не выделяют. В книгах ключевые моменты не подчеркнуты. На чертежах важные детали нарисованы тем же карандашом, что и проходные. Может оно и не надо? (Надо).  Второе. Выделение важного и неважного немного другая когнитивная деятельность, чем программирование. Оно ближе скорее к коммуникационному дизайну, а этим владеют не все и учиться хотят тоже не все. Тот же literate programming провалился не потому, что это плохая идея, а потому, что программисты не хотят кому-то что-то объяснять. Как говорится, не для того я десять лет аутировал, чтобы теперь с людьми общаться.  Третье — rich text (если мы таки сведем проблему именно к rich text, допустим, важные места можно будет выделить **болдом**) в руках неопытного человека страшное оружие. Потому что возможностей много, а напрявляющих мало — делай что хочешь. Дизайнер/верстальщик может и в Ворде сделать красивую страницу, а рядовой человек — максимум объявление в подъезде. Или цветовую схему, в которой раскрашено каждое слово.  Четвертое — диаграммы. Про диаграммы вот какие наблюдения: они страшно полезны, как только проблема перестает помещаться в голове. Многие вещи в разы проще объясняются наглядно, чем текстом. Смотришь — бах, все понял.  Но диаграммы даже лучше: с ними можно работать! То есть задавать вопросы и получать ответы, искать проблемы, менять со временем. Диаграммами наполнены любые доклады и статьи, что только доказывает, что кодом хрен что объяснишь, а диаграммой — запросто.  Вопрос, собственно, почему никто не пишет код в диаграммах?  Понятно, что диаграмма отдельно от кода не будет работать, как и любая документация — устареет, соврет. Верить можно только тому, что буквально запускается. Типам можно верить, диаграмме — нет. Да, можно стараться и поддерживать, но любая система, рассчитанная на старание участников, обречена на провал.  Видел ли я UML? Видел. Он тоже был сбоку, сопровождал код, а не являлся им. Ну и та же проблема, что и наша исходная: важный класс не отличается никак от неважного, ключевое взаимодействие — от утилитарного.  Другая проблема — диаграммы, может быть, как раз такие полезные только потому, что могут врать. Или передавать только часть правды, удобную в конкретный момент. Скажем, квадратики-слои выглядят красиво на layered architecture, но в коде на самом деле там хтонь, адище и pasta dall'Italia. Хотя намерения именно такие как на диаграмме. В этом смысле передать намерение важнее, чем правду.  Наконец, не я первый мечтаю о графическом программировании. Все эти квадраты, соединенные линиями, по которым текут данные. Что там из последнего, Luna? Почему она никому не нужна? Что с ней принципиально не так?  Я правда не знаю, и правда хочу честный ответ: все плюсы понятны, на словах звучит фантастически, а на деле каждая такая система неизбежно проваливается. Почему? Слишком низкий уровень блоков? Не масштабируется на большую программу? Все слишком быстро запутывается в клубок? Нельзя писать настоящие программы? Инерция не дает слезсть с C++?",73
"Тут пару недель назад гулял смешной заголовок из прессы, типа «Что такое Ethernet и как с его помощью разогнать WiFi?»  По сути заголовка могу только одно сказать: играть по SteamLink через Ethernet приятно, а по WiFi, даже если ты один-единственный потребитель 5GHz в доме — нет.  А дальше пойдут прохладные истории из юности. Году так в 2005 я прекрасно помню, как я, молодой студент пятого курса, съехавший уже жить в однушку, позвал к себе друга, он пришел, увидел у меня ноут и первым делом спросил: о, а шнур где? Имелся в виду как раз Ethernet. Так что WiFi был вокруг далеко не всегда.  Виндовые ноуты, кстати, тоже были сморщенным фруктом: очень хорошо помню, что они упорно отказывались засыпать. То есть закрываешь крышку, и с какой-то вероятностью он заснет, а с какой-то — нет. Будет шуршать вентиляторами (ну как шуршать. ШУРШАТЬ). И даже экран мог не выключиться в закрытом положении. Тогда-то я понял, что софт это только 50%, железо — другие 50%, и еще 50% — их плотная интеграция. Когда я (много позже, году в 2012 уже) купил MacBook Pro и на него не нужно было ставить никаких драйверов на звуковуху, трекпад и вебкамеру, они работали сразу после первого же включения — это был “aha!” момент. Так что, можно было? Почему все так не делают?  Теоретически, я должен помнить и время до гугла (в 1997-1998 интернет у нас дома точно уже был, модем, да), но каких-то особенно ярких моментов у меня в связи с этим не было. Ну нет гугла, но мы и не знали, что он нужен. Помню зато программы-загрузчики, это где ты ставишь файл с каким-нибудь патчем для Unreal на 20 Мб и он несколько часов качается. Можно было прям на весь экран открыть прогресс и оно там каждый килобайт отдельным кружочком показывало. Могло в несколько потоков качать разные куски параллельно, и докачивать. Технологии!  Еще помню, как в году в 2005 мне нужно было встретиться к одним аспирантом в институте. Я ему пишу (в Аське, наверное? Хз), мол, дай мобильный. А он мне — да просто в такой-то кабинет подходи. Оказалось, у него еще мобильника не было, как-то он в мобильную революцию не верил. Но видели бы вы тогдашние PDA, тоже бы не поверили. А сейчас вон как все обернулось.",74
"Вчера Расмус Андерссон, который шрифт Inter, открыл Иллюстратор после многомесячного перерыва и офигел от того, как он таким тормозным и неудобным говном пятнадцать лет перед этим пользовался, да еще нахваливал.  Что иллюстрирует следующий поинт: людям в целом довольно сложно объяснить проблемы существующих инструментов, не предъявив альтернативы. А когда появилась альтернатива, то они сами с трудом могут понять, как сидели на том, что было раньше, и не жаловались.  Люди вообще с трудом могут в уме представить выдуманный продукт. Поэтому так сложно объяснять новые идеи и так легко взывать к аналогиям. Так сложно продвигать новое и так легко топтаться на месте.  У меня же другая проблема — я представляю недостатки слишком хорошо. Как-то я настолько нафантазировался, как должен выглядеть нормальный git-клиент, что потом несколько дней сидел в Source Tree и не понимал, чего он так испортился (Source Tree, понятно, никак не изменился).  В it вместо примера Иллюстратора можно взять цепочку CVS -> SVN -> Git. Если помните, как переходили, то может быть ловили это ощущение, когда через месяц уже трудно было представить, как же жили до этого.  А вот что представить сложно даже сейчас: что Git это не конец цепочки, и когда мир наконец с него слезет, все будут только удивленно пожимать плечами на его странности.",75
"У меня есть идея на миллион, которую я только вам расскажу, а вы пожалуйста дальше не распространяйте, а то украдут.  Итак, идея: маркдаун с картинками.  Маркдаун вообще идеальный формат и лучшее, что случалось с компьютерами. Он нащупал идеальный баланс: достаточно тупой и ограниченный, чтобы не отвлекаться на оформление вместо содержания, но с ровно тем минимумом фич, которые на самом деле нужны.  Так вот, единственное, чего в нем жутко не хватает — картинок. Потому что многие вещи без картинок вообще не объяснишь, а многие другие удобно тащить к себе как раз картинками.  Причем сделаны они должны быть максимально тупо, в духе маркдауна. Картинка — отдельный блок, никаких настроек, выравниваний, размеров; нет. Как есть, так и встанет между абзацами текста. Все. То, как картинки сделаны в Medium или Notion, уже слишком сложно.  Да, я знаю про ссылки, но как только появляются ссылки, сразу становится скучно. Во-первых, мне нужно самому как-то заниматься организацией картинок, хранить их где-то, сохранять, во-вторых, вставлять их через абсолютно ненужные и ничего не значащие названия файлов, и в-третьих, они не показываются в тексте. Буквы же я вижу сразу? Вот и картинки хочу видеть сразу. Они такая же неотъемлемая часть заметки, как и текст.  Понятно, что там все сразу становится сложно, потому что из простого текстового файла все превращается в какую-то папку, формат, который надо изобрести, всем впарить, и чтобы было просто, и удобно, короче, сложно. Плюс редактирование усложняется — как выделять и копировать текст мы более-менее договорились, а вот текст с картинками это всегда какая-то специальная олимпиада, причем индивидуальный зачет (у всех по-разному то есть).  И я подозреваю, что картинок нет в мардауне как раз потому, что он делался по принципу «что легко сделать», а не «что больше всего нужно». Совпадение оказалось на 90%, последние 10% — как раз картинки.",76
"В Твиттере кто-то опять спорит, надо ли возвращать из HTTP статус 400 на ошибку или лучше вернуть 200 а ошибку засунуть внутрь полем error. Самые тонко чувствующие сомелье, понятно рекомендуют возвращать 200 в одних случаях и 400 в других в зависимости от характера ошибки.  А у меня на этот счет есть прохладная история. Ровно 10 лет назад в одной печально известной новосибирской конторе я убеждал коллегу, который придумал закодировать в URL-параметрах API вообще все: тип объекта, айдишники, глаголы. А я спорил, что это «неправильно», что это не по REST-у, что надо PUT /obj/123, а не GET ?action=update&id=123&type=obj. Он тогда спросил «почему», я воззвал к авторитету, но — и я очень хорошо запомнил это чувство, до сих пор помню — в глубине души сам удивился: а «почему», собственно? И понял, что рационального ответа на это нет.  С тех пор розовые очки спали, манифесты движения REST забылись, и стало понятно настоящее его место и ценность в мире. REST — это идеология. Культ. Это не решение инженерной проблемы. Это не более выдающийся способ что-то делать ни по каким параметрам. Это просто гладко постеленные красивые слова, вкусовщина, один из возможных вариантов. Хочешь — используй. Хочешь — не используй, делай по-своему. Не изменится ровным счетом ничего.  Естественно, когда нет настоящих, рациональных аргументов, то и споры возникают самые яростные. Что мы и наблюдаем на практике.",77
"И еще один пост по мотивам твиттер-дискуссий. Знакомый ermouth пишет:  > Экзерсисы с HTML под соусом «А если у юзера отключен JS?» примерно сродни конструированию, например, стиральной машины на угле потому что «а если у юзера нет электричества в розетке?». Нет ножек – нет варенья, блин.  Я с мыслью очень согласен, но хочу немного ее дополнить. Движение за «а будет ли сайт работать без JS» полезно не потому, что у кого-то может быть отключен JS. Отключен и отключен; тут или компания, или пользователь обнимутся и пойдут на хер, в зависимости от того, кто кому больше нужен (как правило — никто никому, так что это взаимовыгодное сотрудничество).  «Работать без JS» не решает никакую реальную проблему, но решает психологическую. Дело в том, что IT-компании, особенно большие, особенно с миллионом отделов, любят писать код, но не любят удалять или чистить его. Это все продолжается, пока сайт не рухнет под собственным весом, ну или не станет настолько комично тяжеловесным, что даже в твиттере над ним издеваться перестанут.  Ну и «работать без JS» это как бы такой челленж, сила, которая тащит в обратную сторону. Как инженерный аргумент абсолютно невалидный, но почему-то действующий на умы фронтендеров. Добровольно они бы никогда не отказались рендерить весь вообще возможный UI на клиенте через полчаса после того, как скачаются все JSON-ы.  А тут им говоришь: хэй, да у вас без JS работать же не будет! И они идут и делают сервер-сайд. Мешало им что-то его сделать без этого аргумента? Ничего абсолютно не мешало. Однако, почему-то не делают. Остается только порадоваться, потому что пользователь в плюсе.  Из этой же серии позитивный эффект от AMP. Мешало ли что-то газетам делать быстрые сайты, которые грузятся за долю секунды? Не мешало, однако не делали. А вот когда Гугл дал им такую возможность (AMP не предлагает ничего нового, но ограничивает старое), внезапно взяли и смогли. Но это единственнй его положительный эффект, конечно, так-то он рак и чума, а Гугл совсем борзеет.",78
"Ютуб подсунул ролик The Beauty Of Lawrence Of Arabia. Для тех кто не знает, это фильм 1962 года, лучше всего который характеризует одна фраза: зрелище. Не драма, не приключения, не биография, не история, не война, но — зрелище.  И знаете что? Прямо сейчас, в 2021 году, он все еще выглядит зрелищнее, чем любой фильм за последние 10 лет. Любой вообще. Даже самый дорогой. Потому что настоящий.  Парадокс: мы научились снимать гораздо лучше и рисовать гораздо больше, но начали экономить. Ехать ставить весь фильм на натуру экономически невыгодно, ведь можно нарисовать или обмануть зрителя, а зачем тратить больше, если можно тратить меньше?  К сожалению, результат не идентичный. Есть разница между Египтом, нарисованном на компьютере, Египтом, снятом в Испании, и Египтом, снятом в Египте. Как бы хороши ни были компьютеры (а они не очень хороши, да, все еще), ощущение настоящести они не передают — просто потому что настоящесть это миллион разных сложно взаимосвязанных деталей, включая, не знаю, мух в кадре, места, куда тебе удобно поставить камеру, массовку, которую удобно набрать, загар на этой массовке, не максимальную живописность некоторых мест, не самый оптимальный ракурс до пирамид из любой точки.  Короче, при съемках на натуре против чьей угодно воли и планов вылезает куча мелочей и деталей, в которых ты — зритель — узнаешь немножно больше настоящего про конкретное место, а не погружаешься внутрь головы художника с его, скажем честно, весьма поверхностным познанием фактуры и пузырем самых расхожих стереотипов. Компьютерные эффекты для Египта же тоже не египтяне рисуют, а американцы, которым флешку с референс фотками сбросили и додумывай как хочешь.  И в результате какая-нибудь Смерть на Ниле 1978-го года тривиально, абсолютно не напрягаясь, передает ощущение поездки в Африку, а Смерть на Ниле 2022-го вызывает зевоту и жалость за людей, проведших существенную часть своей жизни в темных комнатах с зеленым фоном (в случае актеров) или подвале с рендер фермами (в случае со специалистами по спецэффетникам).  Ну а интересный вывод тут такой: прогресс сделал кино доступнее, но забрал у нас правду жизни, причем не только с среднем сегменте, а даже в самых дорогих блокбастерах. Особенно в дорогих блокбастерах.  Ну ладно, скоро все равно все подключимся к Матрице и будем сидеть в своих виртуальных реальностях, нарисованных молодыми людьми без аллергии к переработкам. Ох.",79
"Немного о моем опыте собеседований. Он обычно остается за закрытыми дверьми, а это вот такая моя попытка их слегка приоткрыть. Это карьера примерно за 15 лет.  Первую работу я нашел курсе где-то на 4-м, то есть допустим в 2005. Тупо в общаге на вахте увидел объявление, что ищут программистов, и пошел. На собеседовании особенно не мучали, видимо, того, что я учусь на факультете информационных технологий, было достаточно. Когда спросили, какой у меня опыт в программирования, я сказал, что вот, написал игру. Меня спросили: а зачем?  В следующую компанию меня уже позвал друг, по знакомству. Они делали каталог софта, то есть буквально сайт, где можно скачивать программы. Видимо, программисты того времени фокусировались на продукте, а не на маркетинге. Примечательна эта контора (ну как контора — три человека) была тем, что располагалась на руинах другой, гораздо более могущественной компании, распавшейся за пару лет до этого, во время доткома. То есть гигантские офисы, куча оборудования, пустые комнаты и кучка странных людей, копошащихся в остатках. После этого мне никакие пост-апокалипсисы не страшны, я уже все видел.  Потом я наконец нашел что-то, что можно считать нормальной работой. Туда меня взял лектор и научрук, который тупо собрал трех топ перформинг студентов со всего потока и сказал: хотите у меня работать? Мы хотели.  Потом собеседовался в Xored, там руководитель буквально угорал над тем, что я делал на текущем рабочем месте, считая это «ненастоящим программированием». В какой-то момент он вообще расстегнул штаны и попытался продемонстрировать, что его писька длиннее, чем у всех собравшихся в комнате. Ладно, может это я уже допридумывал. В Xored я в итоге попал, но в другой раз.  Потом была даже не контора, а айти-отдел при Новосибирскэнергосбыте, главный бонус которой был в том, что она была в пешей доступности от моего дома. Собеседование не помню, помню, что мне предложили мало денег, но пообещали прибавку через полгода. Через полгода я пришел с вопросом, типа, где? А чувак, который мне ее обещал, сказал: ой, сорян, я больше за это не отвечаю. Красиво, чё.  Кстати, именно во время работы там я написал первый популярный пост о бессмысленности энтерпрайзного программирования, архитектурной астронавтике, карго-культах и клоунадах на митинге. Когда увольнялся, пообещал себе никогда больше не работать на Java, что бы ни случилось.  Потом очень хорошая попалась контора, Echo. Туда я сначала честно сделал тестовое задание, а потом про это узнал Лев Валкин и извинился, потому что «он бы меня и так взял, очевидно». Это уже слава блога в ЖЖ работала. Опен-сорса еще не было.  В MachineZone никого не собеседовали, Лев нас просто всех порекомендовал. Так что я попал считай нахаляву, зато это единственное место, из которого меня уволили. Но я и сам хотел уйти, не прижился я там.  Дальше я поставил себе задачу найти работу на Clojure. Это было стрессово, потому что я сидел без денег и без работы (зато нахерачил опен-сорса, как раз в это время). Тут был максимальный процент фейлов.  Пособеседовался в CircleCI (USA), но мне сказали, не охуел ли я столько денег просить (сейчас нашел в почте, там фигурировала цифра $70/h, НИФИГА СЕБЕ). Точнее, они сначала ее предложили, а потом написали письмо, что подумали и решили не расширять команду.  В JUXT (UK) мне сказали, что даже $60/h многовато, короче, тоже отбрили. Собеседования не было, т.к. директор знал про DataScript.  На самом деле, это я пытался тему «контрактной»/консалтинг работы задвинуть, а не фулл-тайма, поэтому задирал цифры в 2 раза. Очевидно, я тогда не очень понимал, как это должно работать. Да и сейчас не понимаю.  В Cognitect, почему-то, не писал.  Писал основателю doo (Германия, был такой document app на Clojure). Он мне сказал, что губу с €60,000/year я раскатал, у них максимум €45-48k/year (это все 2014 год).  Часть 1/2, продолжение см. ниже ↓",80
"Часть 2/2, начало ↑  На волне отчаяния зарегался в TopTal. Сделал тестовое приложение с формочками, выложился на 110%, в итоге на собеседовании (это не в сам TopTal, а чтобы стать соискателем на их платформе) код не посмотрели, а функционал глянули очень бегло. Типа, открывается в браузере? Отлично. Потом оказалось, что в Топтале нет работы на Clojure или хотя бы React (который я более-менее знал), зато много на Angular. Чуть не начал учить его от отчаяния, но отвращение пересилило.  Съездил в Гугл в Цюрихе, где из 5 собеседований за день я очень хорошо прошел распределенные системы, но завалил синтаксис Java. За что был послан на хер. Это не преувеличение и не метафора, это реальный фидбек (про синтаксис Java, в смысле, а не про нахер). Зато отель был хороший.  В итоге меня взяли в Cognician (ЮАР), тоже без собеседования, на славе от DataScript. С гораздо более скромным рейтом в $30/h. Что уже кажется более адекватным, и с тех пор я недалеко ушел. Тут я счастливо проработал 3 года, пока не выгорел.  После Cognician был еще Fibery, еще одна очень душевная команда, где можно работать только ради атмосферы. Собеседования не было, сработал, как горовят сейчас, личный бренд.  Потом были попытки в Гугл и в Фейсбук, такие же безуспешные. Про них есть пост «How NOT to hire a software engineer». Я себя, конечно, утешаю, что overqualified, но правда в том, что я, возможно, такой себе программист: бегал по маленьким местечковым конторам, big data не нюхал, думаю больше чем делаю, программирую медленно, страдаю перфекционизмом, конфликтный. В UI хорошо понимаю, но это как раз противопоказано что для Гугла, что для Фейсбука.  Меня нашел основатель Wunderlist, ни много не мало после поста на Grumpy.Website! На звонке я ему сказал, что у меня куча идей о том, как улучшить презентации (они делали новый PowerPoint), а он немножко офигел и спросил, умею ли я «просто делать что скажут». Хвастался, что  вместо джунов решили набирать матерых сеньоров и платить им серьезные деньги. Топ сеньор у них котировался в €60,000/year. Это был 2018-ый.  Тут, кстати, личный бренд не сработал, хоть они и писали на ClojureScript. Пришлось съездить в Берлин и пройти полноценное собеседование, с рассказом о себе и задачками. Что именно не срослось, я до сих пор не знаю: они написали, что «решили пока не нанимать на эту вакансию», не дали фидбека, зато тут же выложили на сайт еще несколько открытых вакансий 🙂  Подвернулся хороший вариант, CTO в стартап в Кэмбридже! Знакомый порекомендовал меня им, их мне, в итоге, опять же, никакого собеседования и потенциально самая высокая должность в карьере. Но я тогда крепко сидел в депрессии, они ждать не могли, пришлось со слезами на глазах отказаться. Кстати, это был единственный раз, когда я попытался хоть немножечко торговаться и выпросил вместо £55,000 аж £95,000 (в два раза!). Хорошие были бы деньги.  Наконец, последнее собеседование было в JetBrains. Тут я тоже скорее по знакомству и былым заслугам попал, но внезапно на интро звонке начали давать задачки, что застало врасплох. Не надо так. Еще оказалось, что незнакомый чувак, который при этом присутствовал — ни много не мало CEO всего JetBrains, что я узнал уже сильно позже. Ну с тех пор я его вроде запомнил, на звонках узнаю, на улице — не знаю. На тот момент моя главная цель была переехать в Германию, так что с зарплатой поступил просто: спросил пару друзей, сколько они там в Германии получают, и попросил столько же.  Если подвести итоги, то:  - блог и конференции помогают находить работу, - опен-сорс, если он заметный, тоже помогает,  - заметный опен-сорс легче всего делать в маленьких сообществах, - искать работу на Clojure сложно, - от собеседований не застрахован никто, - зарплаты для меня до сих пор загадка, - где искать высокие должности и как стать CTO я хз, - как устраиваться контрактором я тоже хз.  Писать старался максимально честно, выводы делайте сами, надеюсь кому-то это хоть как-то поможет.",81
"Восход Электрона обозначил усталость людей от браузера и желание иметь хоть какую-то интеграцию с ОС: нормальный cmd+tab, иконку, нотификации, доступ к файлам.  Я же заметил у себя обратный тренд: чем дальше, тем охотнее я переезжаю на браузерные версии. Слак, почта, рабочий Space, Workflowy — у всего этого есть приложения, но я предпочитаю таб в браузере.  Причина очень простая: когда они закрыты, про них сильно легче забыть. Самое лучшее чувство в жизни — когда Слак или почту забываешь проверить несколько дней подряд. Ну и оперативная память говорит спасибо, конечно.  Вот бы еще с Твиттером так научиться.  P.S. Слак отвратительно себя ведет в браузере: все работает, но он специально делает свое использование максимально неудобным. Не будь как Слак. Shame!",82
"Решил я значит вчера тестовые задания студентов пооценивать. Винду быстро прошел, дай думаю, Линукс теперь посмотрю. Нет, это не пост хейта про Линукс.  Так вот, чтобы посмотреть Линукс, надо в него загрузиться. Окей. Чтобы загрузиться, надо нажать F11 в BIOS-е. А у меня ведь клавиатура — сам паял, и что-то так вышло, что там только до F10 кнопки назначены. Раньше «эфок» вообще не было, но как в JetBrains устроился, пришлось добавить — у них, кажется, последнее приложение в мире, которое на них рассчитывает. Так что первые десять сделал, а про F11 не догадался.  Окей, чтобы добавить кнопку, надо перепрошить клавиатуру. Слава богу, что все уже настроено — я же уже много раз ее перепрошивал. Гружусь, значит, в Мак «Просрали без Джобса все полимеры» ОС, жму qmk, а она крылышками бяк-бяк: не хочу, говорит, работать. Обнови меня, мил человек, говорит. И что-то там про новый питон. Работало же? Может я питон обновил? Не помню.  Ну слава богу, что есть brew, и он все за тебя сделает. Пишу, значит, brew update qmk, а он мне такой: дурак что ли? Update не для тебя делали, пиши, говорит, upgrade, а не update. Ну пишу brew upgrade qmk. Не, говорит. Все равно не то что-то. А еще у вас клон не shallow и спина белая, говорит. Напиши, говорит, команду, что-то там про shallow clone, и сама же показывает, какую. Почему бы молча не запустить, раз ей так надо — да хрен его знает. Это все сопровождается паузами в 1-5-15 минут, потому что brew выкачивает пол-интернета постоянно, даже если просто удаляет пакеты.  Окей. Пойдем с козырей. Пишу brew remove qmk && brew install qmk/qmk/qmk (да, такое вот название. Хорошо что я сам для себя в прошлый раз записал, какие команды запускать, если что — очень удобно, спасибо мне). Ну норм, говорит. Удалила. Думает. Думает. Думает. Печатает — очень много печатает. Пол-экрана зеленым, другая половина красным. Как это понимать? И текст такой, мол, поставила, НО. И в «НО» такие «НО», что ты даже не рад уже, что ввязался. Если вдуматься, то там получается, что у тебя дела лучше были до того, как ты решил программу поставить, чем с установленной программой, но такими «НО». Mixed message, короче. А, и поставь, говорит, xcode tools.  Ставлю xcode tools. Это еще полчаса, со всякими песнями, плясками и прочим графическим энтертейнментом. Поставился. Ставлю qmk. Поставился. Запускаю. Не, говорит. Что-то-что-то, не могу откуда-то куда-то что-то там заимпортировать. И бряк на спину, лапки кверху. Сдохла, типа.  Гуглю ошибку. Просто потому что просто так разобраться нереально — что куда поставилось, что откуда вызывается, это же не просто папка с исходниками, это _программный комплекс_, размазанный по файловой системе равномерно. Нахожу ее на bountysource. Открытой. Ноль фиксов. Финиш.  Короче, я опять проиграл. QMK официально не работает. Как прошлые версии ставить в этом вашем brew — я так и не понял. Линукс не запустил, прошивку не прошил. Компьютеры-я 1:0.  В программировании это называется yak shaving, или бритье яка. Смысл такой, что ты решил перекрасить кнопку в зеленый, но не хватило чего-то, ты пошел фиксить это, а оно еще на что-то завязано, и вот ты сам не заметил, как по цепочке оказался в горах и бреешь яка. Как, почему, что может быть абсурднее? Ну вот, а мы, программисты, регулярно в еще более странных ситуациях себя обнаруживаем.  Поэтому же, кстати, оценивать программные проекты не получается — цепочки сломанных зависимостей и абсудрных краевых случаев разворачиваются как фракталы, и никакой здравый смысл не поможет их ни предвидеть, ни обойти. Кто из нас не чинил компилятор в процессе написания веб-приложения?  И так всегда. В ста процентах, блин, случаев. Так что единственный способ выживать в айти — убедить себя, что тебе это нравится. И относиться к происходящему с юмором (бьет кулаком в экран, разбивает клавиатуру об край стола, плачет).",83
"Коллега еще по ЖЖ Олександр Никитин сокрушается, что год назад придумал концепцию быстрого Roam Research-а, прошел год, Roam за это время подтянул сопли и ускорился, а его идея так и осталась идеей. И задается вопросом: почему?  Я, как человек, от которого по мнению сторонних наблюдателей исходит аура «много делающего и откуда-то берущего время», хочу поделиться, как с этим дела у меня.  Во-первых, я нихуя не делаю. То есть я ровно в таком же состоянии пребываю: придумываю идею, сижу довольный, через полгода смиряюсь, что никогда ее не сделаю. Иногда пишу пост, чтобы отпустило. Иногда логотипчик рисую. Чаще всего даже строчки кода не пишу. Мастер спорта по не-ворочанью мешков.  Во-вторых, те проекты, которые я хоть как-то сделал, произошли в момент между работами. То есть писать что-то по вечерам и субботам — страшный обман, в первую очередь себя, и мне очень много времени понадобилось, чтобы за это бездействие перестать себя ругать. Если хочешь что-то делать, делай фулл-тайм, а после работы и по субботам нифига сил не остается. И это нормально.  В-третьих, проекты, блин, делать количественно трудно – надо много писать. Особенно веб-сервисы. Это одна из причин, почему все мои проекты самодостаточны — это или библиотеки, или шрифты, которые скачал себе и все, что вы там дальше с ним делаете, меня не касается. Я даже лендинги не делаю, чтобы их не хостить — гитхаб с этим отлично справляется. Да что там, у меня даже блог на гитхабе. Программист без сапог.  Пара идей, натурально, отвалилась только потому, что надо было делать поддержку пользователей, базы какие-то городить, бэкапы, сервера менеджить, бегать с каждым вторым клиентом, у которого почему-то кнопка не нажимается или письмо не приходит. Фронт собирать, опять же. Наверное, если штук десять таких проектов сделать, рука набивается и уже не так страшно, но я пока не набил. Пока у меня есть только Grumpy Website, на котором кроме меня еще один человек в лучшем случае пишет, и то, там, во-первых, все _очень_ колхозно, а во-вторых, мне это существенного напряга стоило.  В-четвертых, проекты это организационно сложно. Даже для самых bare-bones MVP надо учесть миллион деталей, без которых ничего не имеет смысла, но и к веселой уникальной части это отношения мало имеет. Деталей настолько много, что в голове они просто не помещаются, разбегаются, как тараканы.  Поэтому идеальное количество активных проектов — один. И не надо себя обманывать, больше все равно не получится.  Тут важным этапом для меня стало умение проекты заканчивать. Один я закрыл аккуратно: Rum теперь Рома Лютиков майнтейнит. Остальные на life support: будут баги — починю, но на активное внимание можно не рассчитывать.  Подытоживая. Регулярно у меня получается только посты писать и идеи генерить. Посты легко, это микро-спринт — поднапрягся на пол-дня, написал и выкинул из головы. Проекты же тянутся, а это изматывает во время разработки и не отпускает после публикации.  И это все только про опен-сорс, фан-проекты. Если пытаться из этого делать какой-то бизнес, то там еще целый веер головняков возникает (а может и нет – откуда мне знать, ха-ха).  Магии, короче, не бывает. Хобби-проекты — такая же работа. Только бесплатно.  И при всем при этом я очень завидую людям, которые в молодости фигачили по фану и из этого, пусть и с некоторой долей случайности, выросли гигантские продукты. Из основателей, с которыми сталкивался лично — IntelliJ и Targetprocess.  Насколько у меня создалось впечатление, что-то понимать про мир, бизнес и продукты тогда (в 20 лет!) было не обязательно, а вот фигачить необходимо. Не думать и сомневаться, а делать. Если не пытаться, вероятность неуспеха — 100%, а если пытаться, то всего 99% 🙂  Так что продолжаю пытаться.",84
"Признания пост.  Сколько ни старался, не могу понять, в чем смысл Maybe/Option. Почему не написать T | Null? В чем прикол в коробочку заворачивать?  Ладно Скала, там ADT нет, но в Хаскелле-то есть? Теряется же T ⊂ (T | Null)? В чем глубокий смысл Some(Some(Some(X)))? Объясните?",85
"Ух, как я не перевариваю вложенные папки. Особенно пустые!  Джава любит этим грешить: нужно пройти сначала src, потом main, потом java, и потом еще пять-шесть уровней пакетов, и только потом до какого-то смысла добираешься. Самое обидное, что эта вложенность не значит ничего: пакеты лежат друг в друге на диске, но не по смыслу. Про src/main/java вообще больной придумал — почему они вложены друг в друга, почему это все не верхнеуровневые папки? Какая-то попытка группировки, которая на самом деле никому не нужна.  Папок должен быть ровно один уровень. Скопировал проект, в нем src/, а там сразу исходники. Без прокладок.  UPD: так, ситуация выходит из-под контроля. Уточню на всякий случай: я не говорю, что java или там resources не нужны. Я спорю, что они зачем-то вложены друг в друга, образуя промежуточные бессмысленные уровни пустых папок. Скажем, если бы это был src_main_java вместо src/main/java, то может быть я бы так не расстраивался.",86
"Каждый раз, когда я жалуюсь, что у меня что-то не работает, приходит миллион людей со словами «странно, у меня такая же нога, вообще проблем не знаю».  Так вот, меня это, ну, немножко задевает. В том смысле, что заставляет усомниться в собственной адекватности. Когда тебе один, второй, третий такое написал, ты уже думаешь: может и нет проблемы у меня никакой?  В такие моменты слабости мне помогает одна история. Где прочитал, не помню, за правдивость не ручаюсь, естественно (это ж интернет!), но она помогает создать модель происходящего.  Так вот, какого-то там тыжпрограммиста знакомый попросил посмотреть компьютер. Мол, Ведьмак перестал запускаться. Он приехал, смотрит, ну, правда, не запускается. Дрова там слетели или еще что-то. Он их поставил. Запускает — запускается, но тормозит страшно. 15 fps, играть невозможно. И он давай возиться, разбираться, час, другой, весь в поту, не может понять, в чем дело. И тут знакомый этот через плечо заглядывает: о, говорит, спасибо! Что спасибо, тормозит же? Да не, так и было, я так и играл. Он никогда лучше и не работал.  Ну вот такая у меня модель. У каких-то людей определение «работает» — можно в принципе решить свою задачу в течение пятнадцати минут с гуглом и ребутами. У меня же «не работает» — это когда AirDrop устройства с первого раза найти не может. Или AirPods подключились с третьего раза. Или MacBook опять сеть потерял. Или Pages завис. Или когда фотки через iPhoto синкаются дольше минуты.  А у кого-то если в течение дня прилетели, то уже работает. У них болевой порог выше.",87
"Как-то во время работы в Cognician я придумал оператор «следует». Ну, знаете, из булевой логики. Если посылка верна, верно и следствие, а из ложной посылки следует что угодно.  Ну логично же? И/или/не есть, а следствия нет. Несправедливо. Мне как раз такое условие нужно было написать.  Ну я и написал быстренько макрос, на Кложе это тривиально. Сижу, восхищаюсь своей гениальностью, удивляюсь недальновидному отсутствию этого оператора в других языках, жду положенных выплат. Коллегам объяснил, что это, говорю, мол, подождите, потом распробуете.  Ну и где-то через неделю натыкаюсь на свой же код, который это условие использует. И думаю, че за фигня? То есть я помнил, что это я придумал, но вот как оно работает, было вспомнить довольно сложно.  Короче, идея провалилась, макрос я выкинул, а код заменил на (or (not x) y). Который любой программистский мозг в уме за наносекунду интерпретирует и четыре ветки исполнения строит.  И че? И ничо.",88
"Удивительная, конечно, штука — интерфейсы. Я прочитал книгу Раскина 10 лет назад (а написал он ее все 20), и до сих пор могу вести блог, который будет казаться свежим и революционным, просто пересказывая те самые идеи.  Одна из них — мышечная память и умение вырабатывать привычку. Если коротко, то это естественный для человека процесс и происходит он абсолютно на автопилоте, достаточно лишь много раз повторять одно и то же действие. Все, что остается дизайнеру интерфейса — ему не мешать.  А знаете, что ему мешает? Непредсказуемость. То есть пока одно и то же действие приводит к одним и тем же результатам — привычка вырабатывается. Как только результаты разные, автомат ломается, в голове включается энергетически дорогой режим коррекции (ладно, это уже другая книжка), короче все плохо, все устали и ненавидят компьютеры.  А какой у нас самый непредсказуемый интерфейс в массовом использовании? Правильно, Apple Music^W^W автозамена. Автозамена сгенерировала лютое количество мемов еще во времена Т9, когда на весь алфавит отводилось 9 кнопок, но, как ни странно, с появлением айФонов и 32-буквенной клавиатуры не отмерла. Более того, не отмерла она и на лопатофонах, где на каждую букву приходится по полторы толщины пальца.  Но разве автозамена не добро? Разве она не помогает? И да, и нет. С одной стороны, она помогает локально — прямо сейчас, в моменте, да, конкретную опечатку исправить быстрее. Но в долгосрочной перспективе она вредит, причем и на корректных срабатываниях, и на некорректных.  Некорректные — это когда она мои абсолютно безупречные нажатия меняет на какой-то свой текст, который ей «показался более правильным». Набирал «чубака», а она пишет «собака». В этому случае хорошему наборщику автозамена строго мешает.  Корректные срабатывания — когда я промахнулся, а автозамена подставила правильно. Тут вред в том, что она мешает учиться.  Да, опечатки бывают у всех. Но это еще и возможность для мозга еще немножко потренироваться. Делаешь действие — получается неидеально – анализируешь результат – учитываешь – в следующий раз набираешь точнее. Это еще один абсолютно естественный контур, который ломается автозаменой.  С хорошо выработанной привычкой быстрее полностью стереть и набрать слово заново в случае опечатки. Просто потому, что привычка набирать слово целиком накопилась естественным образом, а на коррекцию привычка не вырабатывается — опечатки распределены рандомно, а набор слова всегда одинаков.  И ну главная беда автозамены, конечно, в ее непредсказуемости. «Чубака» будет иногда меняться на «собака», иногда — не будет, а раз в месяц вообще какого-нибудь «мудака» впишет.  Обидно, потому что твой мозг стоит наизготове и просто жаждет выучить любую, абсолютно любую схему ввода, с любым расположением букв и соответствием букв и результата. Любую, но только предсказуемую. А у него отнимают эту возможность: надежно ввести слово на телефоне с автозаменой способа нет. Вот просто нет, и все. Есть казино, которое  выигрывает не в твою пользу.  Так что я автозамену всегда отключаю. И вам то же самое советую.",89
"Удивительная, конечно, история — ярлыки в Винде.  Штука, которая выглядит, как твоя программа, на ней картинка твоей программы, написано, что это твоя программа, даже открывается как твоя программа, но во всем остальном — максимально далеко от твоей программы. Нельзя удалить, нельзя посмотреть размер, нельзя кому-то отправить, к письму приложить, вообще практически ничего нельзя, кроме дабл-клика.  В программировании есть такое поверье про вход в профессию — если человек способен понять, что такое указатель в языке С, значит сможет стать программистом. А если не способен, то и путь в профессию заказан.  Ну вот, в Windows 95 решили такой же эксперимент провести, только вообще всех пользователях компьютеров. В принципе, времена были дикие, профессии UX-рисерчера не было даже на горизонте, интерфейсы сами программисты и рисовали, да и вообще, подумать, что кто-то, кроме программистов, захочет компьютер домой купить, никто 25 лет назад не мог.  Хорошо, что все это в прошлом и больше не нужно проходить тест на программиста, чтобы воспользоваться компьютером под Виндой. Правда же?",90
"Еще одна довольно старая идея из книжки, которая на самом деле — повод поговорить о восприятии идей в целом: автосохранение.  Ручное сохранение файлов — одно из препятствий к превращению компьютера в повседневный бытовой прибор. В жизни если ты взял блокнот и что-то в него записал, то запись там и останется, ничего больше делать не нужно. В этих ваших компьютерах же ты берешь блокнот и у тебя в руках появляется копия этого блокнота. Все, что ты сделаешь с этой копией, на оригинальный блокнот никак не влияет. Чтобы повлияло, нужно специально синхронизировать копии. Очень контринтуитивное поведение, почти квантовая механика. Программистам нормально, а обычные люди страдают. Более естественным поведением будет автоматически сохранять любое изменение.  Если я эту идею где-то выскажу, а читают меня во многом программисты, я получу много странного фидбека.  «А мне и так нормально» — индикатор только того, что вы однажды разобрались и привыкли. А привыкает человек вообще к чему угодно и, главное, один раз привыкнув, может не осознавать неоптимальности своего положения. Часто он даже будет защищать статус кво, потому что лень переучиваться. Это естественная реакция, присущая всем людям, даже мне. С ней нельзя ничего поделать, но можно быть в курсе, можно не включать ее в логические рассуждения, можно преодолевать ее усилием воли (взять внутреннюю обезъяну под контроль), или хотя бы просто наблюдать за собой, фиксировать, когда она происходит. Я, например, каждый раз страдаю, когда меняю клавиатуру или переделываю раскладку, но зато хоть знаю, почему.  «Автосохранение ломает мои сценарии» — да, потому что сценарии построены вокруг ручного сохранения. Это не значит, что они _не могут_ быть построены вокруг автоматического. Многие вещи, кажущиеся незыблемыми глыбами текущего порядка вещей — просто способ человека приспособиться к какому-то часто произвольному, но чуть более несдвигаемому фактору. Если уж на то пошло, то ручное сохранение — способ приспособиться к ограничениям ранних компьютеров. Ограничений тех давно нет, пора и решению на свалку.  «Автосохранение создаст такие-то минусы» — да, у любого решения есть минусы. Вопрос только в том, где их больше. Если минусов больше у ручного сохранения (а их больше), то ответ не сидеть на жопе ровно и страдать постоянно, а сделать как будет лучше и страдать только изредка. Cost/benefit, все такое.  «Как мне включить автосохранение в моем Vim/Emacs/ed» — тут надо понимать, что это не практический совет, а скорее план на будущее.  На интерфейсные решения вообще можно смотреть с двух сторон. С практической: как мне устроить жизнь прямо сейчас, с тем, что доступно? Это потребительский взгляд, абсолютно оправданный. Для 99,9% продуктов  мы именно потребители, да, даже те самые любители Линукса, которые думают, что могут куда-то там послать патч.  Но можно еще и с созидательной стороны посмотреть — мы можем менять окружение, гнуть реальность, писать скрипты, плагины, патч в Линукс, в конце концов, послать. Компьютеры в этом смысле уникальны, модифицировать, скажем, автомобиль или телевизор гораздо проблематичнее.  Тут важно представить, каким мог быть бы мир, если бы в нем все автоматически сохранялось, поискать плюсы и минусы (исключая — очень важно — невообразимые траты на переход. Допустим, такой мир возникнет по мановению волшебной палочки), прийти к выводу, что плюсы перевешивают, а значит, можно сделать это целью и начать потихоньку к ней как-то двигаться. Я, например, пишу посты, популяризирую.  Все это, конечно, не более чем мысленные эксперименты. Нужны они мне для рефлексии, демонстрации дискурса в безопасном окружении. Почему безопасном? Потому что автосохранение давно проникло почти во все «бытовые» интерфейсы вокруг нас, тихо и незаметно. Кнопки «сохранить» нет в Гугл.Докс, нет в заметках в телефоне, нет в Idea, нет в диалогах macOS. Так что я очень рад, что дожил до реализации. Простое и естественное всегда побеждает то, что сначала придумали программисты.",91
"Тут дизайнер Илья Бирман репостнул свою статью «Почему люди платят налоги» и создал информационный повод.  Во-первых, статья отличная! Помню в 2014, когда я ее прочитал, в голове провернулись какие-то шестеренки и мир стал чуть яснее. Стыдно, конечно, но да, мне как-то не приходило в голову, что государство — это просто еще одна организация, точно такая же, как сеть аптек в вашем районе, или шашлычная, или айти фирма.  Раньше, со всем окружающим государство флером, ритуалами, пиаром, патриотизмом, словом «родина» и прочим шумом, мне государство всегда казалось чем-то большим, какой-то частью структуры мира. Типа, это государство позволяет нам жить на своей территории, или вообще всех нас чуть ли не родило. Ну да, тупо, но пока над этим не задумаешься, в голове какие-то такие образы летают.  На самом же деле оказалось, что государство — это просто N сотрудников, которые сидят в офисе и делают какую-то там несложную офисную работу, причем довольно плохо (конкуренции-то нет). Рядом другие офисы, иногда в том же здании, и там другие сотрудники сидят и делают что-то другое. Никакой разницы.  Еще позже я узнал, что это буквально определение государства из учебника: организация с монополией на насилие. Ключевое слово «монополия». Государство может убить человека и никто ничего не скажет, все решат, что так и надо. А если кто-то другой попробует, будут вопросы, причем в первую очередь у государства (монополию нарушаем-с).  Так что со статьей согласен на 100%, тут даже спорить не о чем. С учебником, что ли, спорить? И уж конечно речь не о моем родном теперь уже немецком государстве, а о любом вообще — принцип везде одинаковый.",92
"И тут мы переходим ко второй, самой интересной части — киданию какашками, ой, простите, интернет-дискуссии.  Внезапно, очень плохо выступил коллега Ильи, Максим Ильяхов. Посты «Мысленный эксперимент» и «Манипуляция Бирмана». В ход идут все классические интернет-приемы: неточное цитирование, приписывание слов автору, передергивание, переход на личности, проталкивание своей повестки. Я бы за такое, конечно, лицензию на Эгею отобрал, но это уже Илье виднее. Заканчивается все эпичной фразой «Берегите ум». Воистину.  Но главная вишенка на торте — пост Ильяхова «Мнение известных людей», на который он самоссылается. Вот что он советует:  > Если хотите подольше сохранять душевное равновесие, оценивайте, к чьему мнению вы прислушиваетесь. [...] Хорошая проверка — вместо имени подставлять род деятельности: «Домохозяйка раскритиковала российскую космическую программу», «Технолог пищевого производства — о волатильности на рынках ценных бумаг», «Дизайнер не верит в отравление оппозиционного политика».  Так вот, со всем своим авторитетом сообщаю: Максим написал хуйню.  Точнее, так: популярный микро- и медиум-блоггер, автор книг и редактор текстов написал полную и абсолютную хуйню.  Во. Как проверка? Работает?  Ну короче, смысл такой. Вообще неважно, кто, когда и при каких обстоятельствах высказал какое-то мнение, мысль, идею. Вот вообще, абсолютно, максимально все равно. Аноним — пожалуйста. Гитлер? Прекрасно. Егор Бугаенко? Да почему нет?  Единственное, что имеет смысл обсуждать, это саму идею. Сказал хуйню — закончили дискуссию. Сказал что-то дельное? Прекрасно, запомнил, отложил, воспользовался.  Потому что а как иначе-то? Что, если Путин скажет, что морковка полезна для глаз, все его противники пойдут и перестанут есть морковку? А если Гитлер когда-то советовал бегать по утрам?  В общем, любую идею можно обсуждать только точки зрения рациональности, логически. ТОЛЬКО так и никак иначе. Можно уточнять. Можно сомневаться. Можно спорить. Но всегда с идеей, и никогда — с личностью автора. Переход на личности — самая низшая форма дискуссии.  Я Максима не знаю, но мне все еще хочется верить, что это какой-то стеб и провокация. Ну не может же популярный блоггер, автор книг и редактор текстов настолько вредные советы давать, настолько плохо тексты дизайнеров читать и настолько некорректно дискуссию вести.  Или может?",93
"Окей, рил толк. Пользователи Линукс любят говорить, что если кому-то в нем что-то не нравится, всегда можно отправить патч. Я готов в это поверить, если завалите фактами. Отпишитесь, какой патч вы — лично вы — отправили в популярное потребительское приложение, да еще так, чтобы его приняли.   Критерии давайте такие:  1. это GUI-приложение (либо TUI, окей, Линукс же), и 2. достаточно известное, т.е. я с большой вероятностью про него слышал.  Пулл-реквесты в обскурные бэкенд-библиотеки на Perl со 150 пользователями не считаются. Подвинуть кнопочку в GIMP-е — считается. Плагин в Vim-е — нет, сам upstream Vim-а — да. Ну в общем такое, чтоб не стыдно похвастаться было.  UPD: Просто завести issue не считается. То есть issue это отлично, но они не являются уникальной чертой опен-сорса. Issue можно зарепортить и в macOS, и в 3D Max. А я хочу именно собрать примеры «не нравится — исправь сам». Еще в комментах подсказали про форки, форки тоже давайте.",94
"Чего я до сих пор не понимаю так это инсталляторов. Особенно на винде, где каждая собака на каждый чих хочет чего-то там куда-то поставить в системные места и попутно еще пермишнов запросить рутовых непоятно на что. Учитывая, что инсталлер это точно такая же скачанная из интернета программа, в которой может быть написано что угодно, давать ей рутовые права просто чтобы что-то там куда-то поставить как бы не безопасно, нет?  Откуда вообще это желание куда-то в общесистемную папку залезть? Почему из Downloads какого-нибудь не запускаться? Это же безопаснее для всех, не просить пароля при установке? На маке тоже приложения хотят в /Applications залезть, а не в ~/Applications, по дефолту. Почему? А пес его знает. Пользователь у компьютера один фиг почти всегда один.  Особенно весело, что у некоторых прог есть так называемая «portable» версия. Обычно это просто папка, скачал — запустил, все прекрасно работает. Ложи куда хочешь, прав не надо, никаких недостатков. И рядом еще идет версия «обычная», как у всех, с инсталлером. Реально, Ватсон без трубки уже не мог.",95
"Вчера не то чтобы анонсировали, и не то чтобы запустили, а так, скорее, в очередной раз напомнили, что есть в долине такой стартап, Mighty. Идея очень остроумная: заставить твой локальный хром не грузить страницы самому, а стримить видео, как эти страницы грузит такой же точно хром где-то в облаке.  Старый я, конечно, обстебал бы их со всех сторон, поныл бы, куда катится мир, что веб-страницы теперь весят больше, чем 4k видеопоток этих же самых страниц, да пошел бы пить таблетки.  Но я решил сменить настрой и стараться быть более позитивным и конструктивным. Переключиться на creator mindset — мы, криейторы, должны не критиковать кем-то сделанное, а делать свое и поддерживать друг друга.  Так вот, давайте сосредоточимся на позитивных вещах, связанных с этим продуктом (в более-менее произвольном порядке):  - Название отличное. - Лендинг очень красивый.",96
"Порой удивительно, конечно, сколько всего в компьютерах держится на соплях. Взять файловую систему. С одной стороны — фундамент многих приложений, потому что простое АПИ и везде есть.  С другой, что-то надежно с ней сделать практически невозможно. Транзакционности нет, изоляции нет, атомарности нет, ошибки хуй знает как обрабатываются, восстановления от ошибок тоже, считай, нет. В лучшем случае можно немного повысить вероятность корректной работы. Что как бы страшновато, для фундамента-то.  Но и избавиться или даже хоть как-то починить эти проблемы тоже особо никто не спешит, потому что совместимость и, ну, все привыкли. Авось пронесет.",97
"В Твиттере опять срач, могут ли компании требовать пет-проекты, что пет-проекты это работа бесплатно. В соседних тредах обсуждают, что должна предоставлять компания сотрудникам, чтобы быть незашкварной, и нормально ли давать тестовые задания. В связи с последним иногда находятся люди, которые против тестовых заданий, потому что это «работа забесплатно».  Я никогда не понимал, в чем тут сам предмет спора. У компаний и соискателей очень простая динамика — кто кому больше нужен. Если сотрудник очень нужен компании, то тут никаких тестовых заданий, офис с плюшками, все условия. Если компания нужна сотруднику, то он может и тестовое задание сделать, и на маленькую зарплату согласиться, и в офис ездить на мясокомбинат.  Поэтому «бесплатные» тестовые задания — норм, если у компании большой поток кандидатов, и она никуда не спешит. Требовать пет-проекты в такой ситуации тоже они вполне вправе. В предельном случае есть условный Гугл, у которого на входе фильтр по принципу русской рулетки: почти абсолютный рандом. Но ничего, могут себе позволить.  Но точно так же нет и какого-то универсального вселенского закона, по которому каждая компания «должна» сотрудникам плейстейшн в офис. Это минимально адекватные программисты с несколькими годами опыта пользуются перегретостью рынка, что воротят нос от компаний, где этого нет. Могут себе позволить.  Честно ли это? Ну что значит честно? Никто никому ничего не должен, компания может искать сотрудника по каким угодно критериям, а сотрудник аналогичным образом может по каким угодно критериям искать компанию. Пока не сойдутся райдеры с обеих сторон, никто никому ничего не должен, «это был не твой автобус».  И последнее, про что я хочу сказать, это про «пет-проекты – это работа забесплатно». Так-то вся жизнь живется забесплатно: ты готовишь еду забесплатно, смотришь кино забесплатно, гуляешь забесплатно, клеишь миниатюры забесплатно, выпиваешь забесплатно. Логично, что и пет-проекты делаются забесплатно — по определению, блин. Скорнее работа за деньги в общей схеме вещей — исключение, а все остальное в жизни ты делаешь для себя и ради себя. Странно думать, что твои хобби должен кто-то оплачивать.",98
"В прошлом посте я защищал право компаний требовать пет-проекты (ровно как и право соискателей обходить такие компании стороной). У автора оригинального треда были опасения, что это может стать повсеместной практикой, но я думаю, что не может, пока программисты нужны компаниям больше, чем компании программистам. А если этот баланс перевернется, то пет-проекты станут самая маленькой и незначительной для нас проблемой.  А обсудить я хочу другой интересный вопрос: если компании требуют пет-проект, какие конкретно выводы они делают из его наличия? Есть подозрения, что неправильные.  Я легко могу предположить такое: есть пет-проект — увлечен своим делом — саморазвивается — есть продуктовое видение — будет лучше работать. Но так же легко могу предположить обратное — любит работать в одиночку, будет отвлекаться от работы, скучать на нашем энтерпрайзе, выгорит.  По-моему, обе версии равновероятные, и, что хуже, могут даже сосуществовать одновременно. То есть пет-проект как-то не особо и перевешивает чашу весов куда-то. Это как узнать, что кандидат занимается каякингом — ну, прикольно, но выводы-то какие?  Чтобы разрешать такие дихотомии, рекомендую буллшит-детектор. Он очень простой: нужно спросить: «Зачем?» Есть ответ — отлично. Нет ответа — повод задуматься.  Например, мы в команде хотели нанять сотрудника, вывесили вакансию, пришел кандидат, и тут ребята говорят: а давайте ему тестовое задание дадим? Я говорю: зачем? Какая цель? В ответ невнятное мычание. «Ну прост...»  Потом говорят: вот, мы составили задание. Я опять: а что оно проверяет? Какую информацию вы хотите получить? Опять му-хрю, давай, говорит, не отвлекай, уже отдали. Окей.  Сделал кандидат задание. Присылает. Хочешь посмотреть, говорят. Ну я посмотрел. Ну задание. Кнопки нажимать умеет. Дальше-то что? Что, говорю, вы поняли? Какой сигнал? У кандидата вот гитхаб, вот опыт, вот рекомендации. Что вам сверх этого сказало тестовое задание? Что он уверенный пользователь ПК и смог разобраться, где скачать андроид студию? Что он может заниматься тупой бессмысленной работой по первому требованию начальства, не задавая вопросов? Копать от забора и до обеда?   Берем, короче, говорят. Взяли, но что это было? Человек потратил условный день на работу, которая никому не нужна. С нашей стороны инженеры потратили несколько часов сначала на составление задачи, а потом на ее проверку. Все устали, никто никуда не продвинулся. Мы узнали, что кандидату по каким-то личным причинам очень нужна работа и он готов мириться даже со самыми странными требованиями. Но зачем нам это знать? Для самоутверждения? Кафка какая-то, и совсем не грефнефая.  И нет, я не против тестовых заданий как таковых. Они могут быть прекрасным инструментом. И дейли стендапы могут быть прекрасным инструментом. И юнит-тесты. И пет-проджектов я тоже против не (тут я немного запутался в предложении).  Но — и это очень важное «но»! — нужно уметь сказать, зачем. Вот прям так, четко, ясно, во весь голос: «Потому что А, Б, В!». Такой вот простой тест. Можно взять время на подумать. Но в конце все равно должен получиться ответ, который можно не мямля произнести со сцены.  Например: мы даем тестовое задание, чтобы проверить, что человек не долбоеб. Не, а почему нет? Отличная причина, понятно, в чем польза, понятно, как оценивать. Или — чтобы уменьшить поток кандидатов (не справляемся). Тоже: вот проблема, вот интструмент решения, пазл сложился. Или, скажем, цель — реклама, мы хотим заинтриговать самых подвижных. Тогда задание должно быть интересным и с вызовом. Если знаешь причину, задание само себя пишет, потому что понятно, зачем.  А если мямлишь что-то невразумительное? Отмахиваешься со словами «это сложно объяснить»? Значит кто-то кого-то обманывает. Возможно, ты обманываешь сам себя. Тут рецепт очень простой — если не знаешь, зачем что-то делать, можно пока этого не делать. Да, вот так вот просто.  Но это пост не про тестовые задания, конечно. Он вообще про все, что мы делаем в жизни.",99
"У меня нет какого-то особого пиетета по отношению к макам или вообще продукции компании Эппл. Да, в среднем они делают покрасивее, да, есть прекрасные решения, но есть так же и ужасные — как и у всех.  Одна из вещей, которые меня жутко бесят — многооконность. Почему-то кто-то решил, что если я переключаюсь на приложение, надо показать мне все его окна. Этот кто-то не подумал, что если я открыл несколько окон, наверное я хочу работать с ними независимо, а не как целиком со всем пакетом. Сам акт создания разных окон как бы намекает, да?  Пример. У меня открыто десять пэдээфок с пейперами, и мне понадобилось посмотреть какую-то картинку с диска. Открывает ее то же самое приложение Preview, поэтому будьте уверены: я увижу и картинку, и те самые десять пэдээфок, которые я уже и не помню, когда открывал.  Особенно идиотски это все на нескольких мониторах работает — переключился на браузер на одном, у тебя давно забытая вкладка выскочила на другом и перегородила тебе редактор.  Я, на самом деле, знаю, почему так сделало — раньше думали, что «профессиональное» приложение типа Final Cut или Photoshop должно из десятка маленьких окошек состоять. Чтобы ты их там подвигал, как тебе удобно. Профессиональное же. Но потом все заебались с этой сворой няньчиться и больше так, кажется, уже никто не делает. А вот вытаскивание окон на первый план осталось.  Как надо: каждое, блин, окно фокусируется независимо. Если я хочу посмотреть одно, не надо мне все семейство из склепа поднимать. Как в Винде, короче. В Винде же нормально? Вот так же ровно сделайте.",100
"Вчера в твиттере кто-то опять возмущался, мол, в Гугле есть все возможные удобства для программистов, и самих программистов толпы, а однако же Gmail тормозит и с каждым редизайном становится только хуже. Сколько еще плейстейшнов и шев-поваров надо докупить в офис, чтобы ситуация начала меняться в лучшую сторону?  Ответ-то очень простой: нисколько! Потому что: а зачем? Зачем Gmail-у становиться быстрым? Может быть, как пользователю, вам этого и хочется, но как бизнес Гугл в его скорости совсем не заинтересован.  То есть он был заинтересован, когда нужно было конкурировать и завоевывать рынок. Тогда Gmail был и быстрым, и фичастым, и бесплатным. А сейчас у Gmail нет конкурентов, да еще и почта дело такое, консервативное, ящики раз в месяц менять не будешь. Так что задачи делать лучше или вообще как-то стараться понравиться у них давно нет. Поэтому на пользователя можно спокойно, уверенно, хладнокровно ложить огромный гугловый болт.  Поэтому дальше Gmail решать только свои, а не ваши, задачи: как максимально эффективно доить пользователей, чем занять те самые толпы программистов (программисты умеют только писать код, больше программистов → больше кода), куда девать сырых выпускников вузов.  То же самое и с Хромом, кстати. Хром тоже заехал на скорости, легкости и надежности, но, завоевав рынок, дальше он будет становиться только хуже: пихать логин через гугл, таргетировать на вас рекламу, делать удобные Гуглу стандарты, быть площадкой для экспериментов (толпы программистов, помните?), толстеть, как Уилл Смит на шашлыках. Потому что — а зачем стараться? Серьезно, зачем? Чтобы что?  Мой любимый пример с ответом на вопрос «зачем» сегодня это Инстаграм Лайт. Фейсбуку очень нужно было заехать на индийский, что ли, рынок, где у всех типа очень слабые Андроиды. То есть было очень конкретное «зачем». Они взяли и написали версию Инстаграмма, которая весит 2 Мб. Не ограниченную, нет, она полностью (!) дублирует функции основного приложения. Только основное весит 150 Мб, а это — два (!). Если бы захотели, могли бы и основное похудеть в 75 раз, но только — зачем?",101
"Чем хочу поделиться. После 15+ лет за компьютером я все еще в душе не согласен с тем, насколько же сложно программировать.  Помню, еще в универе, удивлялся, что целые фирмы существуют и делают продукт, про который мне было решительно непонятно: а что там делать-то?  Редактор кода пишете? А что так долго, чего там писать? Фотохостинг? Твиттер? (Ну, Твиттера тогда еще не было, но условно). Могу сделать за неделю.  То есть я думал, что могу сделать. На самом деле не мог, конечно, но эта мысль в голове не укладывалась. Потому что — ну все же понятно, фич минимум. Какой-нибудь Блендер, ладно, понятно, там кнопок на сто экранов, там я хотя бы вижу, где сложность.  Но твиттер? Что делают там эти пять тысяч человек на ежедневной основе? Пять. Тысяч. Человек??  Или мне непонятно, например, почему накидать макет страницы в Фигме это полчаса, а запрограммировать ту же самую страницу — это удавиться. То есть как бы и понятно, но в глубине души, если быть до конца честным, все-таки не понятно.  Постепенно, конечно, с опытом, начинаешь привыкать. Не то чтобы смиряешься, но хотя бы ожидешь подвоха. Технологии будут брыкаться. Коммуникации. Требования. Поиск по ходу разработки. Матрица взаимодействия фич растет квадратично. Мозг человека конечен и кончается очень быстро. Хорошие решения можно месяц придумывать, а плохие тебя очень быстро замедляют. Люди. Люди любят писать код, но не любят его переписывать.  Технологии, наверное, один из самых моих главных источников фрустрации. Когда ты видишь — надо сделать X, одну тривиальную, до самого конца понятную фичу, уже все придумал, а потом тебе приходится написать кода не то чтобы на 3 * X, а на все 100 * X, потому что, ну, вот такие вот технологии. Вот так вот не очень удобно все придумано.  Языки высокого уровня помогают. Кложа радует больше всего, в ней сложность проблемы и сложность ее записи в языке максимально близки, ближе, чем где-либо еще. А в каком-нибудь С++, когда ты в очередной раз думаешь, куда бы тебе пристроить еще один так не кстати нарисовавшийся указатель, или опять пытаешься понять, почему говно X не линкуется с говном Y или кто-то там где-то чего-то не находит (причем ты про всех ребят в этой цепочке слышишь в первый раз в жизни, откуда они вообще берутся), не соединяется, не работает как написано, или просто дохнет без всякого следа, когда компилятор тебя не слушается, потому что позвать С++ компилятор правильным образом это реально черная магия, которой надо шестьдесят шесть лет у некроманта учиться, тогда да, ух, начинаешь рано или поздно сомневаться в правильности своих жизненных выборов.  Есть еще подводная часть айсберга. Планируешь приложение из одной страницы (буквально!), а к нему потом надо еще лендинг приделывать, авторизацию, процессинг платежей, страницы об ошибках, рассылку емейлов, бэкапы, мониторинг, CI, релиз процесс, миграции. И вот у тебя уже не милый стенд на углу с домашними открытками, а целая типография с издательством впридачу, по крайней мере по сложности управления. А суть, то, что приносит радость — та самая одна страница — это реально 10% от того, что в итоге придется сделать. Поэтому я стараюсь в маленькие хобби-проекты особо не ввязываться.  И поэтому я так люблю писать. Писать легко — полчаса и готово, проект закончен и выкинут из головы. Все плюсы, никаких головняков, буквы ведут себя ровно так, как ты хочешь, не выскакивает из ниоткуда внезапно 900% дополнительной работы по несвязанным с сутью вопросам, а текстовый редактор не плюется ошибками длиной в два вертикально ориентированных монитора на клингонском.  А вот программировать сложно.",102
"Шок-контент: все это время от вас скрывали настоящую причину, почему маки удобнее всего винды и линукса. Пришло время узнать правду: потому что комманд.  Смотрите: в винде все шорткаты нажимаются с контролом. А контрол у нас где? Правильно, далеко в левом углу, под мизинцем. Мизинец слабый, руку надо изгибать, короче, максимально неудобно. На линуксе то же самое, только еще в терминале шорткаты перестают работать. Потому что терминал контрол тоже любит, но не настолько, чтобы считаться с остальной системой.  А что на маке? На маке все шорткаты нажимаюся с коммандом, который самая правая кнопка в ряду, ближе всего к пробелу. Там, где на ПК у вас будет альт. Комманд, в отличие от контрола, находится под большим и сильным большим пальцем, тянуться до него не надо, он легко и естественно нажимается, да еще и работает в терминале (вдруг для вас это важно).  Когда я в первый раз перешел на мак 13 лет назад, я был поражен, насколько это просто, тривиально, и насколько сильно это повышает качество жизни.  Но, конечно, об этом не говорят: куда интереснее обсуждать фичи, процессоры и иконки. А настоящее-то удобство и юзер-экспириенс вот они, прямо под носом, в ежедневном использовании.",103
"Посмотрел видео, где Линус Торвальдс признается, что пакует какое-то там свое приложение под Винду и Мак, а под Линукс не пакует. Пусть, говорит, кому сильно нужно, те и разбираются. Потому что дистрибутивов миллион, потому что все разные, как снежинки, потому что какие-то требуют динамической линковки, и потому что ломают бинарную совместимость по нескольку раз в год.  Это все. Это весь пост.",104
"Короче, кнопка «назад» должна быть везде.  Это такое же фундаментальное взаимодействие, как undo/redo, только для навигации. Ну да, открыли его чуть позже, спасибо браузерам, но открыли же!  И как фундаментальное взаимодействие, она имеет смысл везде, где есть больше одной страницы контента: в телеграме, в редакторах кода (в Sublime/Idea/VS Code есть команды, но я не понимаю, почему нет на самом видном месте кнопки), в фотогалерее, в читалке PDF, ворде, блин!  Андроид/Виндофон вон просекли тему и поставили ее на самое видное и всегда доступное место, рядом со второй такой же важной кнопкой «домой». То есть предполагается, что какое бы приложение ты не делал, у него обязательно будет сценарий, в котором кнопка назад имеет смысл.  Айфон, как обычно, застрял в парадигме «у нас будет только одна кнопка, потому что простота» и продолжает вешать на эту самую кнопку четверные тулупы с балетным приземлением. А назад рисовать по большим праздникам, в дальнем левом верхнем углу, да и то не всегда. Но ходить назад-то все равно нужно.  В общем, на десктопе «назад» тоже пора вводить, чай в 21-м веке живем.",105
"Ух, как меня бесят эксепшны, в которых указано место ошибки, но не указаны аргументы. Да, иногда вариантов немного и можно догадаться, но иногда одно конкретное значение даже в самых глубинах системных функций может объяснить, что же пошло не так на самом верхнем уровне.  Сравните:   IOException No such file or directory   java.io.UnixFileSystem.createFileExclusively (UnixFileSystem.java:-2)   java.io.File.createNewFile (File.java:1025)   clojure.lang.Compiler.writeClassFile (Compiler.java:7672)   clojure.lang.Compiler$ObjExpr.compile (Compiler.java:4670)   clojure.lang.Compiler$FnExpr.parse (Compiler.java:4106)   clojure.lang.Compiler.analyzeSeq (Compiler.java:7105)   clojure.lang.Compiler.analyze (Compiler.java:6789)   ...   <еще порядка сотни стекфреймов из глубин компилятора>   и   IOException No such file or directory: ""target/classes""   А вы спрашиваете, почему я такой злой. Вот поэтому.",106
"Обожаю штуку (нет), когда на конференциях тебя как докладчика очень настойчиво просят указать работодателя — при подаче заявки, при регистрации, на слайдах.  Никогда не понимал, кому это может быть интересно — ну, работаю я где-то, но это чаще всего случайность, сегодня здесь, завтра там. Скажем, мой послужной список: КБ Информ, МСС-Системы, Сибирьэнергобиллинг, Echo, Cognician — ну как, что-то прояснилось? То, что я сейчас трудоустроен в условном Яндексе/Гугле/Фейсбуке не значит автоматически, что я не буду нести полную пургу. Так же как и то, что я сейчас между работами и стою на кассе в Макдональдсе, не значит, что мне нечего сказать про программирование.  То есть, может быть и нечего, но это точно не фактом текущего трудоустройства определяется.",107
"Смотрю (рекламный, видимо) ролик How to check your email in 1984 про то, как очень деловой мужик в 1984-м пытается почту в поезде проверить. У него там два чемодана, один с «компьютером», второй с модемом, он все это две минуты только экранного времени подключает, настраивает (в том числе с применением физической силы), пока наконец ему не удается скачать свою почту, которая объему информации примерно как один твит.  Это, конечно, не первое и не единственное такое видео, и самое очевидное чувство, которое оно вызывает — как же далеко шагнули технологии! Глобальная сеть, онлайн 24/7, все знания человечества на кончиках пальцев — все, о чем мечтали фантасты шестидесятых, все состоялось и превратилось в обыденность, которую мы даже не замечаем. Особенно, наверное, дети (ну как дети — Gen Z), для которых это просто часть устройства мира.  Меня же с недавнего времени вот какой вопрос все больше занимает: как все это было неудобно и абсурдно — и по сегодняшним меркам, и, я уверен, по меркам того времени тоже. Вряд ли для кого-то таскать с собой два дополнительных чемодана было хоть в каком-то смысле удобно или незаметно. И все равно были люди, которые этим занимались, и даже, кажется, от души, с удовольствием. Может быть, даже верили в идею и в перспективы, хоть и весьма туманные.  То есть представьте: компьютеры ничего практически не умеют, работать с ними, наверняка, геморойнее, чем с... с чем угодно вообще. Профит сомнительный — наверняка многие вещи куда удобнее самому на логарифмической линейке посчитать, чем стоять в очереди на машинное время неделю с пачкой перфокарт (это конечно раньше 84-го, но пусть), или по телефону секретарше позвонить (как в случае с почтой). Затрат требовало неимоверных, целые здания с обслуживающим персоналом считали задачи, которые ваш телефон решит за полсекунды.  И все равно, вот занимались такими странными и неудобными вещами, причем, возможно даже, без четкого какого-то понимания, что это, в основном, важно для будущего, без четкой цели решить все юзабилити проблемы в следующем квартале (тогда и слова-то такого не было, господи), даже без понимания, как и когда вообще это все станет удобно и хоть сколько-нибудь применимо до той степени, что выгода превысит сложность и неудобства. Темные времена, но любопытство, по-видимому, в первую очередь, заставляло двигаться, не зная, зачем и куда.  От этой мысли легко перескочить на сегодняшний день и заметить, что, может быть, не так много и изменилось. Программы и системы создаются черт пойми как, часто по совсем случайным причинам, глобального плана на будущее ни у кого нет, хорошие вещи вырастают как побочные эффекты чего-то совсем другого, 99% всего это очевидные тупики, причем очевидные даже сегодня, прямо в момент создания, плюс проблема, когда весь прогресс, сделанный в 70-х, просто забылся, потому что сменилось поколение (даже два).  Короче, в осознанности мы недалеко ушли, и поэтому мне нравится как раз вспоминать про прошлое. Вот, люди в такой же ситуации примерно были, и все равно фигачили, просто потому что интересно и по приколу, ничего не понимали и не планировали, и получилось то, что получилось. А получилось о-го-го как много.",108
"Интересно, как в универе, когда учишь все это программирование, джаву там, С++, очень любопытно во всех этих хитросплетениях разных вариантов наследования разобраться, как решается diamond problem, в каких случаях наследник что может вызывать у родителя, вот эти все детали. Произвольные достаточно, но сложные именно за счет количества комбинаций.  С опытом это все облетает, как шелуха, и понимаешь, что самое главное — это заставить компьютер делать бип-буп, а все остальное неважно. Поэтому херачишь везде public, вместо констант гоняешь строки, пакуешь по четыре флоата в лонг и прочие, кхм, «сомнительные» практики.  Так вот, даже в универе, с горящими глазами и запасом внимания кота, услышавшего скеб под половницей, я так и не смог понять, что за зверь такой inner классы.  То есть пакетная видимость, наследование там, интерфейсы — это все понятно. Статические inner классы тоже более-менее: типа, неймспейсинг такой.  Но не-статические что за зверь и нафига они нужны? У них есть неявная ссылка на внешний класс, при этом они не belong to и не part of внешнего, потому что (вопреки записи) внешний без них может прекрасно существовать, а они без него — нет. Чем это отличается и чем удобнее просто поля private Outer outer что для них аж отдельную конструкцию завели — черт его знает.  Можно ли их вкладывать друг в друга? Могут ли они реализовывать интерфейсы и наследоваться? Можно ли наследоваться от них? Что значит модификатор видимости на них? Как комбинируются модификаторы видимости у внутреннего и внешнего класса? Куча вопросов, которые нужно решить при дизайне языка, а сути не прибавилось. В итоге получаешь фичу, которая вроде бы и так стандартными средствами легко делалась. Зато есть что на собеседованиях поспрашивать.  Может быть, со временем стало понятно, что это все сомнительная идея, но все равно интересно, о чем люди думали, когда это все придумали. Кто-то знает? Люблю любопытные заблуждения.",109
"Все свое хости сам. Мысль с одной стороны очевидная, а с другой приходит только со временем и после того, как пару раз обожжешься.  Первый раз я обжегся на Дропбоксе. В первых версиях у них была папка Public, каждый файл из которой просто торчал в интернет. Так можно было тривиально собрать несложный сайт: положил index.html и картинки в Public/site и дал ссылку на http://tonsky.dropbox.com/site. Все.  Но маркетологи решили, что это слишком просто и удобно для людей, и хостинг html прикрыли. Это что, у каждого был бы свой сайт, который он мог сделать дома, не привлекая программистов? Непорядок. Кстати, реально удобно, может быть сейчас кто-то что-то подобное продает?  Второй раз я обжегся тоже на Дропбоксе. На этот раз хотлинкинг картинок — он у них продержался гораздо дольше, но в итоге его тоже прикрыли и вместо картинки стали отдавать дебильную веб-страничку, «продающую» сервисы компании, а не то, ради чего пришел пользователь. Тут я попал крепко, потому что все мои картинки в ЖЖ раздавались как раз таким образом. Времена были тяжелые, у ЖЖ еще не было своего хостинга картинок (зато он еще не превратился в говно, вот парадокс).  Здесь первый урок: если компания дает тебе что-то бесплатно, рано или поздно это закончится.  В то же примерно время у меня хватило ума не подсесть на популярный feed burner. Тогда еще существовал Google Reader и RSS еще был big thing. На фоне этого Гугл предлагал «удобный» сервис: ты хостишь свой RSS у них, они считают тебе статистику и анал(итику). Все бы ничего, но когда Feed Burner закрылся, я бы тупо потерял всех читателей, а они бы этого даже не поняли.  Дальше еще проще: допустим, в вашем е-мейл адресе написано “@gmail.com”, но вас заебал Гугл, ваши действия? Стиснуть зубы и раздвинуть ягодицы пошире. Поэтому в моем написано “@tonsky.me”. Провайдер FastMail, но это неважно — надоест fastmail, перескочу куда-то еще, ни для кого ничего не поменяется. Кстати, “@hey.com” не рекомендую по той же причине.  Сайтам и соцсетям верить нельзя в принципе. Джон Блоу, по крайней мере в соцсетях, постепенно превращается в городского сумасшедшего и, например, удаляет все свои твиты через две недели — пойди, залинкуйся. Поэтому твиты можно вставлять только скриншотами. У меня так же пропадали и переводы моих статей, на которые я ссылался, и видео с моих выступлений, и подкасты.  Люди вообще не очень бережно относятся к обратной совместимости. Сделали редизайн — все предыдущие глубокие ссылки с 99% вероятностью теперь ведут нахуй. Подкаст переехал на другую платформу — перенесли только последние 10 выпусков. Умер мейнтейнер, закрылась компания — домен истек, сайт переехал в archive.org. Ну, в таком духе. Archive.org великий, кстати, сайт — молюсь на него, примерно как на википедию.  Поэтому еще раз мысль: никому не верь, бесплатными сервисами не пользуйся, на чужой контент не линкуйся, все свое хости сам.",110
"Был период, когда я еще не познакомился с Кложей, но уже слышал про Лиспы, и, в частности, про волшебную силу макросов. Думал: ну что такого особенного в языке может быть, чтобы он имел те самые макросы, а остальные только облизывались? Мы же все тут тьюринг-полные. Слышал слово «гомоиконность», но что оно значит понятия не имел.  И вот я тихо-мирно втянулся в мир Кложи, поднабрался опыта, написал свой первый макрос, второй, десятый, завел популярные проекты, начал контрибутить в ядро языка, и тут вспоминаю: о! Была же гомоиконность какая-то. Сейчас-то я поди смогу разобраться, что это за волшебная пудра.  Ну так вот. Рассказываю. Писать макросы в Кложе (и в других Лиспах, я подозреваю) легко по двум причинам.  Первая — потому что ничего не надо отдельно настраивать. Макросы — не плагин к языку, не специальный какой-то агент, не дополнительная стадия, которую надо где-то запускать и куда-то складывать результаты. Нет, они просто настроены и включены по дефолту в любой программе, всегда, для всех. Это первый порог.  Второй — в том, что синтаксическая структура языка при парсинге раскладывается в очень простые структуры данных — списки и словари. Там, где в «нормальном» языке с «настоящим» синтаксисом было бы какое-нибудь говно типа IfExpressionTrueBranchASTNodeClassObject с восемнадцатью обязательными полями и ста десятью методами, от одного взгляда на который рука сама тянется ко вкладке с нетфликсом, а голова к подушке, в Лиспе просто список из четырех объектов. У элементов списка неявно имеются специальные роли — первый элемент, например, имя функции (if), второй — условие, третий и четвертый — ветки. Их не может быть два или пять, только три или четыре. И да, их надо держать в голове, но сюрприз — они и так уже в голове, потому что ты же программы-то уже пишешь.  Кайф, собственно, в том, что роли эти неявные и про них нужно помнить в голове, а в руках у тебя самый обычный ArrayList, у которого есть .add, .remove, .count и тому подобное. Принципиальна тут именно простота — тебе не нужно ничего знать дополнительно про компилятор, не нужны какие-то специальные объекты или функции, не нужна специальная документация, нет каких-то невидимых волшебных правил. Все, что тебе нужно, чтобы получить точно такой же if, какой ты пишешь в программе — сделать точно такой же список. По простоте это примерно как составлять SQL-запрос, конкатенируя строки. Даже чуть удобнее, потому что это скорее что-то вроде JSON-а, а не строки.  А как же безопасность? Можно же сгенерить бессмысленную ерунду! Что если я засуну три ветки в if? Передам две функции в call? Очень просто: программа не заработает. Тоже мне проблема.  В общем-то это все. Дар Лиспов человечеству — не в какой-то там волшебной гомоиконичности, а в том, что генерировать код программы настолько же тупо, просто и удобно, как составлять отладочный println. Лиспы не парят тебе мозги, вот и весь секрет.  Могли бы другие языки сделать то же самое? Конечно могли бы, но для этого надо немного расслабиться и отпустить вожжи, а не моделировать вселенную до последнего атома. Оно, конечно, корректно и типобезопасно, но настолько же и отбивает охоту умничать и программированием заниматься. Честное слово, зачем мне знать, как вы придумали у себя в компиляторе левую ветку if-а называть? Голова-то не резиновая.",111
"Прочитал отличный инсайт в твиттере zverok про APL. Оказывается, цель этого, кхм, необычного языка — не в том, чтобы солдат заебался, а в том, чтобы программы и даже целые системы целиком помещались на один экран.  Ну крутая цель, че. Скроллинг и чтение кода — одно из самых муторных занятий, и меня постоянно клонит в сон от вида этих простыней английских слов типа while if function undefined public abstract final native catch finanly и названий классов на половину 80-знакового лимита. Читать-то много, а смысла передается мало.  Но хуже всего, что даже самый простой какой-нибудь java-класс это минимум три-четыре 4k экрана текста по высоте, а это значит скроллинг, а это значит невозможность посмотреть на что-то и запомнить, невозможность использовать пространственную память, невозможность сосредоточиться на действительно большом куске проблемы. Как в Энгри Бердс — пока тянешь рогатку, замка со свиньями не видно.  Сразу скажу, что ответа тут не будет, это мысли вслух 🙂 Начну с байки.  В школе папа купил нам с братом ZX Spectrum, а с ним шел какой-то там бейсик. Редактировать программы в нем было жутко неудобно, поэтому я писал их в тетрадке. Так вот, пока программа помещалась на одну страницу, было ОЧЕНЬ удобно. Как только страница заканчивалась и нужно было переворачивать, сразу становилось невозможно и весь интерес пропадал.  Очевидный способ сокращения объема программ — укорачивание имен и использование ASCII-графики в операторах вместо очевидных английских слов. Математики любят однобуквенные переменные, да, но мне кажется это глупостью — сначала писать V − E + F = 2, а потом две страницы расшифровывать, что такое V, E и F. Особенно когда каждая буква придумана и введена лично тобой и нигде больше не используется (одноразовая, то есть). Тогда чтение превращается в бессмысленное бегание глазами от записи к легенде.  Про использование ASCII-графики у меня окончательного мнения нет. Что-нибудь типа (0/:l)(_+_) конечно выглядит ужасно и никогда не загуглится. С другой стороны, может быть, после книжки по Скале ты просто будешь знать, что это значит, и всю остальную жизнь оно будет тебе экономить время? Тут, наверное, вопрос больше в интуитивности и внутренней логичности структур и операций, которые за этими абстракциями стоят, чем за их записью. Потому что напугаться можно и вполне невинного condp, который прекрасно гуглится и читается. А так какой-нибудь a + b явно лучше a.plus(b), главное, чтобы к этому + дальнейших вопросов не возникало.   Язык получше — точно вариант. Та же Кложа показала нам, что работа с коллекциями может быть удобной, и это всего лишь вопрос стандартной библиотеки. Каждый раз, делая List.add в Джаве, поражаюсь, насколько кондово сделаны другие языки. Да, даже Питон. Учитывая, что 90% промышленного программирования это списки и словари, вопрос удобства работы с ними _критически_ важен.  В докладе The Nile Programming Language (который делали в Алан Кеевском Viewpoints Research Institute) есть слайд, на который целиком поместился весь их растеризатор Безье. Красиво, что. Мне очень хочется хоть одну в жизни программу написать, которая бы так же лаконично записывалась.  Правда же жизни в том, что, кажется, так записывается только дистилированная математика. Сам APL хорош только для чисел и матриц, но разваливается на веб-задачах. Потому что веб-задачи — это посмотри на восьмой байт и если он Ж, то запиши в базу по айдишнику 14 число 88. Почему? Да нипочему. Это как ДВС, который работает не по красивым математическим формулам, а по уродливым инженерным — не (x + y)² = x² + y², а 133 мл масла на 234 километра пробега, если температура от −7 до +36°C.  В общем, кажется, идеал недостижим, но двигаться к нему еще есть куда. Текущие языки все еще очень сильно ощущаются как ассемблер (пойди то, сделай се, подожди, давай подержу тебя за ручку), а могли бы больше как Prolog или SQL. Есть куда сжимать.  А вот уметь показать всю программу на одном экране — кажется, безусловное благо. Я даже готов идти на уступки.",112
"Иммутабельность в программерских инструментах как-то очень сильно недооценена. Казалось бы, ну вот подключил я библиотеку, а она распространяется в исходниках. Ну зачем мне ее локально собирать? Наверняка уже миллион человек до меня ее собирали, на таких же точно компьютерах. И я получу побайтово-идентичный результат. Это ж траты ресурсов похлеще биткоина.  Почему нет какого-то глобального иммутабельного супер-кэша всего? Посчитал хэш-сумму исходника, добавил в хэш версию компилятора, проверил в интернете — есть/нет? Есть? Ну и прекрасно, качнул за доли секунды того времени, которое бы иначе понадобилось на сборку.  Ну ладно глобально, но вот локально даже, какие-нибудь Кложа или JS компилируются на каждый запуск. Зачем? Закешируй результат локально, батарейку меньше посадишь, запустишься быстрее, пользователь еще счастливее будет.  Понятно, что основной челлендж тут — действительно аккуратно зафиксировать все входы компилятора. А то может у тебя макрос $ENV читает, или там от фазы луны, при которой собирался какой-нибудь там libc, тонко, редко, но существенно зависит какой-то результат.  Ну так это хорошая задача и ее нужно аккуратно и честно решать, от корня к листьям, по всей цепочке. А то понагородили промышленных систем из ветоши и хвороста, а потом начинают какие-то reproducible builds придумывать и тренд вводить. Раньше-то чем думали?",113
"Учился я как-то в физ-мат школе, и задали нам задачек по матанализу. Сидим мы значит с другом, пыхтим, и тут заходит его сестра, которая к тому времени была уже на втором курсе физфака, что ли. Бросает беглый взгляд на предел, а там запутанное такое выражение. И она говорит: тут будет е пополам. Я удивился: как? Тут, говорит, выражения довольно типичные. Спустя какое-то время начинаешь видеть, к чему все сведется. Мы с другом досчитали, и получилось, конечно, е пополам. А через два года универа и мы научились так же.  Вернемся в наши дни. Смотрю я стрим по программированию, там парень решает задачки с leetcode. Открывает первую, там нужно найти в списке два числа, сумма которых дает заданное. У меня в голове молния, что делать и как. За секунду все понятно. А он старался, пыхтел минут 40, пока не справился. Открывает вторую — связный список. Застрял еще на часик.  Я это не к тому, что «смотрите, какой тупой, ха-ха». Нет. Мне кажется это как раз нормально — если еще нет навыка решать «задачи с собеседований», они и не будут решаться. А вот если набраться опыта, «мяса», нащелкать сто, двести, тысячу похожих ситуаций, то и реализации начнут от пальцев отскакивать. В этом смысле это как раз хорошее упражнение, им нужно заниматься.  Зато мне кажется я понял, что за люди топят против задачек на кодирование на собеседованиях. У них просто нет этого навыка — сесть и написать код.  Вот прям так сходу, без раскачки и рассуждений: запустить редактор, вбить нужные буквы, запустить, отладить, через двадцать минут закончить, сделав ровно то, что просили, и пойти дальше.  Не рассуждать о том, как ты запустишь редактор, как бы ты решал эту задачу, или как тебе мешает стресс, или неудобный ноутбук, или доска с маркером, или «зачем это вообще», или «что это показывает», или «да это ничего не значит».  Значит. Это навык, демонстрирующий очень простую вещь: а работаешь ли ты с кодом на постоянной основе. Пишешь ли ты код своими собственными руками.  Потому что если ты программируешь регулярно, пишешь код хотя бы каждый день, для тебя подобные задачи вообще не вопрос. Это рутина, рефлекс, это то, что ты делаешь лучше всего в жизни, потому что больше всего практиковал именно это.  Это как повара попросить сварить макароны. Пьяный, уставший, на чужой кухне, с ложкой не той формы и солью не из того региона, под присмотром или без, макароны в любом случае окажутся в кастрюле. Потому что ну как иначе-то?  А вот если ты код не пишешь, то навык потихоньку теряется. Ты забываешь, в каком порядке объявлять переменные, из какой библиотеки импортировать функции, какие опции компилятора запускать, какой шорткат для expand selection. Да, ты знаешь, где подсмотреть, но спинно-мозгового рефлекса уже нет, и ты делаешь это в десять, в сто раз медленнее, чем мог на пике формы.  Что делает мозг в таких случаях? Правильно, ищет отмазки. Вместо того, чтобы сделать задачу, мозг начинает думать о том, как ее не делать, почему ее не стоит делать, в каких идеальных условиях он мог бы начать ее делать — ну, короче, беречь свое эго.  И это тоже нормальная защитная реакция, я не говорю что это плохо. Она у всех так работает, и у меня тоже. Главное тут понимать, откуда она исходит. Тот, кто может решить проблему, берет и решает. А кто не может — ну, тот упражняется в риторике и ораторстве.  Это могут быть очень успешные люди. DHH вон, признается, что не смог бы написать сортировку пузырьком. Боб Мартин 40 минут решал первую задачу из Project Euler. Чувак из Homebrew не смог развернуть дерево.  Они могут очень красиво говорить. Могут очень эффектно кидать понты. Но надо понимать, что платят им в таком случае совсем за другие навыки, чем за программирование. Потому что код они уже давно не пишут.  Опять же, хорошо это или плохо давайте оставим за рамками. Я бы не прочь оказаться на месте того же DHH. Утверждение очень простое: писать код на интервью тебе может быть тяжело только по одной причине: ты этого давно не делал.",114
"В твиттере оказалось, что не все знают про программу Dash, а значит, не знаете и вы. Да я и сам о ней узнал, может, всего год назад. И с тех пор она прям очень сильно изменила мою жизнь.  Концепция очень простая: это оффлайн-дока для всех языков программирования и многих фреймворков/библиотек. Не больше, но и не меньше.  Прежде, чем раскатывать губу: нет, они не привели все языки к единому формату документации, они просто качают и оборачивают официальные сайты.  Как оказалось, у людей возникают закономерные вопросы. Ну, во-первых, а чем это лучше сайта тогда? Отвечаем.  Лучше сайта это тем, что быстрее. Задумайтесь, сколько времени вам нужно, чтобы найти документацию по, скажем, std::unique_ptr::release. Обычным способом:  1. Переключаемся в браузер.  2. Открываем новую вкладку.  3. Вбиваем unique_ptr. Писать надо полностью, иначе он найдет чушь.  4. Ждем, пока загрузится поисковик.  5. Если вы пользуетесь гуглом, берем мышку??? чтобы жмакнуть на первый результат. Я пользуюсь DuckDuckGo, там, слава богу, есть стрелки вверх-вниз.  6. Ждем, пока загрузится cppreference.  7. Жмем cmd+f.  8. Вбиваем release. Жмем Enter.  Ура! Не забудьте потом вкладку закрыть, кстати.  Сравним с Dash:  1. Жмакаем общесистемный шорткат откуда угодно.  2. Вбиваем “unique_ptr release”. Enter.  There’s no step 3, как говорится. Никуда переключаться/фокусироваться не нужно, все уже где надо сфокусировано.  Это, в общем-то, основная продающая фишка. Но есть и вторичные, например:  - Единый интерфейс для всех языков. У меня, например, Java, C++, Clojure, Kotlin, Python 3, JavaScript и до кучи еще CMake. Не нужно помнить, что на каком сайте находится.  - Можно выбрать версию доки. Например, если вы загуглите «ArrayList java», то получите ссылки на Java 7 и Java 8 (сейчас актуальная версия 16, если что).  - Надежность. Одинаково хорошо ищутся и суперпопулярные/благозвучные классы-методы, так и всякая хтонь, которой никто не пользуюется и которой из-за этого не интересуются поисковики.  - Четкий фокус. Нужно подсмотреть порядок аргументов в методе? Прекрасно. Точное название класса? Тоже. Все, что покрывает официальная документация, и ничего, ни-че-го больше. Никакие сайты, блоги или стековерфлоу не путаются под ногами.  - Вкладки в браузере не копятся!  - Оффлайн. Не пригождалось, но в принципе почему нет?  - Мнгновенный отклик. Да, веб-страницы все еще грузятся ощутимое время. Да, даже Гугл.  - Не зависит от контекста, вызывается откуда удобно. Гораздо удобнее, чем искать в списке окон браузер. Но: обязательно ставьте общесистемный шорткат! Без него половина смысла как минимум теряется. У меня cmd+shift+e, но это не очень удачно (конфликтует с экспортом из графических редакторов).  Есть только для Мака. Говорят, есть альтернативы под Винду/Линукс, сам не пробовал.  Платная. $30. Для меня оно стоит вообще всех денег. Редко когда программа приходит и занимает настолько важное и ключевое место в твоей рутине.  Мне, например, она качественно поменяла способ взаимодействия с документацией. Теперь любую мелочь, которую я не помню сходу, действительно удобнее подсмотреть, не приходя в сознание и не прерывая flow, и это дело пары секунд.  Нет, с гуглом не так, с гуглом сильно хуже. В это не очень веришь «в теории», это надо попробовать. Попробуйте, только не выносите вердикт заочно. В худшем случае удалите еще одну ненужную программу. А в лучшем — она изменит вашу жизнь.",115
"Делал я как-то задание по ООП в универе. Так как я еще только учился, четкого понимания, как что нужно организовывать, у меня конечно не было, и любая глупость могла временно показаться правильной.  Ну и вот я решил «организовать» код задачи, и аккуратно разложил его по пакетам, типа, «models», «views», «controllers». Что там точно было, не помню, но смысл эквивалентный. Очень радовался, кстати, как аккуратненько все получилось.  Показываю преподу, а он говорит: «Ты дурак?». Ну, не буквально так, конечно, все-таки дело происходит в солидном университете в центре академического городка, где все преподаватели и студенты интиллигентно общаются на «вы». Поэтому фраза была «Вы дурак?»  Короче, объяснил он мне так: какой смысл в таком разделении, если каждую новую фичу нужно прописать во всех трех папках? Лучше сделать перпендикулярно — каждую фичу в свой пакет, а внутри все что ей нужно. Тогда можно смело целые пакеты подключать и выбрасывать по желанию. В этом хотя бы есть какой-то смысл.  И это в общем-то круто, и я рад, что меня так рано с этим принципом познакомили. Хотя немножко пугает, что не системно на лекции, а чуть ли не случайно на семинаре.  Сейчас-то я, конечно, умный, и знаю про cohesion (связность) — количество внутренних связей и coupling (связность) — количество внешних зависимостей. Если не в курсе, запомните: связность должна быть высокая, а связность — низкая. Идеала обычно не получается, но стремиться все равно полезно.  Остальной мир принимает эту истину постепенно, но уверенно. Скажем, до фронтендеров потихоньку доходит, как мало смысла в разделении html/css/js и что удобнее все писать в одном исходнике (JSX и CSS-in-JS, например).  Кто увидит DHH — передайте рельсовикам, пожалуйста, тоже?",116
"Сплю я сегодня, значит. И снится мне какой-то то ли ресторан, то ли обед на конференции. Официантка приносит замысловатый десерт и начинает объяснять, как его есть и что. Круто, говорю. Она так невзначай: «Вот бы еще Путин по-скорее ушел». И я в ответ, думая в первую очередь о десерте: «Ага, скорее бы».  И тут сон берет крутой поворот: я понимаю, что ляпнул лишнего, совершенно искренне пугаюсь, у официантки в пуговице, опять же, совершенно для меня неожиданно, оказывается микрофон, мы начинаем выяснять, что это значит, можно ли удалить запись, етц.  Это я все к чему? Получается, одна часть головы придумала сюжет с твистом и развлекала этим сюжетом другую часть, которая о подвохе ничего не знала. Здравствуй, шизофрения?  Но в целом для меня это не новость, конечно. Мозг — это не я, и над происходящим в голове я имею примерно такой же контроль, как и над происходящим на улице. Но вдруг вы не знали?",117
"Сказать, что меня бесит до пара из ушей миф о «правильном» dpi для маков — это сильно преуменьшить масштаб проблемы.  Какой-то умник когда-то заметил, что у многих десктопных маков очень похожие dpi (dots per inch, плотность пикселей). Это магическое число — 220 (110 в до-ретиновые времена).  Так вот, этот умник написал статью, мол, что это «правильное» разрешение и на любом другом маки, мол, выглядят «не так». В чем именно это «не так» заключается — непонятно. «Не так, как задумал Эпл», «просто поверьте».  Понятно, что это обыкновенный снобизм («вы не способны на таком же глубоком уровне наслаждаться техникой Эпл, как я, сверхсущество»), но статья внезапно пошла в народ. Люди поверили в тезис, начали повторять, и воротить нос от не-эпловых мониторов. Что ж, каждому поколению нужен свой миф про кактус.  Я бы промолчал, но периодически и до меня докатывается этот нонсенс. Говоришь человеку — вот классный монитор. А он такой — «ну нет, это не по-эпловски». Или вообще категорически заявляет: «для маков внешних мониторов не существует». Но вот же, валом, подключай любой? «Ну это не такие»... «На 4к места мало, дайте мне 5к!» А сам при этом сидит за ноутбуком 13"" (2.5к) и никаких проблем не видит. «Потому что Эпл».  Представьте, если бы Эпл начала производить обувь и выпускала бы только 37-й размер. И вот эти люди ходили бы босиком, потому что в 37-й нога не лезет, а другой обуви «не существует».   Что же с этим мифом не так? Начнем с того, что абсолютный размер пикселя не имеет никакого практического смысла — глаз воспринимает только угловой размер. Отодвинули монитор в два раза дальше? Пиксели для глаза стали в два раза меньше, хотя их абсолютный размер не изменился. Почему у айфонов dpi больше (330)? Да потому что ты его держишь прям у носа.   Так что — глубина стола, ваше личное зрение, привычка работать на коленях, — все надо учитывать, если уж мы хотим получить какую-то константу, которую можно сравнивать.   Дальше, про консистентность и безупречность самого Эпла. Мол, в экстазе соития софта и железа они настолько точно подбирают размер кнопок, что менять его было бы кощунственно.  Давайте посмотрим на Айфоны. Те, что на 163 (326 с 2x скейлингом) еще ничего. Но позвольте напомнить вам о так называемых «плюс» моделях, имевших 401 dpi и 3x скейлинг, т.е. уже 133 «логических» пикселя на дюйм. Если вы думаете, что софт там куда-то адаптировался, расслабьтесь, а то нафантазируетесь. Новые «Pro» модели вообще дают 458 dpi на 3x, т.е. уже ~150 «логических».  Айпады идут на 132 dpi / 264 @ 2x, а миники уже на 163 / 326. Почему? Потому что отмасштабировать софт проще, чем подгонять и перерисовывать все под новый dpi, чтобы сохранить физический размер. Мы все еще про физический размер, помните, да?  Дальше, айПад 13"" идет на 264 dpi, а Macbook Pro 13"" — уже на 226, при идентичной диагонали и расстоянии использования (только не говорите мне, что вы с 13"" смотрите фильмы, раскинувшись на диване, пожалуйста, моя психика этого не выдержит).  Наконец, последний гвоздь в крышку гроба аргументам про «оптимальный» физический размер. Года примерно так с 2015-го Эпл продолжает выпускать дисплеи с 220 dpi, но ставит на них масштабирование экрана, превращая физические 220 dpi в логические 170-180. То есть на макбуках кнопки и буквы УЖЕ сильно меньше, чем им положено по дисплейным характеристикам (и в сетку попадают херово, но это другая проблема). Подобрать монитор с правильным dpi и потом скукоживать-раскукоживать на нем картинку софтверно — так могут только умалишенные и настоящие фанатики Эпла (и сам Эпл, оказывается). В итоге настоящие 220 остались только на аймаках, но к ним как раз внешний монитор не нужен. И чего, аргументация?  Короче, цифра 220 взята с потолка — с маками отлично работают любые дисплеи. Если буквы кажутся вам крупными, подвиньте монитор подальше, если мелкими — поближе, епта. А кто будет повторять эти глупости, к тому ночью придет ковбой, засунет револьвер в жопу и провернет там три раза. Все, закрыли тему.",118
"Помните в детстве, запах лета, бег по траве босиком, ноги, мокрые от росы, молоко свежее, парное, прямо из-под коровы, летнее поле, жужжащее пчелами и шуршащее травой на ветру, и как ты бежишь скорее домой, из леса, по полю, через ручей, наступаешь в коровью лепешку, собираешь по дороге охапку одуванчиков, моешь ноги в колонке, босиком забегаешь в дом, а там печка, теплая еще с обеда, и вся семья сидит кто на чем, вокруг телевизора, такого, старого еще, с ручками-крутилками, кто с семечками, кто с арбузом, и ты, затаив дыхание, волнуешься: не опоздал? Не слишком поздно?  Нет, успел. И сразу отлегло, и сразу на душе тепло, уютно и очень спокойно.  И вот в телевизоре начинается передача, на сцену выходит Стив Джобс, тараторит что-то там по-английски, и диктор старается, переводит, но все равно отстает, а ты все равно понимаешь: вот прямо сейчас, здесь, у тебя на глазах, в поселке Голубево Астраханской области, творится история.  Это я к чему? Все, Эпл уже не тот. Нет больше такого ощущения от презентаций почему-то.",119
"Я там угарал в твиттере, мол, что за фигня, статусы для Do not disturb режима. Не просто выключить нотификации, а выключить их с названием. На что мне возразили, мол, полезная же фича?  Не знаю как вы, а я DND вообще не пользуюсь. Точнее, как — у меня полный и постоянный DND и на телефоне, и на компьютере. Все каналы замьючены, все нотификации выключены, приложения-коммуникаторы на компе по дефолту закрыты, звук замьючен. Всегда, а не в какие-то особенные периоды концентрации.  Потому что ну бред же, только вслушайтесь: если я не в Do not disturb режиме, значит я что, в disturb режиме? Беспокойте меня, дергайте, отвлекайте? Странно звучит, да?  Нет, если я работаю, то конечно, меня не отвлекайте. Но и если я отдыхаю, нафига мне чужие заботы? Нет таких нотификаций, о которых нужно было бы узнать в ту же секунду, и нет сообщений, которые не могли бы полежать неотвеченными до вечера. Да, некоторые люди думают, что отвечать на директ нужно сразу же, и ожидают этого от окружающих — но это их, странных, проблемы.  Поэтому я за pull модель, а не push — когда у меня есть время и я об этом вспоминаю, могу дойти до телефона и глянуть, не набежало ли там чего важного.  А могу и не дойти. Значит я что-то более интересное в это время делал. Или просто забыл. Как-то раз я несколько дней подряд забывал проверить почту — лучшее время в моей жизни.  Рекомендую.",120
"Учился я в универе на программиста, и сдавали мы какую-то лабу. Я как прилежный отличник все сделал заранее, скучал и ходил подслушивал, как сдавали другие. И вот сокурсник показывает решение и начинает объяснять его словами (дело было на языке Эс): «тут вот я делаю #typedef float my_float, чтобы если потом захотелось поменять, то это делалось в одном месте». И препод такой — ага, ага.  Конечно, лабу эту после этого дня никто ни разу в жизни не открывал.  Потом я попал на работу на Джаве, а там такая практика: каждому классу делаем интерфейс, а рядом кладем класс, его реализующий. Типа, вмето BedaController делаем IBedaController и BedaControllerImpl.  Я, наивный, спросил: а нафига? Нафига интерфейс, если реализация только одна? Мне сказали, что это best practice на случай, если понадобится вторая реализация.  Как часто на самом деле появлялась вторая реализация? На моей памяти — ни разу.  Потом я работу поменял, и вспоминая, как мы намучались с Гибернейтом на предыдущей, спросил «архитектора»: нафига вы тоже в это вписались? Он говорит: ну в смысле? А вдруг базу захотим поменять? А Гибернейт ее абстрагирует.  И что, сколько раз меняли уже, говорю? И, главное, зачем ее вообще менять?  Чувак реально психанул, сказал что я дебил если очевидных вещей не понимаю, и убежал. Контора через пару лет закрылась, преимущества абстрагированной базы ее почему-то не спасли.  Это я все к чему? Все очень просто: никто не может угадать будущее. Это вроде бы очевидно, но сплошь и рядом люди пытаются сделать именно это, и очень часто ошибаются.  Поэтому надо из этой простой предпосылки и исходить: мы не знаем, что нам понадобится через час/месяц/год, а значит, и готовить заранее ничего не надо.  Придет время выделить интерфейс — возьмешь и выделишь. С современными ИДЕ это совсем не страшно. Придут к тебе с просьбой добавить вторую базу — засучишь рукава и добавишь. А пока не пришли, ты и силы зря потратишь, и нормально все равно не сделаешь.  Потому что расширямость без настоящей потребности — она такая, мнимая. Когда приходят за расширением по-настоящему, быстро понимаешь, что все, что ты городил до этого «впрок» — это влажные фантазии, и в реальном деле они не особо-то и помогают.  А когда есть настоящий запрос, то и делать проще — ты уже знаешь, что конкретно и почему, и решение пишется само собой. Потому что фантазировать не надо.",121
"Нажать и подержать — самый уебищный жест из возможных.  Это все треклятый минимализм, когда рисовать простые и видимые контролы стало почему-то стыдно, а вот заставлять людей заучивать магические комбинации из свайпов N пальцами с четырех сторон света в вакууме — почему-то нет. Желание спрятать действие, наложенное на отсутствие правой кнопки в указательном пальце.  Свайпы, впрочем, ладно: раз в неделю затупишь, но потом или вспомнишь, или нагуглишь. Но нажать и подержать? Это абсолютно проклятый жест по одной простой причине: он заставляет человека ждать.  Я (и любой другой уверенный пользователь писи) могу десятки жестов в секунду генерировать, если компьютер за мной поспевает. И ладно если бы он тормозил от сложности задачи или убогости разработчиков — их хотя бы можно понять!  Но «подержать» — это абсолютно специально и умышленно наложенное вредительство, не обусловленное ничем. Участок 10 км/ч посреди автострады. Вечность, за которую я успеваю написать и переписать в голове два поста. Канализационный люк без лестницы, который нельзя обойти. Сломанная нога в чемпионате мира по бегу. Непонятно откуда взявшийся перекус на чай в смертельном бою двух самураев.  Я не фанат, короче.",122
"Я тут упражнялся с Zig и Rust-ом и нашел ключик -march=native, который, как я понял, компилирует код специально под текущий процессор. Ключик этот поднял перформанс Раст версии раза в два, что нехило, да? (В Zig он включен по умолчанию).  Я так понимаю, это связано с тем, что компилятор смог заюзать продвинутые инструкции конкретно моего процессора, а без него компилял только в самый общий сабсет x86_64.  В связи с чем вопрос: а как это работает в жизни-то? Вот я скачиваю бинарник программы, написанной на каком-нибудь C/C++/Rust/Go/Haskell, нажимаю на .exe, и что, она работает в два раза хуже, чем могла бы на моем конкретно процессоре?  Если нет, то как тогда это работает? А если да, то какой вообще план? Нахера процессоры вообще развивать тогда?  И правильно ли я понимаю, что JIT-ы потенциально могут эту проблему обойти, потому что генерят машинный код в момент запуска? Обходят ли? Ну там JVM/.NET/V8?",123
"Немногие знают, но у цветов в компьютере есть единица измерения. Вот эти вот R, G, B ∈ {0..255} это только пол-дела. Так же как и у «1 км» есть «1» и есть «км».  У цветов вместо «км» цветовое пространство — sRGB, DCI (P3), Rec.709, Adobe RGB. Смысл такой, что (255, 0, 0) в sRGB это совсем не то же самое, что (255, 0, 0) в P3. Ну или наоборот, фирменный цвет Кока-колы это (244, 0, 0) в sRGB и одновременно (224, 48, 33) если в P3. Хотя физически это один и тот же цвет. То есть при переводе цифры меняются, а цвет (физический) остается.  А дальше начинается цирк под названием «угадай, где мы проебали размерность». Ну знаете, когда в физической формуле вы считали рост, а получили кг/см³.  Цветовые пространства есть где? В фотоаппарате, в картинке с фотоаппарата, и в мониторе (ну, и в принтере). Можно предположить, что все они одинаковые, и нигде ничего не конвертировать. Тогда (и только тогда!) если они действительно одинаковые, это даже будет работать.  Так оно и сходило программистам с рук: мониторы-то все были sRGB, а остальное под них подстраивалось. Поэтому взять непонятно откуда три цифры и положить эти же самые три цифры куда-то еще считалось вполне нормальным.  Блин, для этого даже термин специальный придумали — Unmanaged Color Space. Это значит что мы берем значение в километрах, отрезаем от него единицу измерения и подставляем в формулу вместо градусов цельсия. Готово, вы великолепны!  Unmanaged Color Space — это как если бы на телевизоре была на полном серьезе опция «показывать хуйню». Цветовое пространство есть всегда, алло! Если закрыть глаза, оно не исчезнет.  Но как же, скажете вы. Я вот пишу на сайте #00FF00, чтобы покрасить ссылку в синий, тут нет цветового пространства же? Ну, во-первых, #00FF00 — это зеленый, а во-вторых, есть. sRGB как раз. Все цвета во всех местах в веб-программировании указываются в sRGB. Это, конечно, пост-фактум решили, но хотя бы решили.  Свинью программистам подожил Эпл, когда решил, что может сделать монитор покруче, чем sRGB. Тут-то непонимание происходящего и полезло наружу. Например, Файрфокс показывал один и тот же hex-цвет по-разному в разных местах: на color, на градиенте, на sRGB картинке с цветом, на не-sRGB картинке с цветом и на видео. Все рендерились по-разному, блин!  Проблему усугублял тот факт, что пресловутый P3 на практике очень близок к sRGB. Добавьте сюда внешнее освещение, неточности монитора, настройки, Night Mode, True Tone, короче, отличить (0, 255, 0) зеленый в sRGB и (0, 255, 0) зеленый в P3 непростая задача, если только их специально рядом не поставить.  Поэтому, собственно, никто и не трубит тревогу и не гнобит популярные приложения за неправильную интерпретацию цвета. Точно так же, как во времена раннего Макоса (гамма 1.8) легко можно было открыть картинку с Винды в гамме 2.2 и ничего не заметить. Чуть засвечено, но кто ж его знает, как оно на самом деле должно быть. Программистам было настолько на это пофиг, что сам Эпл прогнулся и поставил в итоге Виндовую гамму в 10.6.  А сегодня легко можно вывести sRGB буфер на DCI-P3 монитор и никто не пикнет. Цвета чуть выжжены, но как ты узнаешь об этом, если рядом не поставишь sRGB монитор?  Не верите? Мак 2016+? Пользовались Файрфоксом, OBS, Фигмой, Идеей? У меня для вас плохие новости.  Мораль какая? Когда вы жмете кнопку на фотоаппарате, он пишет на SD-карту циферки. Это циферки в каком-то конкретном цветовом профиле, который он пишет в тот же файл. Когда вы шлете картинку на монитор — он их покажет тоже в определенном цветовом пространстве, поэтому их нужно в это пространство предварительно сконвертировать. Нельзя взять (255, 0, 0) из sRGB картинки и послать (255, 0, 0) на P3 монитор — вы увидете сильно более яркий красный.  Зато если все сделать правильно, то монитор будет стрелять в вас точто такими же фотонами, какими стреляли в фотографа трусы японской школьницы в момент спуска затвора на фотоаппарате. Вы увидите физически тот же самый цвет.  Разве не круто?",124
"Самое проклятое изобретение в IDE/редакторах кода это нотификации. Казалось бы, жили спокойно, писали код, но тут кто-то придумал что надо бы о важных событиях пользователя оповещать, как в телефоне. И сделали нотификации.  А нотификации это что такое? Это когда программе от тебя что-то нужно. То есть ты работаешь, занят своим чем-то, и тут ба: чувак, оторвись, у меня к тебе важное дело.  И ладно бы это какой-то эфемерный попап был, который пропадет через секунду. Самый треш пошел, когда в VS Code сделали целый нотификейшн центр блин! В котором, натурально, все эти хотелки копятся и их нужно разгребать. Да, даже неактуальные. А не будешь разгребать – будет тебя счетчиком непрочитанных доставать.  То есть модель работы сменилась с «тулза делает то, что мне нужно» на «я разгребаю хотелки тулзы, которая может прервать меня в любое время».  «Но как же!» — скажет неравнодушный читатель. «Иногда ведь и правда нужно пользователя о чем-то оповестить!».  Не нужно. В Sublime Text вообще нет механизма ни для каких нотификаций, даже для попапов. И ничего, работает как-то, пользу приносит.  Все эти оповещения — они от неуверенности в себе и от желания напомнить о себе, навязать пользователю еще раз свое присутствие. А не от какой-то реальной необходимости.",125
"Вообще программирование покатилось вниз по наклонной, когда разрешили вещи от программиста прятать. Типа, вот явное – то, что написано в буквами в файле, буквально. И все остальное, неявное, что нужно держать в голове. Например, «автовыведенные» типы в ML-е, или ресиверы в Котлине, или проперти синтакс, который на самом деле зовет методы, или перегрузка операторов, или автоматические конверсии типов в Скале.  Проблема в том, что это самое «неявное», незаписанное есть только в голове того, кто писал этот код, и то недолго. А код, как известно, в сто раз чаще читают, чем пишут. Поэтому прятать что-то – плохая идея.  Тут даже ИДЕ не помогает, потому что когда ничего не написано, то и мышкой нажать не на что.  Тяжелый день на работе, ага.",126
"Вообще программирование покатилось вниз по наклонной, когда в 90-е гг. стало ясно, что на Западе его вытесняют мощные фирмы С++. А когда в 2000-е на рынок вышли мощные и быстрые системы, способные работать на старых компьютерах, программисты начали понимать, что в России их навыки никому не нужны. Так вот, я считаю, что надо сделать все, чтобы остаться. Надо быть конкурентоспособным на мировом уровне, надо использовать современные методики... — Это уже сложнее. — Я не знаю, как это сделать. У меня есть несколько идей, которые пока не реализованы.  Осторожно! Текст выше сгенерирован компьютером. Понравилось? Поняли что-нибудь?  Вообще нейросети классно, особенно в задачах распознавания. Но вот именно в генерации не очень понятно, какой должен быть переход от складывания бессмысленных предложений к сильному ИИ (или какая у них конечная цель?).  Те, кто предрекают, глядя на это, что нас всех скоро заменят компьютеры, забывают, что упаковать что-то под требуемую форму — действительно, автоматизируемая задача, но также и самая простая часть работы человека. Форма вообще имеет смысл, если внутри есть хоть крупица смысла, содержания. А без него ты просто потратишь ресурсы впустую на расшифровку. Как говорили в одном хорошем фильме, «движение есть, прогресса нет».  С другой стороны, половина текстов в интернете (да и в книгах) примерно такого же уровня — читаешь, читаешь, а зачем – непонятно. Так что может быть, это ближе к человеку, чем мне кажется?",127
Мой любимый способ троллить джавистов следующий:  — Зачем вы делаете геттеры/сеттеры? — Чтобы в будущем иметь возможность засунуть в них функциональность. — Но у вас же лучшие в мире ИДЕ? — Да. — Понадобится засунуть — зарефакторите.  Молчание.,128
я сам с первомайки с локтем пересекся у меня знакомый работал ну типа телохранителя на алтае как раз я сам алтайский мне говорят иди поздоровайся я говорю кто он такой чтобы здороваться мне объяснили вообще такой человек выходит из машины рубашка кое-как застегнута его охрана подхватила он мне наобщеал много про все забыл но он видно что человек непростой там же вся территория частная там всякие пилорамы мастерские на него русские работали и таджики они перебегали чтобы у себя в армии не служить двадцать пять лет ну они нормально там зарабатывали сотку делали он им говорил двенадцать часов камеры выключайте работайте на себя ну и все там понимаешь да легковушки грузовые без налогов бумаг ничего не платили  я тут женщину вез у нее сын инженер молодой парень устанавливали вышку 5g провод внутрь провалился он говорит давай откроем начальник говорит нет нельзя открывать надо позвонить сначала ушел звонить отошел чтобы не слышно было ну парень все равно крышку открыл смотрит с обратной стороны а там  там наклейка большими буквами COVID-19 ну он крышку закрыл вышку установили уволился потом сразу без объяснения сейчас в офисе работает ковидом переболел я вообще спросил говорю у вас вышки рядом есть он говорит ну да как раз рядом с офисом и оно так получается что как раз вокруг вышек люди заболевают они распыляют 5g этот он же для медицины изначально 5g этот кто придумал вообще 4g прекрасно ловит везде зачем эту 5g ставить только чтобы распылять распылять  сша дроны запускало на границе с китаем эта новость день в эфире была а потом ее отовсюду убрали потому что наши спецслужбы дроны перехватили потом и на сша обратно отправили у них там люди мрут маски а что маски ну вы вот в масках сидите это тоже американский план их ввели чтобы ковид распространять я сам в хим войсках служил понимаю о чем речь база мир знаете может там еще этот метеорит упал тоже не случайно же да именно там из всех мест где мог упасть именно там где пол земли накроет  первый укол ставят они тебя заражают а потом второй уже тромбоз вводят у меня женщина знакомая поставила вакцину умерла через три месяца закупорка там то ли двадцать до ли двадцать два дня ждут смотрят если не умрешь ли потом решают уже что тебе вводить эксперименты ставят в первом уколе там же сам вирус и вводят то есть по сути принудительно заражают у меня самого например непереносимость хлоридов я как-то головой ударился сотрясение положили в больницу и начали хлориды вводить я говорю зачем мне не нужно они же сосуды расширяют у меня и так уже широкие сосуды  я вообще вез мед работников из кольцово спросил что они думают они говорят рано пока это мед работники они над ковидом работают там у них в кольцово госпиталь открывают эксперименты будут ставить это на нас экспериментируют идет чистка это как гитлер в великую отечественную чистил арийскую расу от хромых и убогих истреблял эксперименты ставил путин тоже хотя это не только у нас же понимаете идет чистка это все делается чтобы людей в черных мешках хоронить  я сам бывший мент ну как мент фсб у меня дед берлин брал умер в сто лет сам в гроб лег но я ко всем нормально сейчас немцы вообще пофиг знакомый в германии знакомый с туберкулезом десять лет прожил у него органы сгнили весь изнутри гниет есть такая болезнь может за десять дней сгнить на таблетках  я вот видите маску не ношу каждый день за рулем и ничего не заболел у мужчин говорят после укола через два поколения потомства не будет так что я лично для себя подожду пару лет присмотрюсь что как,129
"Посмотрел видео с WWDC 1997 года, где Стив Джобс отвечает на вопросы зала. И вот что интересно (с точки зрения мотивации): кажется, все, о чем он переживал, это делать хорошие вещи.  Не программистов развлекать. Не деньги зарабатывать. Не «быть different». Не изобретать все самим. Не захватить как можно больше областей. Не планировать устаревание на годы вперед.  Знал как сделать хорошо — делал. Не знал — не делал. Если хорошо делал кто-то другой — отлично, можно не делать тоже.  Даже рекламу давать не хотел — говорит, если сделаем хорошо, нафига реклама? Реклама — это когда прокисшее говно продаешь.  В искренность мотивов я поверил, короче. Вот эта вот сквозная мотивация, когда глава на самом верху всей софтверной компании переживает ровно о тех же вещах, что и рядовой пехотинец^W пользователь в самом конце цепочки. Не на словах, причем, а по-настоящему. А все остальное приложится.  Стоп, так а разве не все продуктовые компании хотят хорошо делать?  Не все.",130
"Самая непонятная до сих пор для меня штука — даже более непонятная, чем редакторы маркдауна, — это превью маркдауна.  Ну, знаете, раз есть формат, ему нужна и ИДЕ, да? Так у маркдауна появились специализированные редакторы, хотя сама идея формата ровно в том, что никакой специальный редактор ему не нужен, что писать можно где угодно.  А раз появились редакторы, то им нужные какие-то фичи, да? С этим еще тяжелее. Ну можно слова жирным/курсивом покрасить. Можно шорткат Cmd+B сделать, который ставит звездочку до/после выделенного сегмента. Не очень убедительно, да?  Это понимали и разработчики так называемых редакторов. И тогда они решили: о! А давайте сделаем превью. При том что маркдаун, опять же, специально дизайнился так, чтобы никакое превью ему было не нужно.  Но с такой идеологией редактор не продашь. Так появились двухпанельные редакторы маркдауна, в которых слева — исходный код, а справа — превью.   Выглядит оно, как вы уже догадались, практически неотличимо. Необходимости в нем примерно ноль. Экрана занимает примерно половину. Ломает скролл либо слева, либо справа. Потому что у отрендеренного и сырого текста высота разная лишь _слегка_. Недостаточно разная, чтобы это хоть на что-то существенно влияло, но достаточно, чтобы раздражать рассинхроном.  Но, если ты всю жизнь делал микроскопы, а тебе покажут слона, ты все равно пойдешь и сделаешь для него микроскоп.",131
"Щас не пугайтесь, буду рекомендовать стихи. Ага, ага, сейчас бы вздыхать о запахе сирени и ветерке улыбки на губах, а не вот это вот все.  Но нет, это другое. Ну то есть как, в каком-то смысле точно такое же, только хорошее.  Во-первых, это сай-фай стихи. Пора уже признаться родителям и себе, вы же все программисты, как и я. А у программистов безусловная любовь к космосу и сайфаю, без нее просто в профессию не берут.  Во-вторых, у них есть уникальное качество — они разбирают тебя на кусочки сразу, без предупреждения и каких-либо видимых усилий.  Жизнь же как устроена? Чем дальше, тем больше человек обрастает защитными слоями скуки, иронии, пессимизма, юмора. Глобальная задача искусства — пробраться через этот защитный механизм, снять на время защиту и дать что-то почувствовать. Обычно это дается с большими усилиями и невпечатляющим результатом — смотрел два часа фильм или читал десять часов книгу, хорошо провел время, но почувствовал может быть легкое щекотание приподнятого в лучшем случае одного-полутора слоев.  А тут короткий двухминутный стих просто проходит сквозь все возможные защиты насквозь, даже не замечая их, как спица через вязаный свитер. Без каких либо ритуалов и отступлений, напрямую дотягивается до маленького, напуганного сердца и трогает его своими пальцами, буквально.  Поэт — Федор Сваровский. Сборник называется «Все хотят быть роботами». Я вот опять прочитал кусочек, чтобы пример сюда вставить, и сижу с мокрыми глазами это пишу. Обязательно гуглите и обязательно читайте.  НА ЛУНЕ  тусклый свет аварийное освещение пустое заброшенное заводское помещение сирены над морем мигают огни удаляющихся кораблей и от давления корчатся стены  ты как будто одна ты вся такая в скафандре обречена тиха  одно выражение твоих глаз достойно рассказа или стиха  в рации раздаются чьи-то команды и уже истерическое ха-ха  тебе страшно как в детстве когда удаляли гланды  а тогда на Луне ты помнишь  сидели спина к спине ни на что не надеясь сжимая в руках лучемёты ожидая прихода бесчувственной и беспощадной киберпехоты  я был тоже очень испуган и этот страх был нашим единственным другом подтверждающим что мы ещё живы  (вот, кстати, куда заводит жажда наживы)  помнишь тогда поскольку все коды взломала венерианская мразь каждый использовал только простую связь  и по открытым каналам свободно неслась всякая ругань  и внезапно ты повернулась прижалась ко мне и тут какой-то голос в наушниках громко сказал: Серёжа, этот горящий порт напоминает мне железнодорожный вокзал в Бердянске в 2075-м году  на секунду всё прекратилось и во временной тишине мы вглядываясь в темноту рассмеялись и тот же голос афористично ещё и вот так сказал:  на Луне Серёжа как на войне кстати, у тебя обгорела рожа  а мы такие сидели спиной к спине",132
"Давным-давно была у меня команда, и я ей, получается, руководил. Ну то есть как руководил — как умел, так и руководил.  А умел я плохо. Забирал самые интересные куски себе, решал по реализации чужих задач, блокировал, фигачил странные доморощенные решения без документации и заставлял всех ими пользоваться, докапывался до мелочей на код ревью, переписывал уже написанный другими код по своему вкусу.  Не знаю, как ребята это терпели, но в конечном итоге высказали мне все что думают. И я крепко задумался.  А потом карма совершила полный круг и я сам попал в команду, где я уже был рядовым программистом, а начальник как раз ровно таким, мнээ, лидером, как я пять лет назад. И это, надо сказать, экспириенс не из приятных.  Страдая в своем положении, я наткнулся в Твиттере на Rasmus Andersson, который постоял у истоков Спотифая, придумал Графкуэль, начал портить Дропбокс, порисовал Фигму, сделал шрифт Интер, а потом пошел нахер^W^W стал чилить в свое удовольствие, называя это модным словом Individual Contributor (IC). То есть нигде не работать, делать то что интересно и делиться с миром. Просто потому что ему так комфортнее.  И тогда я понял, что вот она, моя проблема — я тоже в душе Individual Contributor! То есть люблю делать все по-своему, никого не слушать, не люблю убеждать, зато умею в опенсорс и деливери. Правда, в отличие от Расмуса, я не заработал свои сто мильенов будучи двадцатилетним и поэтому не могу расслабиться и уйти на пенсию.  Мораль очень простая — все люди разные, кто-то прирожденный руководитель, кто-то индивидуальный предприниматель^W контрибьютор. Последних (включая меня) к людям подпускать нельзя, конечно, но и для них что-то можно придумать.  Кстати, сегодня в Джетбрейнс началась летняя стажировка, и у меня под руководством два студента. Надеюсь, руки все помнят. С богом!",133
"Обожаю смотреть, как большие компании не могут повторить даже минимальные продукты от индивидуальных контрибьюторов/небольших стартапов.  Типа, какой-нибудь Git плохо скейлился на монорепы Гугла-Фейсбука-Амазаона, и они страдали, какие-то подпорки делали, вместо того чтобы сесть и написать такой же Git, но для монореп.  Или знаменитые потуги Гугла сделать мессенжер. Казалось бы, что там может не получаться, это задача уровня крестиков-ноликов, фронтендеры на таких фреймворки тестируют. Но нет, не получается, не может Гугл родить, как ни старается.  И так во всем. Берут какую-то технологию (опен-сорсную причем, суки), тыкаются, мыкаются, неудобно, а поправить не могут. У вас там пятьдесят тысяч инженеров работает (над чем, кстати?), это целый город, возьмите десять, пусть они посидят годик, сделают нормально, и вам же самим удобнее станет.  Но нет, это так не работает. Во-первых, в компаниях даже самых гигантских размеров почему-то никогда не найдешь даже двух свободных человек. Почему — никто не знает.  А во-вторых, даже если найдешь, они ничего не сделают. Ну, может, технически что-то сообразят, но тоже скорее всего, кхм, не мирового уровня. А дальше это просто никуда не пойдет, потому что не секретного соуса не хватает.  Какого? Да хз, знал бы, был бы миллионером, наверное. Но смысл такой: даже большая успешная айти компания не умеет делать ничего кроме того, что она один раз успешно сделала.",134
"Проклятие Джавы распространяется не только на десктопные UI, но и на билд-системы.  Ant, кажется, был ничего? Эдакий make, только писать надо на XML (времена были тяжелые, XML казался хорошей идеей). Ну я не пользовался особо, но видел.  Где-то начиная с Maven что-то пошло не так. В Maven впервые в полную силу была реализована идея «ты что-то пишешь, а потом оно где-то в совсем другой момент используется». Типа, твои действия привязываются к stages, но stages ты явно не вызываешь, они вызываются неявно, когда ты вызываешь команды, причем пачками. То есть тебе нужно не просто куда-то свой плагин вставить, но и убедиться, что он не вставился туда, куда не нужно. Короче, сложно, я за 15 лет так и не разобрался.  Лучше всего абсурдность Maven подчеркивает Lein, система сборки для Clojure. Lein сел на ту же инфраструктуру, что и Maven, буквально: в те же репозитории ходит, те же jar-ки использует. Но при этом Lein это самая простая, логичная, лаконичная, удобная система сборки из вообще всего, что я когда-либо видел (как и многое в Clojure, впрочем). То есть понимаете, да? Делает то же самое, использует те же вводные, но делает это НОРМАЛЬНО. А джависты — ну, джависты это джависты.  Так вот. На Maven мысль, к сожалению, не остановилась. XML начал потихоньку умирать (спека на 125 ТЫСЯЧ букв, кто ж такое вытерпит?), чем заменили бы его здравомыслящие люди? Ну, JSON-ом, наверное? YAML в худшем случае. Ну это здравомыслящие. А джависты взяли Groovy, язык, нигде вообще не использовавшийся в принципе. Потому что могут.  Так появился Gradle. Groovy, конечно, шаг вперед по сравнению с XML все равно. Но вот чего не учли создатели: на Groovy стало очень удобно программировать билд. На Maven программировать тоже можно было, но гораздо неудобнее: надо плагин создавать, компилять его как-то, выкладывать куда-то публично, и только потом использовать.  А вот на Груви можно писать прям в билд-файле. И это катастрофа. Потому что любят Джава-программисты больше всего? Правильно, писать абстрактный код. И вот это катастрофа. Билды превращаются в свою отдельную систему, с функциями, классами, взаимными импортами, умолчаниями, абстракциями, архитектурой. Архитектурой, блин! В билд-файле! Хуже того, она и построена еще вся на умолчаниях: ты что-то куда-то добавляешь, а потом оно где-то совсем в другом месте, никак не связанном с первым, тебе аукнется. Как это понять? А никак, надо знать заранее.  Я уж не говорю про всякие мелочи, типа того, что Gradle сам себя скачивает, отдельно в каждый проект. То есть у начинающего Джава программиста в среднем в системе стоит пять-десять копий Gradle одновременно.  Или, например, у Gradle три конфига вместо одного. Почему три? Да фиг его знает. Но запомнить где что я тоже так и не смог. Просто щелкаю их все по очереди, пока не найду то что надо.  Котлинисты, кстати, знаете как решили эту проблему для себя? Никак, лол. Заменили Groovy на Kotlin, оставив все остальные проблемы ровно на том же месте, где они изначально лежали.  А теперь я расскажу вам о той самой идеальной билд системе, которая порешала все недостатки Maven и Gradle и сделала жизнь джавистов и котлинистов счастливой. Вот она:",135
"Почему-то когда приходишь к программисту и говоришь, что вот код хреновый, он/она сразу из программиста превращается в бизнесмена: бизнесу это не нужно, нужно было выйти на рынок как можно скорее, плохой продукт лучше, чем никакой, зато код решает проблему, так все сейчас делают.  Что все может быть и правда, но вопрос-то не об этом. Код почему хреновый?",136
"Никогда не понимал формулировки «просят написать заявление по собственному желанию» (уволиться самостоятельно то есть). В чем прикол этого собственного желания, если оно тут явно не собственное? Вам надо, вы и увольняйте, зачем меня о чем-то просить?",137
"Из всех активностей, которыми я более-менее активно занимаюсь, а это: писать тексты, рисовать интерфейсы, дизайнить, учить, изучать, выступать, смотреть кино, играть, стримить, знаете, какая мне нравится больше всего?  Писать код.  Да, вот так вот просто. Нет ничего круче ощущения, когда только что написанная программа запускается в первый раз, осмысленно, и начинает работать. Пыхтит, сыплет строчками в терминал. Не слишком быстро. Не слишком медленно. Не слишком много, но и не мало. Не долго, но и не мнговенно. С чуть сломанным ритмом, с частичкой случайности, как колебания атома. Процесс идет, работа делается.  И вот она завершилась. Объявила ответ. Только что в мире была лишь запутанная паутина исходных данных, с которыми бесполезно было пытаться что-то делать руками. И вот ты сам, единолично, прямо здесь и сейчас создал себе инструмент, подспорье, которое работает лучше тебя, и оно распутало ту самую паутину и привнесло в мир какую-то ясность, какой-то ответ.  Обычно это немного, но это заметно, и это строго больше, чем было. Энтропия уменьшилась. Тепловая смерть отложилась. И это сделал лично ты. Потому что тебе нужно было что-то организовать. В чем-то разобраться. Что-то упорядочить. И эта сила у тебя есть, в твоих руках, в пальцах. И это больше, чем может человек. И больше, чем может компьютер.  Так что да. Дайте мне терминал и компилятор, и я может не переверну мир, но на сутки пропаду точно. А остальное неважно.",138
"В комментах к предыдущему посту спросили, неужели я настолько хорошо рисую интерфейсы, что мое «дешевое» время как дизайнера настолько эффективно, чтобы заниматься им вместо «дорогого» кодинга? Отвечаю.  Во-первых, ребята, очнитесь. Время дизайнера не «дешевое», это самое дорогое время, которое в разработке продукта вообще может быть. Всем глубоко пофиг и насрать, что там у их ежедневных программ под капотом: лапша, не лапша, монолит или микросервисы, электрон или позитрон, json или xml, хаскель или джаваскрипт, стратегия или фабрика. Вот серьезно, мем с Райаном Гослингом, объясняющим девушке на вечеринке.  А на то, как продукт выглядит и как работает – нет, не пофиг. Неправильно поставленная кнопка может буквально разорить компанию. Сложная навигация — похоронить продукт. Неприятный визуал — сдержать рост. Я уж не говорю про просранные пользовательские сценарии или, прости господи, про левую идею продукта.  А баги — ну, а что баги? Любую мартышку посади, она будет разгребать тебе жиру и фиксить, если что-то серьезное. Вы же не думаете, что нужно каким-то особо умным быть, чтобы этим заниматься? Занудным, да, склонным к монотонной работе — тоже да, но только и всего, ум тут не особо нужен.  И я так же надеюсь, что вы не думаете, что вот те самые продукты, зарабатывающие «серьезные» миллиарды, что из этого каким-то причудливым образом следует, что у них под капотом тоже что-то серьезное? Да самый скучнейший на свете код там под капотом, а программисты, которые его написали — самые взаимозаменяемые люди на свете. А вся разница между джуном и сеньором сводится к тому, что сеньор ворчит больше, делает меньше, обходится дороже и носит пончо.  И серьезно, в реальном мире, где люди живут, а не дроны из силиконовой долины, всем глубоко пофиг, что эти программисты там себе думают и какие идеалы себе строят, лишь бы копались в своей песочнице и не сильно отсвечивали.  Что не отменяет того, что программировать я по-прежнему очень люблю и, хочется думать, умею. Просто не надо думать, что это имеет какую-то глобальную ценность для кого-то ещё кроме меня.  Во-вторых, по фактам. У любой программы, которой вы пользуетесь, есть интерфейс. Да, даже у CLI утилит.  Теперь, вы можете игнорировать этот факт и не прилагать к дизайну этого интерфейса сознательных усилий. Но это не значит, что интерфейса у вашей программы не будет. Это значит, что он будет случайный, а в среднем это значит, что очень плохой.  Ну а дальше сама польза продукта может быть настолько высокой, что люди закроют глаза на проблемы интерфейса и будут им пользоваться скрипя зубами. Мы все знаем такие примеры: Git, Kubernetes, JavaScript. Такие продукты можно пересчитать по пальцам одной руки.  Дальше собственно вопрос, на что вы собираетесь делать ставку: на то, что вы случайно найдете того самого золотого гуся (которых, вообще-то, единицы, даже не десятки) среди триллионов возможных идей и всем будет пофиг на интерфейс? Звучит это как разумная, рациональная стратегия?  Или все-таки заморочитесь и сделаете нормально, чтобы люди могли пользоваться вашей программой не превозмогая себя, не вопреки?  Я уж молчу про то, что умение рисовать интерфейсы делает код лучше. Потому что в дизайне кода все те же принципы, что и в дизайне UI: коммуникация, потребности, человеческие ограничения, эргономика. Да и вообще, полезно хоть немножно что-то про людей понимать, даже если код пишешь — коллеги-программисты, в конце концов, они ведь тоже немножечко люди.  А, ну и отвечая на исходный вопрос. Нет, я не хорошо рисую интерфейсы. Но это не значит, что этим не нужно заниматься.",139
"По поводу последнего поста, надо все-таки прояснить. Вы уж меня поймите, это не специально спроектированный наброс, я не хотел никого специально спровоцировать. Так уж у меня мозг работает, к сожалению: я думаю текстами. Сначала нужно написать, а потом я уже смотрю со стороны и понимаю, что же я на самом деле имел в виду.  Имел я в виду примерно следующее. Конечно, я никого не считаю бесполезными, ни дизайнеров, ни программистов. Не знаю, почему это так прочитали дизайнеры. Нет, все профессии нужны, и пост в первую очередь это реакция на высказывание, что время дизайнеров априори дешевле времени программиста. Я был раздражен и немного перегнул в другую сторону. Маркетинг все равно в 10 раз уделывает любые наши потуги, и дизайнеров, и программистов 🙂  Во-вторых, месседж там все-таки был, но очень сильно замаскированный, так что логично, что его никто не прочитал. Попробую еще раз.  Предыдущий пост — моя собственная рефлексия по поводу своего места и своего собственного развития, и ругаю я там в первую очередь себя, хоть и обобщил немного из-за страха слишком открыться.  А предмет рефлексии — что, собственно, делать программисту с 15-летним опытом? Первые два года ты, понятно, джун, учишься, смотришь, что бывает, совершаешь ошибки. Еще года два-три ты мощная рабочая единица, делаешь что просят, можешь решать задачи от и до, клепаешь проекты один за другим, приносишь максимум пользы. Может повезет даже поруководить кем-то. Пик взаимной эффективности, короче.  Ну вот, а потом что? В этом и был главный вопрос предыдущего поста: бизнесу-то ничего сверх этого не нужно! Понятно, что тебе начнет становиться скучно клепать одни и те же формы, строить сайты, создавать продукты по одной и той же, рабочей, очень эффективной схеме. Получается хорошо, КПД высокий, только программист скучает.  И вот что ему делать? Изучать новые языки. Фреймворки. Экспериментировать. Разрабатывать что-то новое. Дизайнить уникальные системы. Это все классно, интересно, драйвово, но эффективность падает, а бизнесу так это и вообще не нужно. Под это нельзя найти работу. Таких вакансий в принципе не бывает. Как мне сказали на собеседовании в Pitch, когда я вывалил им ворох своих идей по поводу приложения: идеи не нужны, а вот писать код, куда скажут, можешь?  Все, что волнует бизнес — взять что-то готовое, максимально быстро это готовое завернуть, чтобы была хоть какая-то крупица пользы для юзеров, и в печать. Не сделать лучше. Не сделать качественнее. Не совершить прорыв. Не потратить год на ресерч. Этим, как говорится, дома, под одеялом будешь заниматься.  Причем я не говорю, что это неправильно — правильно, к сожалению, я и сам это понимаю. Мне самому бывает противно, когда тут в Джетбрейнс говорят: иди верстай форму, а я ною, отлыниваю, жалуюсь на все на свете и ищу выход энергии и место приложения мозга. Про ворчащего сеньора с эффективностью хуже джуна из прошлого поста — это как раз про меня. В конце концов, та самая форма все-таки нужна, и нужна объективно, а все мои душевные метания чисто моя забота.  И вот что, спрашивается, делать опытному программисту? Куда податься?",140
"Когда-то давно, лет, скажем, 15 назад, я программировал на Джаве. Джава тогда была, ну, не то чтобы новорожденная, но в юношестве точно. И все эти корпоративные «серьезные» программисты только начинали ее окучивать. Spring, Hibernate, Java EE — все это только начиналось.  Ну и вот, на этой волне придумал какой-то лидер мнений Dependency Injection, он же Inversion of Control. Почему названия два? Наверное, лидера было два, хз. У обычных людей это называется просто «передача параметра в функцию», но у Java это обязательно должен быть какой-то паттерн, движение, идеология.  Конкретно это движение возникло из патологической боязни «new» и ответственности. По не до конца ясным мне причинам, код в Java, который что-то на самом деле делает, считается зашкваром. Самый лучший код — тот, который ничего не делает и не решает, а просто перекладывает задачу на следующего. Да, прямо как бюрократический аппарат. Особенно мило на это смотреть, когда все классы пишет один и тот же человек, и перекладывает он работу от самого себя самому себе.  Ну вот, короче, решил я узнать, что за шум. Все-таки я ж архитектор и тимлид тогда был (не то что сейчас), надо держать руку на пульсе. Открыл доку, как сейчас помню, по Guice. Это такая гугловая вариация Спринга, типа, щадащая (да, в Джава мире даже такая большая компания как Гугл не может вырвать пальму первенства по говенности кода у настоящих Java-архитекторов).  Открыл, в общем, читаю, а там пишут: DI это то-то и то-то, new зашквар, фабрики зашквар, присоединяйтесь к революции, удаляйте все свои new Papaya() и делайте IPapaya, PapayaImpl, обмазывайте их аннотациями, заводите Module, реализуйте configure, биндите ваш класс с вашим классом, заводите Injector, инициализируйте модулем (да, даже тут без `new`), и наконец просите у него ваш класс создать. Чтобы точно никто никогда не догадался, кто у вас там кого создает и откуда что берется.  И дальше, внимание, следующая фраза: «Мы понимаем, что вам придется переделать почти все свое приложение. Мы знаем, что это займет много времени. Скорее всего, в середине пути вы начнете спрашивать себя: а зачем я это делаю, не дурак ли я? Так вот, помните: вы делаете это потому что так будет лучше».  Ну я поверил и пошел переделывать. День переделывал. Два. Три. Переделал. Зашибись, думаю. Теперь заживем. Прислушался к ощущениям — неа, нифига не поменялось. Ну то есть добавилась еще одна библиотека. Код запутался еще на один виток абстракции и индирекции. Но в целом — нет, лучше не стало.  С тех пор я Java-архитекторам не верю. Я вообще никому на слово теперь не верю. Если есть предложение, как улучшить код — просто расскажи, в чем предложение. Если оно нормальное, как-то специально рекламировать или убеждать кого-то в его необходимости не нужно — само предложение все скажет само за себя. А если написано «поверьте, нет времени объяснять» — это очевидная наебка и вам пытаются впарить прокисшее говно.  Вообще, всякая «идеологическая правильность» существует только в голове и на словах того, кто вам ее впаривает. В коде никакой идеологической правильности быть не может, код либо работает, либо нет. И уж тем более никакая программерская идеология и «правильность» не стоит простоты реализации и прагматизма. Думайте головой, дышите носом, короче.",141
"Я уже упоминал неоднократно, как выгорел от Джава экосистемы 10 лет назад. Так вот, неделю назад я имел неосторожность ввязаться в живую дискуссию по поводу Ant/Maven/Groovy как раз с ребятами из мира Java. ПТСР стрелял с регулярностью три минуты.  И вот о чем мне эта дискуссия напомнила, и из-за чего, по моему мнению, наша индустрия находится в такой жопе. Да, пример будет про Джаву, извините, это не неделя хейта, просто так получилось, ну вот такой пример под рукой. Я в конце обобщу.  В пылу спора на вопрос, нафига им такая сложная и умная система сборки, Вова Ситников мне ответил: ну как же, вот смотри, у нас есть пятнадцать логгинг фреймворков (ага, xkcd про competing standards как раз с Джавы рисовал), дальше, каждый фреймворк распилен на запчасти, чтобы можно было подключать не целиком, и есть еще энное количество коннекторов, которые переводят один фреймворк в другой. А, еще у этих фреймворков есть версии, и не все версии совместимы друг с другом, а взять можно только одну. А, ну и конечно, все твои _нормальные_ зависимости уже что-то выбрали, скорее всего разное, ты без них не можешь, так что хочешь-не хочешь надо вертеться.  И что сделали Джависты? Они идентифицировали это как проблему. А как серьезные, взрослые программисты решают проблемы? Правильно, пишут код. Ну и пошли и написали код, который якобы в этом разбирается даже без поллитры, а тебе ничего делать не нужно.  Видите проблему? Видите? Да, это именно из-за нее в жопе не только русское кино, но и русское Айти. Да любое Айти, в принципе.  Проблема в том, чтобы вместо того чтобы трезво взглянуть на что-то, что сделано неправильно, признать, что ошиблись, пойти и сделать нормально, программисты просто пожимают плечами, «хм, новый челленж», и идут строить поверх, просто оставив все как было.  Куча несовместимых логгинг-библиотек это не что-то, что можно починить написанием еще одной библиотеки. Если юнит-тесты сложно запустить без системы сборки, которая по сложности вот-вот пройдет тест Тьюринга, это не значит, что надо поднажать в части системы сборки. Проблема не в системе сборки блин!  Это примерно как не убирать мусор в аэропорту: вместо уборки его обносят аккуратными флажками и начинают думать, как бы поудобнее перенаправить пассажиропоток вокруг накапливающейся кучи.  Докер, кстати, прекрасная иллюстрация той же проблемы. Не осилили сложность — подождали, когда компьютеры станут достаточно жирными — начали носить эту сложность с собой и тиражировать в идиотских количествах.  Я, конечно, в той дискуссии про Гредл сильно разгорячился. Но для меня просто удивительно, как взрослые, опытные люди могут быть прекрасными программистами (я уверен) и очень хорошо решать проблемы, но не там, где они на самом происходит, а там, где им удобнее, и в упор не видеть суть. Умножение сложности — грех, за который программистов надо наказывать, а не сертификаты и премии выдавать.",142
"А вообще, если вы, как и я, вляпались зачем-то в Java экосистему, особенно энтерпрайзную, и начинаете все больше и больше испытывать отвращение к программированию, все острее чувствовать абсурдность происходящего и бояться за свой рассудок, помните:  С вами все в порядке. Вы молодец и все делаете правильно. Проблема в консерватории, ее уже не починить.  Также помните, что рядом тоже полно нормальных, адекватных людей, которые создают куда более приятные экосистемы. Такие, в которых люди не соревнуются в том, кто кого переусложнит и у кого Hello World займет больше строчек, сервисов и ресурсов. В которых проекты измеряются не миллионами строк кода, а десятками тысяч, и ни в чем не уступают по функционалу. Проекты, которые зарабатывают миллионы долларов и меняют мир, ничуть не менее «серьезные», вопреки мнению тех самых энтерпрайзных джавистов.  И туда всегда можно перейти, найти свое счастье и душевное спокойствие. Я в свое время сбежал на Питон, потом на Erlang, и в конце концов на Clojure.  В любом случае, бежать к адекватным людям и здравому смыслу было лучшим решением в моей жизни. Рекомендую.  На этом неделя Java в канале официально объявляется закрытой, и мой гештальт тоже. Надеюсь, в следующий раз услышу о ней не раньше чем через еще 10 лет.  P.S. Если вам нормально — ну и классно, просто проигнорируйте этот пост P.P.S. JVM все еще нежно люблю, пост исключительно о java как экосистеме P.P.P.S. Убрал языки, про которые я знаю только понаслышке. Там тоже может быть хорошо, но обещать не могу",143
"Перестаем ныть и переходим к конструктиву. В комментах к прошлому посту спрашивали, как же починить проблему логирования, когда есть 15 разных библиотек?  Действительно, логирование штука очень неудобная, в первую очередь потому что библиотеки. Каждая библиотека выбирает свой фреймворк, вы выбираете 15 библиотек (это еще по-божески) и привет, у вас в приложении 15 разных логгеров. Вот что с этим делать?  Давайте применим дизайнерское мышление и проанализируем ситуацию. Сторонние библиотеки не работают, потому что кто-то нет-нет да и напишет новую, а какой-нибудь глупец соблазнится на сиюминутные преимущества и заиспользует ее, проигнорировав общую картину. То есть сразу нет.  Методом исключения получаем, что логирование должно быть в стандартной библиотеке языка. Иначе никак.  Кстати, в Java логирование _есть_ в стандартной библиотеке, но проблема осталась. Почему так? Почему никто не переехал на java.util.logging? У меня две версии, и подозреваю, они сыграли обе.  Первая — потому что мало сделать новый логгер, надо еще перестать использовать старый. В программировании вообще недооценен процесс возвращения и переделывания того, что было сделано, а зря. Дописывание — да, за милую душу, а вот переписывание не любят. Хотя я, например, обожаю переделывать и переписывать, потому что перфекционист и с первого (и даже со второго) раза нормально сделать не могу (нормально по моим меркам, по меркам индустрии у меня и с первого раза очень неплохо получается).  Вторая версия — что java.util.logging вышел куцым по функциональности в сравнении с «настоящими» логгерами. Мне-то как раз это нравится, а вот Java-программистам, подозреваю, не зашло.  И тут я выскажу радикальное мнение: по мне, так логгинг должен быть максимально куцым. Тот же log4j может: срать в несколько файлов, обкусывать файлы, менять файлы в зависимости от дня недели, фильтровать записи, форматировать записи, грузить конфиги, перезагружать конфиги, варить кофе^W^W. Это полноценный фреймворк, на настройку которого можно потратить не один день.  Что же в этом плохого? Опять же, давайте посмотрим на общую картину (дизайн мышление, помните?). Если логгер умеет делать так много, это значит что он будет делать так много, то есть, все эти настройки будут гвоздями прибиты к вашему приложению.  А это не задача вашего приложения — решать, где я хочу видеть логи, сколько и как часто. Генерить логи — да, пожалуйста, но фильтрация, хранение, организация — это явно другой уровень и решаться должно снаружи. Когда это делается изнутри, это негибко, это лишний функционал и плохая интеграция. Будете в следующий раз пить аспирин после настройки log4j — задумайтесь об этом. 12 factor apps всем, пацаны!  Так что же, как в итоге должен выглядеть идеальный логгер? Идеальный логгер — это println.",144
"Джон Блоу (да-да, тот самый, который Preventing the Collapse of the Civilization) высказывает (ну как высказывает, высказывал, в январе еще) интересную мысль в подкасте On The Metal.  Во-первых, насколько обидно, что мы наконец более-менее унифицировали процессоры, убрали барьер железной совместимости, зато понаставили новых — в этот раз операционных систем. Обидно, что единственное, что мешает взять файл, скомпиленный у меня на компьютере, и запустить ровно этот же файл у тебя на компьютере это какие-то глупые, мелочные детали, эхо войны вендоров ОС и их полная неспособность дружить и договариваться. Хотя процессору, вообще говоря, все равно, и делать он будет в конечном итоге одно и то же.  Во-вторых, по его мнению, появление динамических языков — это своего рода ответ на вот эту вот потребность «взять файл, который работал у меня, и запустить ровно этот же файл у кого-то еще». Понятно, что есть еще аспект «высокоуровневости», но про файл тоже интересно.  Ну и в третьих он считает, что в принципе программы в компьютере плохо дружат. Есть, типа, shell, в котором программы обмениваются строками через пайп, и это стыд, конечно. И есть, причем очень давно, нормальный способ переиспользовать чужой код — C calling conventions и, соответственно, динамические/статические библиотеки.  В общем-то, проблема всех остальных языков, которые не C, в том, что они сделали этот вариант сотрудничества максимально неудобным, и вместо того чтобы дружить с уже существующим кодом стали строить весь мир с нуля. Ну и они не только с С не дружат, но и между собой тоже, так что каждый из них это такой Walled Garden без каких-либо планов на стать чем-то большим.  Такая вот перспектива, издалека. Даже какой-то смысл в WASM появляется, даже не для браузеров, а для обычных десктопных утилит и программ",145
"Главное правило хорошей программы — код должен работать. Любой код, который не запускается регулярно, протухает и ломается. Да, даже если его не трогать. Особенно, если его не трогать. Прям как продукты, хоть и сделан из чистой информации.  Например, в Grumpy Website есть авторизация, которая сбрасывается раз в две недели. Почему? Да потому что это гарантия, что она будет работать. Если бы она жила вечно, то прошло бы полгода-год, кому-то понадобилось бы зайти с нового компа и мы все бы узнали, что авторизация, оказывается, давно сломана. А так она тестируется регулярно и всегда в форме.  Отсюда следствие: общих механизмов должно быть как можно больше, а специальных — как можно меньше. Например, попробовать отправить письмо сразу, а если не получилось — положить в очередь и попробовать позже — мина отложенного действия. Большинство писем будет уходить сразу и даже если очередь сломана, вы сможете долго этого не замечать. Правильно — складывать в очередь всегда и разгребать ее на общих основаниях, без каких-либо «оптимизаций».  Да, анекдот про вылить воду из чайника и перейти к шагу 1 (налить воду) совсем не анекдот, а очень хороший совет. А вы что думали, шутки про программистов — это шутки?",146
"Давайте расскажу вам про главное правило пет-проектов. Главное правило пет-проектов: придумать, как ничего не делать.  Многие программисты могут подумать, что ничего не делать — это что-то автоматизировать. Нет, наоборот, автоматизирование добавляет головной боли, а мы хотим ее избежать. Например, мне в прошлом посте про «пассивный код — мертвый код» порекомендовали не мучать пользователя постоянными разлогинами, а завести тестового юзера и автоматизировать:  «Скрипты. Планировщик в CI запускает тесты, оформленные в pytest/junit/whatever, рисует красивые картинки, срёт уведомлениями, если что-то пошло не так. Надо только определиться, кто отвечает за реакцию на уведомления.»  Это, конечно, путь для нормальных систем, где программистам платят зарплату, чтобы они не дергались и делали то, что сами добровольно никогда бы делать не захотели.  Но в пет-проектах, к сожалению, зарплату не платят, поэтому приходится адаптироваться. Что не так с этим предложением?  Во-первых, очень много работы. Скрипты надо написать, всю эту машинерию — настроить. Во-вторых, очень много мейнтенанса — за CI надо следить, на уведомления реагировать. В-третьих, это все будет ломаться, это надо обслуживать, что явно будет лень делать, т.к. ломается оно всегда не вовремя, а проектом не каждую неделю есть время заниматься.  Трюк с пет-проектами в том, чтобы обмануть себя и успеть сделать что-то, что можно показать людям до того, как ты устанешь и тебе надоест. А тебе устанет и надоест, trust me. Поэтому количество нерелевантной работы надо резать жестко и беспощадно. И поэтому я так доволен решением с авторизацией: работы нет, а тестирование выполняется.  Классическая иллюстрация этого принципа это «не пишите движок блога». Потому что устанете быстрее, чем напишете первый пост. Люди, которые хостятся на Github Pages с готовым шаблоном или на Wordpress — те, которым интересно решить проблему; люди, которые пишут движок — те, которым интересно попрокрастинировать. Поэтому вы читаете этот текст в Телеграмме, а не на каком-то самописном сайте с собственным компилятором — я бы этот компилятор до сих пор писал.  Другой пример из недавнего — Roam Research. Чуваки лет то ли пять, то ли семь сидят без сервера вообще, тупо складывают все в Firebase и ничего, работают, денег подняли. Во всей инфраструктуре нет ни одного сервера. Потом пришел создатель Athens Research, решил склонировать Roam, но еще больше не заморачиваться, и не стал делать даже Firebase. Просто сделал локального клиента, так еще и без авторизации обошелся. И все равно 2 ляма поднял. Легенда.  Все это иллюстрирует один принцип: чем меньше работы вы себе придумаете, тем выше шансы все это закончить. И наоборот, будете делать «по-нормальному», «правильно» — и не закончите никогда. Потому что лето, пиво, дети, диван, друзья или плейстейшн побеждают «отдых программированием» в 100% случаев. Да вообще все что угодно его побеждает. И это нормально, с этим ничего не сделаешь, надо просто придумать, как в таких условиях работать.",147
"Иногда я говорю, что не понимаю чего-то, но на самом деле конечно понимаю, просто несогласен. Но есть вещи, которые я сколько умом ни пытался понять, так и не смог.  Одна из таких — поведение NaN в IEEE 754 и NULL в SQL. Как вы знаете, NaN != NaN, а NULL <> NULL.  И вот тут вопрос: ПОЧЕМУ БЛЯДЬ???  Это классический foot gun же: ты думал, что a == a, и оно почти всегда да, кроме случаев, когда нет. Хочешь проверить, что функции вернули одно и то же? == будет недостаточно. Хочешь тест написать? == не хватит. В мапу положил, а потом найти не можешь? Смотря как ищещь. Передал по сети и сравниваешь JSON с эталонным? Не сравнится, потому что в глубине где-то есть NaN. Про SQL я вообще молчу.  Это столько всего ломает и столько неудобств создает, что словами не передать. Про это надо в каждой дырке помнить, обкладываться if-ми и OR-ами, ну или надеяться, что никогда их не увидишь. Как будто без этого в программировании разочарований не хватает.",148
"Вашему внимаю представляется список сложнейших, практически неразрешимых задач в IT:  - Инвалидация кэша - Придумывание названий - Off-by-one ошибки - Кнопка «Назад» - Плавный скролл - Запомнить позицию скролла - Плавные веб-анимации - Звук на видеоконференциях - Верстка имейлов - Выравнивание текста и иконки - Файловые пути с пробелами - Запоминание «Запомнить меня» - Не писать еще один пакетный менеджер (ой, написал) - Логгирование в Джаве - Юнит тесты в Джаве - Сборка проекта в Джаве - Выделение текста в PDF - Оценка оставшегося времени в прогресс-барах - Кража фокуса - Запись в файл (надежная) - Парсинг XML (надежный) - Переключение режимов монитора в Windows - Поиск пути, куда установлена Visual Studio - Запоминание, на каком мониторе открывать окно - Плавное изменение размера окна - Подключение Bluetooth-наушников - Цветовые пространства - Ввод текста - Вывод текста - Часовые пояса  UPD (из комментов):  - Синхронизация файлов в iCloud - Принтеры - Выход из vi - Счетчик непрочитанных - Настройка фронтенд-проекта",149
"Ох как я ненавижу логины и аккаунты.  Сегодня пытался залогиниться в посудомоечную машину. Почему, зачем? Ну она мне шлет нотификации, мол, пора меня чистить. Я бы и кнопками почистил, но там же иконки, а не подписи — пойди угадай, какая что значит.  Короче, сначала пытался понять, какое приложение вообще ей управляет. Машина — Siemens, поиск по Siemens или там Dishwasher конечно ничего не дал. В итоге листал тупо список всех вообще приложений на телефоне в поисках незнакомого. Home Connect называется.  Ладно, захожу. Оно говорит — нет устройств! Как нет-то, ты же, падла, нотификации мне шлешь.  Ну окей, давайте добавим. Жму добавить — оно говорит: сначала залогинься. Ну епт. А что это за приложение — я в душе не помню, но видимо когда-то его настраивал, раз нотификации приходят.  А раз настраивал — должен был аккаунт создать? Но почему тогда он слетел? Телефон я не менял, приложение не переустанавливал. Жму логин — 1Password — нет аккаунта.  Ну ладно, нет так нет, может раньше не требовался? Жму создать, заполняю блядскую форму на восемьнадцать полей, придумываю, конечно, пароль, ввожу два раза, и емейл, конечно, тоже два раза. И конечно, посудомоечной машине нужно знать где я живу и какой у меня телефон, чтобы полоскать мои чашки. ВСЮ ФОРМУ ДО КОНЦА ЗАПОЛНЯЮ! Все с телефона, то есть максимально неудобно, в квадратике 2 на 2 сантиметра. Жму: создавай.  Создала, говорит. Иди в емейл. Иду в емейл. А там — есть такой аккаунт уже. Попробуй залогиниться, лузер. И все, даже ссылки обратно, сука, нет. А СРАЗУ НЕЛЬЗЯ СКАЗАТЬ БЫЛО???  Иду логиниться. Пароля, конечно, взять неоткуда. Жму восстановить. Иди опять в почту. Иду в почту. Вот ваш временный пароль. О, думаю, зашибись. Его-то и оставлю. Ввожу емейл и копирую пароль. Зашибись, говорит! Но пароль-то временный. Давай новый придумывай. Ну ё-маё, ну что опять началось...  Ладно, придумываю. Соглашается. Пускает. Добавляю, наконец, машину в апп. Безболезненно достаточно, кстати — потому что Я ОДИН РАЗ ЭТО УЖЕ ДЕЛАЛ КУДА ОНА ПОДЕВАЛАСЬ? А? А?  Зашибись, думаю. Теперь-то запущу чистку. Нахожу режим в приложении. Подношу палец к кнопке. ЗАПУСК ИЗ ПРИЛОЖЕНИЯ ЗАПРЕЩЕН. ИДИ ПАСИСЬ.  (Ну или если хочешь можешь еще час в ютубе гуглить, как remote start разрешить, но у меня уже сил не было, честно).  Короче, я просто спалил, какая иконка у режима чистки в приложении.  А потом подошел к машинке ногами И НАЖАЛ ТОЧНО ТАКУЮ ЖЕ КНОПКУ. Просто подошел и просто нажал. Все. Одно действие. НИКАКИХ, БЛЯДЬ, ЛОГИНОВ. ПОЧЕМУ В ТЕЛЕФОНЕ НЕЛЬЗЯ ТАКЖЕ???  Вы удивляетесь, почему «умный дом» никто так не любит? Ну вот поэтому.  Ну и про проблему логинов и того, что их пихают везде, где нужно и где не нужно.  Во-первых, идите со своими логинами нахуй.  Во-вторых, идите-идите, я не шутил.  Во-третьих, если уж вас укушенный маркетологом менеджер заставил их делать, как насчет того, чтобы эти логины не терять? В идеале я хочу вводить логин один раз в жизни. Ну может один раз за время жизни компьютера. КАК ЛОГИН МОЖЕТ ПОТЕРЯТЬСЯ???  В-четвертых, одного поля «email» достаточно ДЛЯ ВСЕГО. Просто email — письмо со ссылкой — нажал — ты внутри. Логин, регистрация, восстановление — все одинаково. В вашей форме БУКВАЛЬНО не должно быть НИ ОДНО поля, кроме email. БУКВАЛЬНО.  В-пятых, на тему логинов обязательно посмотрите «Jonathan Blow tries Razer BlackWidow TE Chroma v2 keyboard» на Ютубе. Руководство к действию.  В-шестых, идите нахуй.",150
"Нанять классных программистов — не проблема. Они сами к тебе бегут, на самом деле. Говорю из опыта.  Вот предложить им что-то интересное, чтобы побежали — вот это проблема.  Так что в следующий раз, когда у вас будут проблемы с наймом, задумайтесь: а тем ли вы в жизни занимаетесь? Хотели бы вы сами у себя работать? А то, может, потому и не бегут.",151
"Если к программам относиться слишком серьезно, можно заподозрить себя в шизофрении. Потому что программы сплошь и рядом говорят одно, а делают другое.  Например, сейчас вот нажал pull в Идее, а она пошла и переформатировала какие-то свои iml файлы, а потом говорит: не могу пуллиться, У ТЕБЯ изменения. Хотя изменения, конечно, не у меня.  Или на грампи был недавно пример: комп перезагрузился, репортер предлагает репортить об ошибке, а собиратель ничего не собрал. В итоге репортить нечего, что делать юзеру — неясно. И зачем было его беспокоить тоже.  Или одна часть системы говорит: сегодня ночью поставлю апдейты! А вторая не ставит их уже неделю, потому что... не знаю почему! Что-то где-то пошло не так, видимо.  Говорят, при Стиве Джобсе было хорошо: программисты делали, что они обычно делали, а он потом приходил, запускал программу ЛИЧНО и на весь бред пальцем показывал: вы че, ребят, ну так нельзя же.  А Билл Гейтс, говорят, как-то раз не смог Паинт с сайта своей же компании скачать, так там было все запутано. Но исправлять не стал, пригрустил просто.  Такая вот разница между Эпплом и Майкрософтом. Была. Сейчас-то они сравнялись, конечно: Эппл отстал, Майки подтянулись. Только вот нормальному человеку идти стало совсем некуда.",152
"Окей, рил толк. Сегодня я вас научу главному правилу хорошего кода, про которое никто не говорит и про которое знают только принципал инженеры. Вот оно:  «Названия переменных и функций должны содержать ровно одно слово.»  Не два, не три, не полтора. Без сокращений (сокращения — отстой), но и без растекания мыслью по вээскоду.  Вот, например, типичный код из публичного собеседования с канала Хекслет:   export const get = (keySequence, nestedObject) => {   const keyArr = keySequence.split('.');   let tempObj = nestedObject;   for (let i = 0; tempObj && i < keyArr.length; i++)     tempObj = tempObj[keyArr[i]];   return tempObj; };   Все классно, к алгоритму вопросов нет, классов не наплодили, что тут улучшишь?  Опытные программисты заметят сразу: глаз вязнет, потому что в каждой переменной по два слова! Очень неудобно читать, потому что вроде бы сущность одна, название ты ее прочитал и морально уже готов посмотреть, что там с ней делать будут, а тут на тебе: читай еще одно слово. Неудобненько.  А вот действительно звенящий идеал кода:   export const get = (path, obj) => {   const keys = path.split('.');   let temp = obj;   for (let i = 0; temp && i < keys.length; i++)     temp = temp[keys[i]];   return temp; };   Чувствуете, как полегчало, да? Как будто из болота на шоссе выехали и свежим ветерком подуло. Так что будете в следующий раз программировать — задумайтесь. И друзьям расскажите.",153
"Вот что я решительно не перевариваю — это needy программы. То есть такие, которые не работают на тебя, а которые ты должен обслуживать.  Возьмем Idea как пример (просто потому что под рукой). Создание файла. Казалось бы — простейшая операция, что может быть тривиальнее? Ну так вот, если нажать Cmd+Shift+N в Idea, она... не создаст новый файл! Она начнет допекать тебя вопросами: а как назвать? А какой тип? А какая версия? А в файле будет класс лежать или интерфейс? И только продравшись через все эти дебри, ты получишь наконец возможность что-то написать. Хотя к этому моменту, наверное, уже и забыл, что.  Но она ведь помогает? Не. Это не помощь. Точнее, помощь, конечно, но предложенная неудобно и не вовремя. Такая, что заколебет больше, чем сохранит сил.  При работе с программой может быть два режима: а) ты отдаешь команды — программа действует, или б) программа что-то от тебя хочет. Первый — абсолютный кайф, позволяет поймать поток и чувствовать себя творцом-демиургом, полностью подчинившим себе инструмент.  Второй — полная противоположность, беспомощный «помощник», который сам ничего не может и дергает тебя по пустякам. В сущности ты, вместо того, чтобы решать свои проблемы и воплощать свои замыслы, переключаешься на нужды программы и делаешь то, что ей в данный момент зачем-то нужно. Ей, а не тебе.  Но ведь это обязательные параметры? Как без них? Да легко! Я нажал «создать файл» — вот тебе пустой файл. Не нравится формат? Нажму и поменяю. Имя неправильное? Переименую. Разница в том, что это происходит, когда мне это нужно, когда у меня возникает эта проблема. У меня, а не у программы.  Другой яркий пример такого абьюзивного поведения: нотификации. Самое страшное, что произошло с ИДЕ, с момента изобретения ИДЕ. Нотификации — это проблемы программы, которые она считает нужным сделать моими проблемами. Часто нотификации даже близко не имеют отношения к тому, что я делаю. Плагин, например, обновился. Или сломалось что-то внутри. Или «псс, парень, не хочешь подсветку синтаксиса поискать»? Ну блин, если бы хотел, я бы пошел и поискал, епта. Или «смотри, смотри, я поняла кажется что тут написано, вот тебе пяток иконок по этому поводу!»  Еще один — настройка проекта. «Сначала все настрой, потом я начну работать» это программный эквивалет вотерфолла, методология, которая, как известно, никогда толком не работала. Я не хочу ничего настраивать кроме того, что мне прямо сейчас нужно, я хочу работать, а не обслуживанием софта заниматься.  Ну и апдейты, конечно. Ну вот любят программисты в момент обновления переделать/передумать/переизобрести какие-то внутренности, а потом гордо мне сообщить, что теперь у меня формат конфига неправильный, или нужно файлы какие-то закоммитить, или просто что больше ничего работать не будет. Но я-то тут причем, зачем вы меня этим мучаете?  Короче, программы, не спрашивайте у пользователя ничего. Дайте ему команды и возможность их дергать. Когда ему понадобится (ему, а не вам!), он придет и сам вас позовет. А до тех пор, ради бога, оставьте его в покое. И не блокируйте работу.",154
"Какой программист не мечтает написать свой блог-движок? Я тоже неспеша в эту сторону думаю, потому что у меня типа есть блог. Но только я не хочу никуда дергаться, пока не пойму не только как сделать «не хуже», а как сделать именно существенно лучше. Пока мысли такие:  Блог в первую очередь про формат. В Телеграм, например, пишется легко и свободно в основном потому, что тут минимум оформления и максимум содержания. Шрифт не выберешь, заголовки не расставишь, картинку не приложишь. Этот аскетизм помогает и писателю (не отвлекаешься от мысли — некуда), и читателю: не надо привыкать к очередному дизайну перед поглощением информации, у всех всё одинаковое.  В Грампи у нас был такой же принцип: одна картинка и минимум текста, без заголовков, категорий, тегов, комментов, вообще без ничего. Я готов объявить эксперимент успешным: за три года писать в него так и не стало обузой. Да, иногда хочется добавить еще одну картинку, или сослаться куда-то, или процитировать, но знаете что? Чем дальше, тем больше ценишь, что возможности ограничены.  Вторая важная вещь для блога — коммьюнити. В Телеграме с этим вышло очень удачно: комменты зашли просто идеально. Я списываю этот успех на простоту комментирования: ты уже залогинен, отправлять сообщения уже умеешь, как будет выглядеть представляешь по прошлому опыту, интерфейс вылизанный и минималистичный. В каком-то смысле канал в Телеграме это не блог, это коммьюнити. Но главное — это весело! Примерно как ранний ЖЖ.  Тут, конечно, возникает вопрос: а как такие вайбы перенести в веб, в персональный блог? Непонятно. Заставлять создавать акк, чтобы комментить — порог великоват. У Бирмана, например, в канале десятки комментариев, а в блоге — единицы. То есть buzzkill примерно десятикратный. Встраивать Disqus? Он очень страшный. Сделать нормальный Disqus? Ну а кто им будет пользоваться? Выносить обсуждение на HN/Reddit/Twitter? Пока самый реальный вариант: да, там есть жизнь, но она как-то отдельно как будто. Плюс HN еще туда-сюда, а вот в Reddit и Twitter сложные ветвистые обсуждения вести мучительно.  Третья мысль — hosted или self-hosted? Хостинг «у дяди» я люблю за простоту, конечно. Но также и не люблю за, понятно, «а что если закроется», а также «а что если я вот такое хочу, а его нет», ну и за «плати нологи^W денюжку».  Хостинг у себя я не люблю тоже, потому что, как я уже говорил, я хочу писать, а не администрировать виртуалки. Даже с one-click deploy (какой-нибудь, допустим, докер) это как будто сложновато звучит, да? Ну и возможностей кастомизации как будто нет, а гемор с виртуалками есть.  Ну а если не one-click, а собирать из исходников, то вот ты его докрутишь под себя, а как потом обновляться? Дизайн я тоже, как правило, хочу свой, а придумать такую платформу, на которую можно было бы спокойно натягивать дизайны (по-настоящему разные, с разными функционально блоками, лайаутами, страницами, не просто темы, короче), не переделывая вообще всего — та еще задача.  Короче, ситуация патовая, я это понимаю, но все равно люблю перебирать в голове эти три варианта, прислушиваться, что из этого действительно кажется важным, а с чем можно смириться. Ну и сталкиваю мысленно друг с другом в попытка придумать какой-то фьюжн.  Последняя проблема, над которой я пассивно ломаю голову (знаю, утомил, потерпите еще чуть-чуть) это как сделать дизайн интересным. На самом деле, когда я слышу «standalone blog», у меня уже непроизвольно скулы сводит от скуки. А если там еще и «черный текст на белом фоне», то просто пиши пропало, они же все одинаковые, как под копирку. Куда самовыражение вставлять?  Но и придумать что-то лучше черного текста на белом фоне сложновато, будем честны. Поэтому вопросик подвешен. И не надо мне писать про желтый фон моего сайта, это не то решение, которое я на самом деле предлагаю. Оно есть, но по другим причинам, и я тоже не до конца с ним счастлив.  Короче, ничего не знаю, предложить нечего, делитесь своими мыслями, спасибо что прочитали!",155
"Реалити чек! У StackOverflow вышел Developer Survey 2021, и я решил собрать тут факты, которые меня больше всего удивили.  Языки:  - JavaScript самый популярный язык (68%) - Rust и Clojure два самых любимых языка (87% и 81% loved) - Objective-C – один из самых устрашающих (27% loved), в одной лиге с VBA, Cobol, Groovy, Perl и Assembly - За Clojure платят в больше всего ($95k), на $15k больше, чем ближайшим конкурентам (F#/Elixir/Erlang/Perl (?)/Ruby, все по $80k). Есть гипотеза, что это потому, что к Clojure приходишь, когда уже набрался опыта и надоела вся эта суета  ОС:  - Мне всегда навскидку казалось, что все разработчкии сидят с макбуками, но это, видимо, мой круг общения. На самом деле 41% на Винде, только 30% на Маке, и еще 25% на Линуксе  БД:  - NoSQL эра прошла, самая популярная NoSQL база — MongoDB — на 28% - MongoDB хоть и не пользуются, но любят (60%). Это к вопросу о маркетинге и DX  Веб:  - React наконец обогнал jQuery (41% против 34%, еще в прошлом году было 37% против 43%) - Самый прибыльный веб-фреймворк — RoR ($77k)  Cloud:  - Несмотря на весь шум, Kubernetes пока всего на 20%  Аналитика:  - Оказывается, четверть (!) всех разработчиков сидят на некоей Pandas, про которую я не слышал даже названия (!!). Стареем-с.  IDE:  - VS Code занимает 71%. Микрософту респект — смогли! Главное теперь не превратить то хорошее, что у них есть, в Visual Studio - Ближайший конкурент VS Code — IntelliJ — всего 30%. Серьезный повод для беспокойства - Самые богатые программисты сидят в Textmate (?) – $80k  Mobile:  - Developer, mobile получает меньше вообще всех ($41k). Это меньше сисадмина, тестировщика, аналитика, дизайнера, ученого. Странно, мне казалось, мобильщики наоборот, гребут деньги лопатой.  Кидайте вашу зарплату и любимый редактор в комменты, будем строить корреляции!",156
"Сел я, значит, Fira Code попрограммировать. Дай, думаю, соберу — у меня там и скрипты наготове. Работавшие!  Нажимаю, а оно: pip устарел. Это еще скажите спасибо, что у меня pip вообще был установлен. Как я его ставил это отдельная история.  Обновить, говорит? Ну давай. Введите, говорит,   /opt/homebrew/opt/python@3.9/bin/python3.9 -m pip install --upgrade pip    Почему не просто pip upgrade pip, мы никогда не узнаем, но это уже придирки. И почему upgrade, а не update?  Обновился. Но все равно ругается. Че там? Да вот, говорит:   DEPRECATION: Configuring installation scheme with distutils config files is deprecated and will no longer work in the near future. If you are using a Homebrew or Linuxbrew Python, please see discussion at https://github.com/Homebrew/homebrew-core/issues/76621   Ну идем читать. А там написано:   If you have been directed here from a pip warning, you don't need to take any action at this stage. Nothing is currently expected to break until Python 3.12, and a full solution will be implemented well before then.   Спасибо что предупредили, как говорится. А также спасибо за ворнинг, от которого нельзя избавиться, но который ничего от меня не требует. Но, типа, хотя бы не блокер.  Ладно. Пойдем этот ваш Pip использовать. Тут надо сказать, что компиляция шрифтов — то еще сборище костылей и подпорок. Оно работает (если вообще работает) не благодаря, а вопреки. Например, у меня в скрипте сборки ставится шесть (!) разных тулз от разных разработчиков, через разные пакетные менеджеры, просто чтобы собрать один шрифт. А еще там есть такие, например, строки:   pip install -U Pillow==5.4.1 idna==2.8 requests==2.21.0 urllib3==1.24.1 export PKG_CONFIG_PATH=""/usr/local/opt/libffi/lib/pkgconfig""   Почему именно такие? Да хрен его знает, с другими не работало. Что они делают? Да тоже хрен его знает. Такой вот парадокс — шрифты нужны всем, а тулинг разрабатывается тремя энтузиастами в свободное время.  Ну ладно, жму   pip install git+https://github.com/googlefonts/gftools   Не могу, говорит. Почему? Да вот ttfautohint-py не нашла. Как не нашла-то? Никак не нашла.  Иду гуглить. Нахожу issue, в котором какие-то случайно проходившие мимо люди обсуждают, как они какими-то правдами и неправдами, но умудрялись собрать эту ttfautohint-py для M1. Мейнтейнер, к слову, поскольку эта библиотека на 19 звездочек, в дискуссии участвует исключительно с общими ни к чему не обязывающими комментариями типа «проблема нашей ситуации в том, что...», а никак не патчами.  То есть библиотека с 19 (!) звездочками идет как hard requirement для гуглового gftools, на котором весь Google Fonts ездит. То есть понимаете масштаб «серьезности» и «основательности», да? Еще и названия у них там, типа, Pillow Wheel Builder. Че за подушка? Че за колеса? Детский сад, ей богу.  Самое обидное, что ttfautohint, библиотека очень важная и популярная, у меня прекрасно ставится через brew. А вот питонья обертка — ни в какую.  В общем, я остался без скриптов, а вы — без Fira Code. Я, кстати, не пожаловался, что текущий пайплайн собирает (ну, собирал раньше) шрифт за 50 секунд? ПЯТЬДЕСЯТ, карл! За это время на луну можно слетать на стрекозе и обратно, а не двухмегабайтный файл обработать.  Короче, питоний менеджмент пакетов надо сжечь, тут уже ничего не спасти. Я немножко в шоке, это второй по популярности язык в мире, и настолько помойка.  А после того, как сожжем, переписать все, что касается шрифтов, на Rust. Оно будет собираться из исходников час, промежуточных файлов нагенерит на 50 гигабайт, но главное что никаких, сука, опций. Гугл, выдели миллион-другой, проспонсируй?",157
"Продолжение: поставил Докер. Докер, понятно, тоже в arm64 все собирает, то есть хрен мне, а не ttfautohint-py.  Но! Докер можно принудить запускаться на неродной архитектуре. --platform linux/amd64. И это сработало! Только шрифт собрался за 18 минут вместо обычных 60 секунд. ВОСЕМЬНАДЦАТЬ! МИНУТ! Карл. Так что спасибо всем, кто советовал, пойду еще посмотрю.  Обмануть питон и запуститься через Rosetta 2 тоже, увы, не получилось. То есть шелл-то получилось, но питон где-то внутрях выкупает настоящую архитектуру процессора.  Пробуем собрать ttfautohint-py локально. Читаем:   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.  pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.   Опять в PIP что-то сломается. К счастью, не сегодня, сегодня пока еще 21.2 😅  Процесс идет, не хватает bison. Это гнушный парсер-генератор из 90-х. Идет аж в составе XCode. Нужен 2.5+, а в XCode только 2.3 2006 года. Работает — не трогай.  К моему счастью, bison нашелся в brew! Вот только zsh его не подхватил. И из .zshenv не подхватил. Почему? Потому что у zsh есть еще четыре (!) конфига, которые исполняются после .zshenv. И затирают твои настройки, мда.  Окей, пишем ТОТ ЖЕ САМЫЙ $PATH в ~/.zprofile, вроде работает. Ура! ttfautohint-py наконец собран. Поверить не могу. Что дальше?  Дальше из ниоткуда выскакивает skia-pathops. Нет, говорит, колеса.  Ну, Skia я знаю, тот еще пепелац на двух тыщ сиплюсплюсных исходников (не преувеличение). А че не собирается? А вот:   New python executable in .../pip-install-64pexhpq/.../build/temp.macosx-11-arm64-3.9/src/cpp/skia-builder/skia/venv2/bin/python  ERROR: The executable .../pip-install-64pexhpq/.../build/temp.macosx-11-arm64-3.9/src/cpp/skia-builder/skia/venv2/bin/python is not functioning  ERROR: It thinks sys.prefix is '.../pip-install-64pexhpq/...' (should be u'...-pathops_b27a67e8ecbc45de8eb5b7954cb8d084/build/temp/...-arm64-3.9/src/cpp/skia-builder/skia/venv2')  ERROR: virtualenv is not compatible with this system or executable   То есть, внимание, внутри одного питона запустисля другой питон, причем второй, и он «думает», что где-то не там оказался, а наружний питон его «анализирует». «Not functioning». «It thinks». Thinks, блин!!  Решаю помочь ему, починив pip2 заранее. Это тоже нетривиально, потому что sudo python2 -m easy_install pip падает с   Best match: pip 21.2.3 ...     def read(rel_path: str) -> str:                      ^ SyntaxError: invalid syntax   То есть Питон 2 нашел версию для Питон 3 и не осилил синтаксис. Тут, ребята, урок, что совместимость должна быть не только обратная, но и прямая, то есть на будущее.  Гуглим последнюю совместимую версию, ставим. Для меня-то оно заработало, а для skia-pathops нет. Видимо, кто-то внутри дергает python или pip без цифры 2, получает третий питон и пиши пропало. Что тоже намекает, как делать миграцию, да? Молча подменять старое новым — путь к страданиям.  Но зато я нахожу опцию BUILD_SKIA_FROM_SOURCE=0, которая позволяет подложить уже собранную Skia! И, по совершенно невероятному стечению обстоятельств, такая у меня как раз есть! По работе! Собрать ее заняло не один день, вот бы сейчас я встрял.  И... это сработало! Я, конечно, получил полный экран депрекейшн ворнингов, но... это сработало!  Запускаем time ./script/build и... вуаля! Через каких-то 77 секунд (а не 18 минут) получаем свеженькие ttf.  Вот так вот я провел почти все воскресенье. Приключения в мире людей, которые не стесняются импортировать чужие библиотеки. Как говорится, хочешь сделать что-то хорошо — делай это сам.  И если у вас еще остались иллюзии, что то что мы тут с вами сегодня пишем, другие люди смогут запустить через 50 лет, то ха! Даже через 10 не смогут.",158
"После приключений с Питоном я задумался: а как вообще писать код, чтобы его можно было запустить через 50 лет? Только нормально, без геморроя и черной магии.  Во-первых, людям верить нельзя. Это основополагающий принцип. Работает то, что жестко энфорсится машиной, исключения не работают, соглашения не работают. В Java нельзя использовать private или sun.misc, но если очень хочется, то можно — всё, это сразу часть публичного АПИ. Minor версия в SemVer должна быть совместима по АПИ, но если нет, то коллеги застыдят? Всё, единственный вариант — считать каждую минорную версию уникальной и несовместимой. На маленьких масштабах соглашения работают, на 50 лет — уже нет.  Во-вторых, очевидно, нельзя ничего удалять. Leftpad помните? Слава богу, что бэкапы были. В этом смысле гитхаб как репозиторий меня напрягает — да, git почти иммутабельный. Но почти. При желании можно и удалять ветки, и двигать теги, да и вообще репу удалить. Обычно этого не происходит, но это соглашение, а соглашения что? Правильно, не работают.  В-третьих, менять in place тоже нельзя. То есть нельзя пофиксить багу, бампнуть минорную версию и сказать, что она точно такая же. У меня до сих пор холодок от систем, где можно указывать диапазоны зависимостей. Еще очень люблю, когда системные библиотеки подключаются динамически: давайте возьмем libfreetype.so, авось примерно нам подойдет. Так мило и наивно, ми-ми-ми.  Как же исправлять ошибки и развиваться, если менять код нельзя? Очень просто: у КАЖДОЙ версии должен быть свой уникальный неймспейс. Да, даже у минорных. И они должны уметь сосуществовать в рамках одной программы.  В-четвертых, duck typing. Совместимость должна проверяться по форме, а не по названию. OrderV2 должен подходить туда, где подходит OrderV1, пока у него есть тот же набор полей. А иначе пофиксил микробагу и все, изобретай весь мир заново. Не полетит. Позднее динамическое связывание — единственный способ future proof-а.  В-пятых, все входы программы жестко фиксировать. Это я на C/C++ библиотеки смотрю, которые можно собрать с разными define-ами. И если например подключаешь динамическую библиотеку, тебе мало иметь от нее header, надо еще угадать, какие define-ы были включены. Reproducible builds, причем жестко, до последнего байта.  В-шестых, опции в сборке противопоказаны. Идеальный билд/запуск должен работать как «кинул в котел этот файл, этот, этот и оно само разобралось и все сделало». Если хоть что-то сверх этого, хоть малейшая толика свободы, то все, пиши пропало. Разброд и шатания, которые на масштабе в 50 лет похоронят все что можно. Да, это терпимо для одной программы, но совершенно невыносимо, когда тебе надо собрать десять-сто-тысячу.  В-седьмых, вся вообще инфраструктура должна быть декларативной. Потому что семантика. Если в конфиге написано: исходники в папке src, то понятно, на что компилятор натравливать, но также понятно, например, как приделать linter. А если в билде написано «возьми все файлы из src и натрави на них компилятор», то с этим особо ничего больше не сделать, кроме как непосредственно исполнить. Декларатив выживает, потому что с ним можно работать по-разному, а за 50 лет точно захочется.  В-восьмых, жесткая унификация и автоматизация. Человеческое вмешательноство недопустимо ни на какой стадии сборки/запуска, просто потому что оно а) протухает со временем (человек забил/ушел/умер, экспертиза потерялась) и б) не масштабируется.  В-девятых, про версии языка. Тут либо жесткая, брутальная обратная совместимость, либо несколько версий языка должны уметь сосуществовать. ХЗ, можно ли это устроить.  В-десятых, про хранение. Хранить только в исходниках, иначе протухнет. Потому что за 50 лет может и проц новый выйти, и еще что-то. В общем-то, все предыдущие пункты про вот это, как сделать так, чтобы хранение в исходниках работало на серьезных машстабах. Отсюда, кстати, следует полный опен-сорс: бинарники не сработают, обфускация не сработает.  Такие вот мысли. Пойду дальше мечтать.",159
"Когда я учился в универе на программиста, лет так 20 назад, у нас был курс ООП. И вот препод читает нам лекцию, что бывает инкапсуляция, полиморфизм, и тут натыкается на какой-то термин, название которого существовало на тот момент только на английском. И произносит такую фразу: «Как это по-русски называть я не знаю, область новая, русский словарь еще не устоялся, __надо будет им как-нибудь заняться__».  И тут у меня мир перевернулся немножечко. Ну то есть процесс обучения so far был такой, что есть некий корпус знаний, а лекторы его нам пересказывают. Типа, мы изучаем статичный мир.  А тут лектор—обычный такой программист, практикующий, своя айти фирма, живет рядом с нами, бесконечно крутой для нас тогда, но тем не менее в пределах достижимого: обедает в тех же столовых, учился когда-то в том же универе, ну может лет на 10 нас старше.  И он, получается, в том числе лично создает тот самый мир, в который нам предстоит влиться. И мир-то не статичный, а меняется прямо сейчас, пока мы скучаем на лекциях.  И эта разница в мировоззрениях преследует меня до сих пор, особенно в дискуссиях в интернете. Одни видят мир программирования как что-то статичное: вот нам дан Ruby on Rails, например, он такой, какой есть, его можно изучать, его можно (и нужно) использовать, и это в общем-то все. Рассуждения про то, чего там не хватает, или как надо было бы правильно его устроить, в рамках такой модели кажутся беспочвенными, примерно как рассуждать, что было бы, если бы не было налогов или существовал магнитный монополь. В лучшем случае можно обсуждать, какие еще библиотеки уже существуют и можно взять прямо сейчас. На месте RoR мог бы оказаться кто угодно, конечно: Нода, или C++, или Хаскель, или даже Win API.  Другой способ смотреть на мир в том, что он создается точно такими же программистами, как и мы, постоянно, прямо сейчас. И он действительно создается, ничего еще не решено, ничего не устаканилось, все меняется, все под вопросом. Есть люди, которые пишут новые библиотеки, есть люди, которые пишут новые фреймворки, новые игровые движки, новые базы данных, новые языки, да даже операционки. Они же не с неба на нас упали. И это ВСЕ в пределах достижимого, и ВЕЗДЕ есть потенциал для улучшения. Лично для меня это самая интересная часть профессии: двигать статус кво дальше, находить проблемы и потенциал для улучшения. По возможности на практике, но чаще даже просто на словах.  А проблема, собственно, что людям из этих двух категорий, как правило, сложно друг друга понять. «Некогда думать, делать надо», «зачем обсуждать то, чего нет» с одной стороны; и «все плохо, никто не умеет программировать, как же так получается, индустрия в жопе» с другой.  Ну, в общем, это моя наивная попытка чуть улучшить ситуацию, объяснив, что происходит. Ну и немножко сформировать ожидания, чтобы было понятно, что мы тут обсуждаем и почему именно так. Продолжайте мечтать!",160
"Главное правило дизайна хорошего API — правда. Мир как-то устроен, и хорошее АПИ не прячет это устройство, не пытается его сгладить, а представляет как есть.  Если не знаете, как сделать АПИ, задайтесь вопросом: а что на самом деле происходит? Не «как сделать удобнее?», а именно «что происходит?». И вокруг этого уже стройте. Это может быть некрасиво/нелогично/неудобно, но зато с этим можно работать.  Например, событие KeyDown. Что произошло в физическом мире? Кто-то нажал на кнопку на клавиатуре. Все, больше ничего не произошло. Значит в событии должна лежать кто? Кнопка.  Однако чего туда только не кладут: например, юникод текст, который этой кнопке соответствует. Маппинг кнопок в символы конечно важная задача, но все-таки не связанная 1 на 1 с нажатием на кнопки (есть кнопки, которые ничего не вводят, как и текст можно ввести, не нажимая на кнопки).  Или, например, какие-то кнопки приходят, а какие-то не приходят, или приходят не всегда, а третьи вообще виртуальные и приходят, когда никто ничего не нажимал.  Короче, хорошее АПИ репортило бы только одну вещь: какая кнопка и когда была нажата.  Не пыталось бы помочь, скрыть, обработать или как-то иначе запутать ситуацию. Но только по-правде, когда кто-то реально нажал настоящую кнопку. И всегда, без исключения.  Почему? Да потому что с сырой правдой можно работать так, как тебе нужно, а вот с «умным» АПИ приходится сначала распутывать его логику, «нормализовывать», а потом уже делать свою поверх. Это сложно, это трудно сделать до конца (никогда не знаешь, какие еще «особенности» там могут быть), это бессмысленно. Не надо так.  У кого правда, тот и сильней.",161
"Функция макОСа «переключать раскладку по Caps Lock» (системная, между прочим) раскладку, конечно, переключает, но иногда (1 раз на 25) включает настоящий Caps Lock. С лампочкой, с БОЛЬШИМИ БУКВАМИ, все как мы любим.  Я пытался из этого вывести какую-то мораль и понял, что в этом баге сошлось буквально все, что не так с компьютерами. Тут и про отношение к макОСу в Эппле (задвинут на задворки), и про уровень тестирования, и про сложность современной разработки, и про состояние рынка, на котором продукт такого качества успешно существует, и про то, что американцы до сих пор по-настоящему не поверили, что остальному миру правда нужно переключать языки, и про инертность в раскладках клавиатур, тянущуюся прямиком от пишущих машинок.  Самое смешное, что у них есть и другая возможность переключить языки — по кнопке Fn. Казалось бы, та же самая функция, НО: включается совсем в другом месте (серьезно), работает по-другому и показывает идиотский попап по центру экрана на полторы секунды. ПОЛТОРЫ, карл. Наверное, в представлении создателей переключение раскладки это такой редкий и такой специальный юз-кейс, что о нем нужно КАК СЛЕДУЕТ уведомить пользователя. Ну а если у вас мышка где-то в районе попапа стояла, то попап не работает: реагирует на мышку вместо выбора следующей раскладки. Нет, я не шучу блин.  А, ну и самый топчик: если очень быстро набирать текст и переключать раскладки, раскладка может НЕ УСПЕТЬ переключиться. То есть абв-капс-xyz превращается во что-то типа абв-капс-чнz. Рейс не на уровне наносекунд и тактов, а на уровне скорости печати человека. Как можно так программировать, скажите пожалуйста?  Не, я не спорю, макОС хорошая система, но как только обычные люди ей пользуются? Пойду доставать Hammerspoon, чтобы сделать нормально.",162
"У Куросавы в «Семи самураях» есть момент, где какой-то дерзкий самурай залупался на более опытных и уговорил одного на дуель на деревянных мечах. И даже ее выиграл. Опытный не очень расстроился — че ты радуешься, говорит, ты выиграл только потому, что мы на деревянных мечах дрались, в настоящей драке я бы тебя зарубил. Не, говорит дерзкий, не верю, я круче. Ну давай, говорит, на настоящих. И зарубил дерзкого нахуй.  Это я к чему? Ходил я тут на собеседование, и меня завернули, потому что я код недостаточно абстрагировал и на модули мало поделил. А там кода — три функции, каждая на полэкрана. Нафига их делить? Типа, в настоящей системе такое бы не прошло. А я думаю, что давайте тогда вашу настоящую систему, посмотрим, как у вас там все красиво по модулям разложено и функции на две строчки, и где и как часто у вас программисты кукуху лечат. С деревянным мечом мы все горазды понты кидать. Давайте по-настоящему?",163
"Ничего так не бесит меня, как казуально всплывающее «правило семь плюс-минус два» в оправдании чего угодно. Например: функции в коде должны быть не длиннее 7-9 строк. В классе не более 9 членов. У функций максимум 7 аргументов. В меню сайта или приложения должно быть от 5 до 9 пунктов. Не ставьте на слайд больше 7 тезисов. В книге не больше 9 глав. Я даже видел совет «вместо одной статьи “50 советов” напишите пять-девять статей по 5-9 советов». А в Википедии вообще всерьез (всерьез?) написано, что число 7 из поговорки «семь раз отмерь» взято прямиком из закона Миллера!   И знаете что? Я так больше не могу. Давайте по фактам:  - На руках десять пальцев - В футбольной команде 11 игроков - На циферблате 12 часов - В дискографии Битлз 13 альбомов - В шахматах у игрока 16 фигур - На экране айфона 28 иконок - В алфавите 33 буквы - В карточной колоде 52 карты - В рулоне туалетной бумаги 53 метра - На клавиатуре 104 кнопки (плюс-минус десять) - В Доте 121 герой - В Друзьях 236 эпизодов - В китайском письме 3000 иероглифов - В пенсионном фонде РФ 0 смысла - В этом списке уже 15 пунктов  И что? И ничего. Все это прекрасно используется человеком без каких-либо проблем.  Давайте почитаем, что же на самом деле тестировал Миллер в своей лаборатории? Вот что он пишет в оригинальной статье:  «Мы обнаружили, что человек способен держать в кратковременной памяти от пяти до девяти несвязанных между собой элементов. Несвязанных, слышите? Держать в памяти! Это тоже важно! Не надо пихать мой закон в каждую дырку, когда вам нужно что-то оправдать!»  Так что там с пунктами меню? Правда ли 7 работают лучше, чем 14? Да, если они а) абсолютно никак не связаны друг с другом и не группируются, и б) человеку нужно держать их в кратковременной памяти.  То есть, если вы покажете их человеку один раз на несколько секунд и потом заставите вспомнить их все по памяти — тогда да, больше семи не делайте. Во всех остальных случаях — никакой проблемы нет. От слова вообще.",164
"Наша редакция продолжает выдавать крайне спорные советы по программированию. Всерьез ли мы? Или хотим посмотреть на реакцию? Оба!  Итак, есть такое широко распространенное правило: не делать слишком длинных функций. Кто-то говорит 10 строк, кто-то пять, кто-то на полэкрана, кто-то на экран.  Если честно, чем дольше я программирую, тем меньше вижу в нем смысла. Просто механически делить все функции потому, что они не проходят какой-то произвольно взятый лимит? Странно. Длинные функции сложнее читать? А почему, собственно? Мне кажется наоборот.  Плюс одной большой функции — что код в ней самодостаточен и замкнут сам на себя. Читая его, тебе не нужно отвлекаться, прыгать в другие части файла, запоминать и держать в голове какой-то контекст (ага, вот этот вызов сделает то-то, запомнили, вернулись, продолжаем читать).  Второй плюс в написании — куски кода внутри длинной функции не торчат наружу, их не может позвать кто-то другой. А значит не нужно об этом думать, какие-то проверки городить, делать приятный API. Можно ограничиться только локальными условиями и потребностями. Переменные, опять же, не нужно лишний раз туда-сюда гонять через аргументы. Все есть локально.  В каких же случаях функцию делить стоит? Только в одном случае — когда в этом есть реальная потребность. Выделение в функцию — очень сильный сигнал, мол, вот, это полезный, законченный и осмысленный кусок. Чисто утилитарных функций, единственная цель которых — свернуть какой-то кусок из конкретного алгоритма и больше нигде не использоваьтся и ни к чему не подходить — нет, такого быть не должно. Это высокая связность, разделение механическое, но не смысловое.  В общем, если функция вдруг получилась длинная — это никогда не повод ее делить. Повод может быть другой — логика происходящего, семантика алгоритма, варианты использования, но никогда не просто длина. Большие функции — это тоже нормально.",165
"Ладно, только не смейтесь. Табы против пробелов.  Когда речь заходит о настолько спорном вопросе, я стараюсь отбросить любую вкусовщину и найти несдвигаемые аргументы. Например, в споре «лучший язык программирования» явно правильного ответа нет. Да и в «темная тема или светлая тоже». У людей разные вкусы, что поделаешь. Поэтому в такие споры я не ввязываюсь.  А вот в «табы против пробелов» несдвигаемые аргументы, внезапно, есть! И нет, это не «табы занимают меньше места на диске, я работаю в data compression company, я знаю».  Аргумент очень простой — два разных невидимых символа в одном файле одновременно, часто рядом друг с другом — это полный бред. Представьте, что стиль кодирования требовал бы вас называть переменные a и а. Не позволял, а прямо вот требовал их смешивать и ставить рядом. Ну вот, это ровно то, что предлагают делать сторонники табов.  Окей, раз два разных символа это бред, надо выбрать один. От пробелов точно никуда не деться, т.к. они между словами. Значит уйти должен таб!  Тут обычно приходят и кидают статью «Nobody talks about the real reason to use Tabs over Spaces». Если коротко, то чувак внезапно узнал, что меняют ширину табов не скучающие хипстеры-миллениалы, а люди с проблемами зрения. Одним надо буквы по-крупнее, и ваши конские два пробела на каждый уровень вложенности становится слишком много, другим, наоборот, четырех пробелов не хватает, чтобы заметить отступ, и они выкручивают на восемь. Типа, вот, смотри, ты же не хочешь, чтобы слепые страдали?  Не хочу. Но давайте на настоящую проблему посмотрим. Людям не нужна дрель, людям нужны дырки. Так и слепым (ладно, подслеповатым), им, в принципе, не нужны табы, им нужно, чтобы было удобно читать. Это раз.   Два это то, что пробелы вообще-то почти победили. Если бы не старообрядцы из языка Go, использование табов сейчас болталось в районе 1-2%. Это я к тому, что код с пробелами уже существует. И он никуда не денется в ближайшие десять лет, даже если мы прямо сейчас всем миром перейдем вдруг на табы. То есть слепым не станет вдруг хорошо, если лично ты прямо сейчас переключишься. Им станет хорошо, если они научатся жить с пробелами.  Окей, теперь к решению, ради чего я все это, собственно, пишу. Решение очень простое — IDE должны научиться регулировать ширину отступа. Причем не переписывая файл, не заменяя байтики, а чисто визуально: тот же самый пробельный отступ рисовать с динамической шириной на выбор 0,25x, 0,5x, 1x или 2x.  И все. Проблема решена. Открываешь любой файл как есть, включая все уже написанные с пробелами, видишь отступы какие тебе удобно, никого не беспокоишь, не вводишь какую-то корпоративную политику, не паришь всем мозги. Самое главное, что работает здесь и сейчас и не требует переделывать весь мир. А надеяться, что все люди планеты вдруг передоговорятся и разом начнут работать по-другому — ну вы где живете, в сказке?  Так, подожди, но какая ИДЕ так умеет? Никакая же?  Ну, да. Но я не вижу, почему бы им этого не сделать. Если они действительно переживают о доступности и инклюзивности. Технически это не сложно, не сложнее, чем логику таба реализовать (которая ппц какая неудобная), а в чем-то даже проще.  Подожди, но если пробел используется и для семантических остступов, и для ручного выравнивания (аргументов под функциями, например), как ИДЕ разберется, какие пробелы сжимать, а какие нет?  Ну а как она сейчас разбирается, где можно return писать, а где нельзя? Серьезно, на фоне все остального, что IDE знает и умеет про код, разобраться в пробелах почти тривиальная задача.  Такое вот предложение. Перешлите своему вендору.",166
"Самая главная юзабилити-фича Германии — что номера выдаются не домам, а подъездам. Дали тебе адрес, ты пришел, номер над дверью нашел — все, значит тебе сюда. Удивительно просто и удобно. Зачем нумеровать дома целиком становится решительно непонятно.  Вторая это что у квартир нет номеров. В итоге полный адрес сокращается до «улица — подъезд — фамилия» вместо «улица — дом — квартира — фамилия».  Да, это те же самые немцы, которые бойкотируют Google Street View из-за приватности, но вообще не парятся, что у каждого подъезда написано пофамильно, кто в нем живет ¯\_ (ツ)_/¯",167
"Прочитал сейчас в канале Федора Борщева:  «Самое обидное, что программист может услышать от менеджера — это “я не в курсе”».  Нет, ребят. Самое обидное — это очень-очень нужно, сделай обязательно сегодня/завтра/до конца спринта, кровь из носу. И потом fatality: «а, спасибо, я уже и забыл». И еще два месяца на твою работу никто не смотрит.",168
"В дизайне есть очень простое правило: выделить можно что-то одно. Если выделить две вещи, ты не выделишь больше, ты выделишь меньше. Внимание-то у человека конечно, и если сделать пестрыми все кнопки, получится то же самое, как если не выделить ни одной.  Я люблю этот принцип к подсветке синтаксиса применять. Если выделить каждое слово цветом, получится, что ты и не выделил ничего, потому что все одинаково пестрое. Чтобы выделение работало, оно должно ВЫДЕЛЯТЬСЯ, то есть быть редким, существовать на фоне чего-то дефолтного. А иные схемы так накрасятся, что не разберешь, где там базовый цвет вообще.  Другой мой любимый пример – это Стим (который игры). Стим открывается по дефолту на странице магазина, которая по определению уже рекламная витрина: с большим баннером прямо по центру и десятком игр в карусели.  И вот кто-то в Стиме решил, что если поверх одной витрины сделать другую витрину, можно прорекламировать в два раза больше. И отдали программистам приказ, чтобы при открытии открывалось ЕЩЕ ОДНО ОКНО с точно такой же витриной, но другими играми.  Результат? Посетитель посмотрит либо одну, либо вторую, и там, где в хотели его внимание на чем-то сфокусировать, вы его размазали. Ресурс так просто удвоением рекламы не растягивается.  Ну и последнее это плохие менеджеры которые сначала назначают всем задачам приоритет P1 (из 1-5), потом смотрят, что что-то P1 задачи не делаются (а это ведь самые важные) и вводят приоритет P0. Не, ну логично же?",169
"С одной стороны, у меня в канале нету ссылок и вообще только оригинальный контент. С другой, вот ну слишком уж хороший пост. Поэтому цитирую полностью. Канал ищите по названию «Novikov on Soapbox».  ---  Психология IT-дедов  Дедами в IT, бухтящими на молодняк, движет вовсе не ""нежелание учиться новому"". Просто деды помнят с какими задачами они в жизни изрядно потрахались и желают знать как же эти задачи решаются на новомодных технологиях. Но новые технологии ответов на старые вопросы не дают. Зато новых вопросов рождают до чёрта.  Например, транзакционная запись в БД. Я узнал что на go многие пишут CRUD-ы. Шут с ним что это просто полная чушь, но любому деду очевидно, что если ты раздеплоишь 100500 микросервисов на каждую сущность в БД, то при попытке сохранить что-то мало мальским сложное понадобится координатор распределённых транзакций. Ну чтобы при ошибке откатывать всю цепочку изменений автоматически. На уровне базы для этого есть встроенные механизмы (которые ещё и с репликацией дружат). Go-шники же при словах ""координатор распределённых транзакций"" смотрят ошалелыми холодными глазами и всем видом дают понять, что ты сказал щас что-то такое, что к их вселенной не относится.  Деды в курсе как масштабировать приложение на старых технологиях/baremetal и искренне не понимают на кой городить огород с контейнеризацией, когда достаточно грамотного билд-деплой пайплайна. А ещё диды помнят как в 2006м у них свой стартап крутился на паре бесхозных 360х ""пентиумов"" с винтами по 40 гигибайт. И стоило это примерно нихера и луку мешок. Счета за услуги облачных провайдеров ставят дедов в тупик. Они понимают, что им никогда не платили столько, сколько компания спускает в месяц на облака.  UI деды тоже делали. Хорошие деды даже понимают чем JS-подход к UI удобнее классики (абстракцией работы с UI-тредом), в остальном же MVC у них в крови ещё со времён Microsoft Foundation Classes. Ивент-луп и отрисовка изменений в данных. Ничего похожего на Redux дедам и в голову бы не пришло просто потому что а зачем. Максимум — MVVM (MVC с активной моделью, уведомляющей UI об изменениях). При виде современного веба, деды с тоской вспоминают RAD Studio — как тогда всё было просто, быстро, а главное — работало ведь! Никакого CSS, никакой групповухи с флексбоксами: куда кнопку поставил — там она и стоит. По меркам RAD Studio/WinForms/WPF современная веб-разработка чудовищно усложнена и до жути бестолкова (в смысле что результат неадекватен затраченным усилиям).   По поводу использования системных ресурсов деды пребывают в постоянном когнитивном диссонансе. Когда молодняк с криками ""оборудование — ничто, понятность — всё"" лихо разбрасывается огромными кусками оперативы, деды вспоминают, как в юношестве байтики экономил чтобы программа скачивалась два часа, а не три. Или чтобы отчёт обсчитывался за 4 часа, а не за 10 дней. Деды понимают, что весь софт сейчас работает херово и с ужасающим оверхедом. Вывозит только за счёт мощного и недорогого (относительно 80х-90х) железа. Это в их понимании означает ""не работает"".  В конце-то концов просто по-человечески больно осознавать, что ты писал очередь сообщений через файловую систему или базу данных. А современный школьник с улюлюканием берёт docker-образ NATS и втыкает его в свой проект. Ты бы и сам смог сделать NATS, но просто не успел. Кто-то оказался проворнее и удачливее. И сейчас вместо файн-тюнинга своего решения ты вынужден разбираться с нуля в чужом. И зачастую — донельзя говёном.  Бесит. Ну а кого б не бесило?  В любом случае помните, что деды могут делать как молодняк, просто не хотят. А вот молодняк делать как деды не умеет.  Такие дела",170
"Меня лично, кстати, с ощущением деда примирила статья Никлауса Вирта. Три года назад работа веб-программистом окончательно загнала меня в депрессию и я вылил все свои фрустрации в статью Software Disenchantment. Это был 2018-й.  И тогда же мне показали статью Вирта из 1995-го, A Plea for Lean Software, в которой автор Паскаля жалуется, что, мол, совсем программисты программировать разучились, ресурсы тратят как не в себя, все жиреет, тормозит, разваливается, классиков не уважают, Кнута до конца не прочитали, слава богу, железо хоть развивается, только оно и спасает. То есть он написал практически дословно то же самое, что и я, только на 23 года раньше. Это раз.  А два это то, что его жалобы меня совершенно никак не тронули. Текстовый редактор, говорит, 25 лет назад помещался в 8 Кб, а сейчас требует уже 800 Кб! Операционка входила в 32 килобайта, а современные требуют мегабайтов. И я такой: хм, ну окей, вроде не сильно страшно. Перенервничал дед-то.  Ну и это в общем-то все. Мне полегчало от того, что а) с миром ничего особенного не происходит, он всегда таким был и ровно таким же и остался, business as usual, и б) я вообще-то должен чувствовать те самые чувства, что я чувствовал, это нормально.  Нам, дедам, положено ворчать и воротить нос, как это делали наши деды 25 лет назад, когда мы только в школу ходили. А молодежь будет тратить гигаватты, чтобы отсортировать список на блокчейне, и не будет видеть в этом какой-то особенной неэффективности. Че ты бурчишь, дед, список-то вот он, отсортирован.  А, ну и если уж даже Вирт не смог, то мы и подавно никогда современного положения вещей не поймем и не примем. Так что расслабьтесь, получайте удовольствие и ловите лулзы.",171
"Прислали тут фидбек по одному интервью. Говорят, что я не командный игрок, потому что люблю делать вещи сам, а не отдавать команде, и что вел себя defensive на дизайн сессии.  И не то чтобы они совсем не правы (правы), и не то чтобы я был не в курсе (в курсе). Немножко обидно, что я старался это как-то компенсировать, но настолько не смог, что за два часа про меня все стало понятно.  Нет, цели быть defensive и не-командным у меня нет, наоборот, чисто интуитивно я стараюсь быть лапочкой и всем угодить. Но как-то оно не очень получается. Вопрос, собственно, как быть? Где взять софт скиллов человеку, выросшему в Сибири за гаражами? Научите?  Как, например, не быть defensive, защищая свое решение? Какими словами присыпать? Или лучше вообще не защищать?  И как нормально работать в команде, чтобы «быть командным»? Если «любить делать вещи сам» не командная тактика, то какая командная? Пришла тебе задача, и ты что? Обсуждаешь ее с кем-то?  Интересует именно мелкая механика процесса, чем конкретнее, тем лучше. Потому что я явно понимаю намерение, но не понимаю деталей и ритуалов.",172
"Краткая выжимка комментариев к посту про софт-скиллы. Пост 1/2:  Примеры -------  Не знаю, какую роль Сибирь играет, но каждый первый русскоговорящий кандидат которого я собеседовал на прошлом месте (USA) получал просто кучу красных флагов от моих коллег 🙁  Токсичный начальник: приходил на все митинги и раздавал советы или высказывал мнение (формата «нахуя нам митинг»). Супер умный чувак, но вся комната гасла когда он в неё заходил.  Гениальные мудилы на любом СМУ или в любой универской кафедре есть. Только если бы он не был токсичным, возглавлял бы направление в газпроме, например, а не сидел бы с вами дурными.  Поработав с одними из самых крутых людей в индустрии, я заметил, что все люди косячат. Или внезапно выдают поверхностные ответы, вместо анализа. Прямо все.   Интенции --------  Soft skills не исключают Hard skills! Никому не приятно общаться с токсичными мудилами, будь они хоть семи пядей во лбу.  Soft skills можно научиться, это навык, который тренируется. Вплоть до автоматизма.  Не пытаться взломать систему и мимикрировать, а действительно искренне учиться коллаборировать.  В контексте команды soft skills — забота о тиммэйтах. Тебя беспокоит не только результат завтра, но и надежность самого социального механизма в долгосрочной перспективе. Ритуалы: positive reinforcement feedback, похвалить хорошее, спросить, что они там себе думают. Being kind, а не being nice.  Критикуя твои решения никто не критикует тебя. Это важно всегда держать в голове, в постсоветском пространстве это главная проблема.  Позитивный настрой на решение проблемы а не на поиск виноватого. Неважно кто налажал, нужно решить проблему.  Всегда начинать с исходной позиции, что я неправ. Хотя бы частично.  Меньше работает подход «я знаю как лучше» и больше «мы подвергнем идею опеределенной критике и либо она выдержит и станет еще более бронебойной, либо мы ее улучшим и доведем до ума».  Совковый менталитет:  - надо всегда иметь мнение, - нельзя хвалить, - критиковать обязан каждый: «я не обсираю я критикую», «если меня не спросили то ну и что», «автору же самому будет лучше от этого», - желание остаться правым в споре, а не решить проблему.  Это как раз модель мира которая позволяет в комментариях в русском интернете обсирать любого автора с целью сделать мир лучше. Такие вот мы сталкиваемся со здоровыми людьми на интервью, и здоровые люди охуевают с этой болезни.  Лайфхаки:  - перестаешь считать окружающих долбоебами и мудаками, - осознаешь что все в команде приносят пользу, - осознаешь что ты можешь людей чему то научить и сам у них чему то научиться, - осознаешь что любые идеи могут быть в чем то полезными, искренне с интересом выслушиваешь их, вдруг что у самого еще интересного в голове возникнет, по принципу брейншторма, - понимаешь что даже если идея очевидно плоха, то челу ее предложившему это совсем не очевидно, - ну и учишься спокойным тоном доказывать/показывать, чем та или иная идея хуже/лучше, аргументировать, соглашаться со своей неправотой в конце концов.  Ты приходишь на работу делать лучше для компании и для всех, а большинство приходит делать лучше для себя. Твой мотив «но ведь также лучше/правильней/быстрей» не откликается, вы не на одной волне. Принять, что вы разные, и пожертвовать идеальным видением ради личных отношений.  Управление ----------  Интересные таски не бойся отдать другим.  Team work == Менторинг, работа чужими руками, CTO.  Из многих взаимоисключающих вариантов (e.g. очередь vs БД, монорепо vs мультирепо) часто все равно, что выбрать — оба будут работать, разница несущественна и не стоит конфликта.  Книги -----  - Crucial Conversations - Non-violent communication, Getting to yes, Never split the difference, книги по личным границам - Emotional Intelligence by Daniel Goleman - Общаться с ребенком. Как? Юлия Гиппенрейтер",173
"Краткая выжимка комментариев к посту про софт-скиллы. Пост 2/2:  Общение -------  Shit Sandwich: похвалить, поругать, похвалить.  SBI – situation, behavior, impact.  На любое предложение отвечать согласием + раскрывая с чем ты конкретно согласен и доопределяя своими вариантами (Rogerian Argument).  Изложить человеку обратно то, что ты услышал. Типа «я верно понял, что вы хотите так и так сделать?». Не оверхэд, много недопониманий срезает, людям приятно, что ты их услышал.  Реверсивная психология. Начни с «я конечно не уверен, что это будет верный подход, так что вы мне скажите если это херь собачья, но идея сделать так-то». Народ не увидит в этом эгоистической атаки на предыдущую альтернативу, и даже может проявить эмпатию типа «ну не такая уж и плохая идея».  Если идея реально не отстой, а ты ее так низко ценишь, то найдутся желающие тебя откорректировать, а тебе это и нужно.  А если предложение не нашло ни у кого отклика, то она либо говно, либо непонятно объяснено — нужно подумать почему не зашло или переспросить, правильно ли ты понял ассампшены.  Если решение не нравится:  — Не говори «нет», спроси «почему?»,  — Если ты точно знаешь все ins и outs, скажи, «а что думаешь, если будет так?», а не «так заебись».  — Если человек ошибается — надо дать ему ошибиться. Делайте Proof of Concept, не выгорит — win, выгорит — тоже win.  Критикуя предлагай = конструктивизм. Если нечего предложить — не ругай существующие предложения. Видишь проблему в решении — предложи изменение, чтобы её обойти.  Создает напряжение: указывать людям на их ошибки прямо («разъеб по фактам и цифрам»); в свой адрес принимать критику только, если она обоснована.  Тактические приемы:  «Ну вот допустим мы берем твою идею» с обьяснением что будет дальше и где будет подводный камень.  «А если мы попробуем немного изменить твою идею».  «Да, это отличная идея, я думал немного по другому сделать, но в целом-то вообще без разницы».  «Я тоже вначале подумал про это, но там будет проблема с Х и Y, есть другой вариант — сделать вот так ...»  «Да, хорошая идея, давайте так и делать, только вот там когда начнешь имплементить — подумай насчет Х и У подводных камней, и возможно стоит подумать насчет идеи Z».  Еще:  1. Выстраивай утверждения так, чтобы снизить психологический барьер для их опровержения. Не «тут, очевидно, надо очередь» или «тут поставим очередь», а «здесь можно поставить очередь» или «а если мы поставим очередь, то сможем xxx».  2. Спрашивай у чела, который что-то предлагает, а не указывай на ошибки. Проси пояснить. Вместо «очередь здесь не нужна, достаточно постгреса» можно сказать «думаешь, очередь здесь будет лучше, чем постгрес? у тебя был уже опыт с ним?»  3. Будь готов к ответу, который поменяет твоё мнение. Следи за собственными эмоциями и интонацией: это должен быть реальный интерес, а не на отъебись.  4. На митингах надо не забывать специально спрашивать тихонь. «Дина, а что ты думаешь по этому поводу?» Часто последующий диалог поворачивает мысль в нужную сторону.  5. Если ты ставишь себя как технического лидера (а не умного студента), обязательно надо ссылаться на других при коммуникации. Даже если вы напрягли друг друга на митинге. «Миша вчера подбросил гениальное соображение, и мы предлагаем в итоге вот такой план: XYZ». Сделай людям так, чтобы им было приятно, когда ты представляешь их работу, и с тобой будут с большим энтузиазмом сотрудничать.  6. Манки брейн не обойдёшь: одними словами и смысловым ratio нельзя многого добиться. Надо расслабиться, настроиться на диалог, и сделать так, чтобы коллеге было по-человечески приятно с тобой общаться: улыбнуться лишний раз, например. Смоллток.  Это и глубоко рационально: зачем плыть против течения и заставлять других людей «догадываться, что resting bitch face — это российская культура, почитайте про суровых сибиряков, которых в вашей многотысячной конторе только я и Геннадий, страдайте в нашем присутствии и адаптируйтесь все».  ---  Всем спасибо за дискуссию, очень продуктивно и практично!",174
"В макОСе есть приложение Reminders. Когда в нем редактируешь задачу in place и потом кликаешь куда-то еще, чтобы выйти из редактирования и изменения сохранились, задача на секунду улетает с экрана (со свистом, анимированно, то есть) и потом тут же прилетает обратно.  Багу уже несколько лет. При этом это один из базовых сценариев: создать, редактировать, удалить. Должен проверяться на каждый первый коммит и на каждый первый релиз по сотне раз. А если не проверяться, то любой пользователь в первый же день это заметит. Почему не исправили?  Тут я вступаю на территорию догадок. У меня есть версия, что не исправили потому, что фреймворк не позволил. То есть система, которая хранит данные и система, которая рисует UI (и, возможно, еще cloud sync здесь где-то рядом) написаны так, что нормально-то и не сделаешь. Они позволяют, например, удобно делать какие-то задачи, снимают часть головной боли  и даже наверное ускоряют разработку.  Но дается это ценой того, что полного контроля они так и не дают, а рамки и предположения, которые они используют, приводят к визуальным артефактам: дыркам, задержкам, паразитным кадрам, левым анимациям. Модель, может быть, красива математически, но не по-человечески. И как ни старайся, в рамках данных технологий лучше не сделаешь.  Так вот, я такие ситуации называю «фреймворк победил программиста».",175
"Я тут прошел Inside и это самое сильное визуальное и эмоциональное впечатление от игры ИЛИ фильма за долгие последние несколько чего-нибудь. Серьезно, очень круто.  В игре/кино же обычно как? Ну там сюжет, персонажи там, геймплей. И ты на сознательном уровне это как-то можешь оценить, насладиться. А можешь на бессознательном — например, играть очень весело, а почему — да какая разница? Или визуально-эмоционально пробивает картинка/персонаж ситуация.  Так вот, для кино уже неплохо, если такой момент есть хотя бы один. Это сразу хорошее кино, потому что ты что-то от него получил, что-то именно важное для лично тебя, чего просто так, по щелчку пальцев не получишь. А для игр так и вовсе практически неслыхано!  И чудо Inside здесь в том, что в нем таких пробирающих моментов штук пять как минимум, и это за ~4 часа геймплея (она очень короткая). Но пять!!! Неслыханная концентрация, я преклоняюсь перед людьми, которые это так точно и так уверенно сделали.  Геймплей (это легкий пазл-платформер) базовый, картинка — безупречная, ракурсы камеры (каждый первый, а это ого-го как сложно) — мощнейшие. Ну и те самые пробирающие моменты, вызывающие то самое щемящее чувство — ну, это шедевр, бриллиант, так не бывает.  Но Inside есть. Я впечатлен, в общем.",176
"Читал вчера, как какие-то люди опять нашли друг друга в Твиттере и ссорятся, что же на самом деле означают термины UI и UX. Это такой интересный феномен: слова возникли на пустом месте, стали популярными, кто что имел в виду, когда их придумывал, давно забылось, и вот уже люди пытаются приписать им смыслы исходя исключительно из звучания самих слов. Опасная дорожка, говорю вам как человек, который пытался понять термины «reverse proxy», «декларативный фреймворк», «изоморфный javascript» и «теория струн» только из их названий.  Еще интереснее сам факт возникновения термина UX. Я понимаю, если бы профессия была, а слова не было. Но оно было: UI! Наверное, выглядело недостаточно серьезно: целая профессия и всего две буквы. Даже в известном слове три.  На самом деле, если хотите, про UI и UX я вам прямо здесь объясню. Дизайнер интерфейса, помимо собственно рисования, проектирует в том числе и опыт взаимодействия с ним, так? Значит UX – это подмножество UI. Однако во время проектирования пользовательского опыта так или иначе надо нарисовать в том числе и интерфейс, так? Значит UI – подмножество UX. А что следует из A ⊆ B ∧ B ⊆ A? Правильно, A ≡ B. Шах и мат, аметисты! UI = UX, доказано ЛО. ГИ. К. ОЙ.",177
"Я тут вспомнил, как на первом курсе препод показывал нам линукс и комманд-лайн. Потом у него пальцы соскользнули и он набрал какую-то ерунду, нажал энтер и это оказалась реальная команда.  «Хм, — сказал он. — Интересно».  Тогда-то я и понял, что это ваше АйТи это не серьезно",178
"Был такой ресерч-проект несколько лет назад, Eve. Chris Granger собирался переизобрести программирование, но не знал как. Знал только, что с нашим текущим состоянием что-то не так.  И вот они два года пытались нащупать, что можно сделать. Пробовали разные модели, разговаривали с пользователями, показывали не-программистам. Очень интересно, рекомендую Dev Diary почитать. А про один из инсайтов я прямо сейчас расскажу:  С большим удивлением они выяснили, что людям не очень-то понятна идея оперировать абстрактными данными. То есть когда пишешь f(a, b) = a + b, вот тут a и b не имеют конкретных значений, это «дырки» для чего-то, что будет заполнено позднее.  То есть понимаете, да? Это самые основы программирования, самый фундамент: писать абстрактные функции, оперирующие над абстрактными данными, строить из них домики в десятки этажей и особый шик функционального программирования: ни разу не сказать ни одной конкретной вещи, зато держать все абстракции в голове.  И это самое базовое действие УЖЕ оказалось противоестественным. Не удивительно, что в программисты идут люди определенного склада ума, а в массы оно так и не пришло.  Что же тогда людям понятно? Конкретные данные, таблица одна на программу, как в Экселе. Не вложенные таблицы, не бесконечное количество таблиц, не идея таблицы, а конкретно, два, восемь, пятнадцать, и индексы конкретные: A1, B2, C3. Программа == таблица, причем не ее форма, а конкретное наполнение. И чтобы из любого места программы можно было взять значение и записать значение, желательно по конкретному адресу. То есть да, опять получился пулемет, ой, то есть Эксель.  Дальше они там пытались очеловечить SQL и вообще понять, как в таком мире хоть что-то более сложное чем расчет зарплат программировать, но в целом других сравнимых по мощности инсайтов уже не нашли.  Я человек конечно радикальный, но сил в себе переизобрести программирование пока не чувствую. Тем не менее, мне кажется пару полезных выводов сделать можно.  Во-первых, это подсвечивает, что ваш код нужен людям сильно меньше, чем данные, над которыми он оперирует. А во многих случаях только данных и вовсе бы хватило.  Во-вторых, тот UI, который вы пишете для работы над этими данными, во многом люди терпят только потому, что вы не даете им сами данные. А если бы дали, они бы закрыли свои 99% потребностей базовыми перетаскиванием столбцов и ручной правкой ячеек. Оставшийся 1% решался бы, так и быть, одной-двумя кнопками с макросами, которые нажимались бы по большим праздникам.  В-третьих, игра в абстракции противоестественна для человека, однако тенденции в языках программирования такие, что мы наоборот, пытаемся абстрагироваться как можно больше. Может быть, пора вернуться к истокам? Процедуры, глобальная память?  В-четвертых, то, что 100% языков программирования идут без хоть какой-нибудь встроенной базы данных, даже уровня SQLite, это большой недосмотр и чистой воды призыв к велосипедостроению. Как человек, сделавший несколько проектов на DataScript, говорю вам: структурированные реляционные данные это полет, а вот эти вот классы-структуры-указатели так, возня в грязи.  В общем, это программирование я уже выучил, давайте следующее. Надеюсь, оно будет таким, что я смогу своей маме показать.",179
"Иван Дубров написал вчера в чате канала:  > Способность нарисовать какую-то картинку в GW Basic и сделать простую форму должны быть где-то на одном уровне. См. успех всяческих Delphi в своё время. Просто мы уже привыкли что нынче форму без React-а и миллиона костылей не сделаешь.  И я абсолютно согласен! Мне кажется мы стали забывать, что такое настоящая простота. Есть ли сейчас кто-то, кто оптимизирует именно это время, время написания простой формы? С учетом создания проекта, сетапа базы, бэкенда, компилятора, пайплайна, деплоя, короче — полный комплект, и чтобы за пять минут? Ну ладно, пятнадцать? Rails, кажется, когда-то был про это, а сейчас?  То что мы дивы научились красиво на странице расставлять это конечно круто, но остальная-то сложность никуда не делась.",180
"Знаю, бывают люди, которые хранят личные конфиги (дотфайлы?) в Гите. У меня к вам только один вопрос: как вы не забываете коммитить-то их?  Просто я даже в проектах часто нахожу незакоммиченные куски, потому что сделал и забыл. А личный конфиг это вообще чисто утилитарная вещь. Сделал - попробовал - не сработало - поправил - проверил - и вот на этом шаге ты вроде как уже переключился на ту задачу, ради которой трогал конфиг. И решил ее.  Как теперь вспомнить, что надо вернуться назад, сделать git add, потом git commit, потом сообщение придумать (а для этогоо желательно дифф посмотреть, то есть git diff или status или что там у вас любителей консоли), наконец, git push, ой, не пушится, git pull —rebase, git push, ну наконец-то!  А, и второй вопрос. Предполагается, что синкать конфиги нужно, если машин несколько. Как через полдня, когда пересядешь за другой комп, вспомнить, что надо запуллиться?  Сам-то я давно сначала Дропбоксом синкал, а теперь Syncthing-ом, там все само происходит и ничего помнить и делать не нужно.  Это серьезные вопросы, мне правда интересно. Может мнемоника какая есть? Крестик на руке ставите? Узелок завязываете?  P.S. речь именно о «дотфайлах», всяких ~/.zshenv, а не о конфигах в проектах",181
"Ладно, вот чего я не понимаю на самом деле, даже в теории. Ютуб сейчас есть у каждого второго, он очень часто регулярный, и очень часто (грубо, 50%+) содержит в себе существенное количество монтажа. Причем нетривиального, не такого, где вырезаются только паузы. Нет, там и наезды-отъезды, и титры всякие, и переходы, и эффекты, и параллельный монтаж нескольких источников, и музыка под ситуацию, и мемы каждые 10 секунд, и все это выверено с точностью до кадра.  И вот вопрос: а как они это физически делают-то? Я занимался монтажом чуть-чуть и по моему опыту это совершенно выматывающее занятие. Условно, чтобы сделать 10-минутный ролик, нужно 10 часов. Это прорва времени же, абсолютно непропорциональная, с каким-то совершенно деморализирующим КПД. Я, например, могу потратить 10 часов на пост, но это будет пост раз в два месяца, а не каждый день. Есть какой-то секрет? Как?",182
"Мало кто оценил, но для меня важным свойством Реакта в свое время, помимо упрощения рендеринга, стали lifecycle компонентов. Все эти «componentWillMount», «componentWillUnmount» и тому подобные. Казалось бы, идея банальная, но ведь не хватало!  Не потому что их не было в обычном доме (были какие-то) или нельзя было сделать (можно, но очень сложно), а потому что тут они работали надежно — если ты какую-то ноду замаунтил, то потом что бы ни случилось — ее удалят, родителя удалят, реакт прибъют — ты все равно получишь симметричный фидбек. Вот хоть компьютер сгорит, а событие об анмаунте придет. Кайф именно в гарантии.  И все. Гарантия открывает кучу возможностей — как минимум, можно ресурсы привязать, таймеры там всякие, запросы. А потом, если совершенно другая часть программы решит, что весь этот ваш юай не нужен, то это все аккуратненько прикроется и свернется, и никаких лишних хвостов не останется. Ушел юай — ушел и стейт.  Голова не болит, короче. Как автоматический менеджмент памяти после C++. Большое дело, а хвалят мало.",183
"Вещи, которые я миллион раз пытался запомнить и все безуспешно. Вот реально, каждый раз гуглю:  - Буквы строчные и прописные - ФРГ и ГДР - Resharper и Rider - Samsung и Siemens - Долгота и широта - Gross и net - Arch и Gentoo - Кабачок и баклажан - adduser и useradd - Паоло Коэльо и Умберто Эко  А у вас?  UPD:  - 12am и 12pm - even и odd - арабика и робуста - брокколи и цветная капуста - ^ и $ в регулярках - big endian и little endian - port и starboard sides - justify-content, align-content и  align-items - const char * и char * const - ipconfig и ifconfig - tracert и traceroute - антиква и гротеск",184
"Самый главный принцип качественного интерфейса — ничего не должно скакать.  Что значит «скакать»? Давайте разберемся.  Во-первых, это паразитные кадры. Если вы делаете анимацию, вы должны за каждый кадр отвечать, буквально. Да, он длится 16 миллисекунд, да, человек способен заметить мельтешение. Не должно быть такого, что что-то появилось на 100% яркости, на следующем кадре ушло в 0%, и потом уже плавно анимировалось до 100%. Это видно. Не должно быть непонятных ресайзов на несколько пикселей, не должно быть неточного вставания в позицию во время анимации.  Во-вторых скакать это значит менять позицию. Если что-то где-то появилось, пусть оно там и стоит. Не надо его после этого куда-то двигать к курсору поближе или чтобы место освободить или еще куда. Появилось — все, пусть стоит.  В-третьих, скакать значит мелькать. Елозишь мышкой по интерфейсу (без нажатий), а там то одно загорится, то другое, то выскочит что-то, то спрячется, то подсветится, то сам курсор туда-сюда форму меняет. Это очень шумно, ощущение, как от ярмарки. Правило простое — если я вожу мышку или скроллю, я НЕ взаимодействую с интерфейсов, то и интерфейс не должен меняться.  А как же тогда понять, что можно нажимать, а что нет? Ну так рисуйте кнопки похожими на кнопки, табы табами, чекбоксы — чекбоксами. И никто не запутается. Если посмотреть на операционные системы (а не веб), то там вообще-то кнопки не подсвечиваются и курсор при наведении на контролы форму не меняет. Потому что интерфейс рассчитан на длительное использование, а значит максимально успокоен. И ничего, люди пользуются, нахваливают даже.  Продадут ли эти правила ваш интерфейс? Скорее всего нет. Заметит ли их кто-то? Ну пара педантов-интерфейсодизайнеров может быть. Но есть мнение, что их нарушение нехило так подрывает ощущение люксовости, «хорошосделанности». Ну и в конце концов, должны же у нас быть какие-то профессиональные принципы и гордость?  P.S. Выезжающие шапки, которые нарушают все три пункта, засуньте пожалуйста в жопу своей персоне (термин UI/UX, все совпадения случайны).",185
"Я вообще дневники никогда не вел и записывать ничего не люблю, но так или иначе все-таки пришел к трекингу как минимум фильмов (чтобы потом глянуть список недавнего и посоветовать что-нибудь), сериалов (потому что через полгода хрен вспомнишь, на каком эпизоде остановился, да и нотификации получать неплохо), стран (чисто ради фана).  Но это все разные сервисы очень разного уровня качества. А можно ли как-то свести это все в один общий, более-менее универсальный и для всего? Полетел я, скажем, в Грецию, вбил: берлин-афины такого-то сентября такая-то авиалиния. Прочитал книгу — вбил название, может, пару заметок каких-то.  А потом в конце года (или еще лучше: в конце жизни) запустил какой-то хитрый поиск, который, скажем, из этой каши все посещенные города достал. Или страны. И ты такой: о, пятьдесят. Ну норм. Или: сколько книг такого-то автора прочитал. И он: семь, вот распределение по годам. В идеале даже хитрее, например: какой фильм я смотрел, когда был в Финляндии в 2017-м? Кто из пришедших вчера в гости не был на моей свадьбе в 2003-м? Сложные запросы и богатая метадата каждого события, короче.  И фишка именно в однообразности и универсальности. Типа, данные и метаданные к событиям в жизни, какие — я сам решу. Или не сам, но тогда там должно быть все на свете: книги, места, кино, сериалы, рестораны, блюда, люди, короче, реально, весь мир.  Идею когда-то Рахим подкинул (какой Рахим? Ну вы много знаете Рахимов? Вот тот самый), но я тогда не особо понял зачем. А сейчас вот подсозрел немножечко. Название «Database for life».  Вопрос: может есть такое уже? Как организовать? Если уже делаете, прикладывайте сразу скриншоты, чтобы можно было получить представление",186
"Одна из вещей в верстке, которая заняла у меня постыдные десять лет чтобы понять, это то, что воздух (отступы, пустрое пространство) вокруг компонентов — это свойство контейнера, а не самого компонента.  Почему? Потому что с компонентом, который еще и пространтсво вокруг себя контролирует, невозможно работать. Он никуда больше не встает, не переносится, да и там, где стоит, мешается, или требует исключений, если захочется что-то поменять. Какой-нибудь p { margin-bottom: 1em} это ад который мешает так же часто как и помогает, задолбаешься исключения прописывать.  Но стоит понять, что контейнер регулирует расположение своих детей, а сами дети не должны ни пикселя за своими границами контролировать, как сразу все становится легко и удобно. Не знаю, может, фронтендеров этому сразу на первой лекции учат, но мне вот пришлось самому догадываться. Но как только понял — сразу дело заспорилось.  Если еще короче сформулировать, то padding хорошо, а margin — зло.  Еще один неочевидный момент, в котором CSS только запутывает, это что у контейнера часто не хватает средств указать отступы между детьми, и эти отступы технически приписываются к ребенку. Типа, .header > .signup { margin-rigth: 10px} Тут важно понимать, что несмотря на запись, это не у .signup отступ 10 пикселей, а у контейнера, который его содержит. Просто другого способа обратиться к детям в контейнере нет.",187
"Ох , больше всего ненавижу , когда программисты ставят запятую в начале строки . Ну , знаете ,   const arr = [1             , 2             , 3             ];   Мотивация обычно такая , что добавление нового элемента не трогает существующие строки ( иначе пришлось бы дописать запятую у предпоследнего , а это портит дифф ) .  Ну ладно дифф , сколько ты его раз в посмотришь ? Раз в жизни ? Два ? А на запятые мне эти глядеть каждый раз , как файл открываю . Программисты , вы же тоже люди , вам же тоже должно быть присуще чувство прекрасного , хотя бы чуть чуть ?  Некоторые языки позволяют заранее поставить запятую после последнего элемента (trailing comma). Ну вы догадываетесь, наверное, что я об этих заблудших душах думаю,? Пусть пишут 1+2+ тогда уж, чтобы честно,  Код конечно не текст , но и специально давайте не портить то немногое , что в нем человеческого осталось ?  А диффы , что диффы ? Они и так во всем остальном не структурные , так что помощи от ваших запятых один раз на миллион .",188
"Я как-то уже писал, что бывают спорные вопросы (табы или пробелы, питон или хаскелль, светлая тема или темная). Какие-то из них чистых холивор, а какие-то решаются очень просто: есть железобетонный, несдвигаемый аргумент, и хоть в лепешку разбейся, ничего ты с ним не сделаешь.  Один из таких вопросов: case-sensitive файловые системы. Винда и Мак, как вы знаете, case-insensitive, то есть кладут болт на регистр букв в именах файлов. А Линукс, соответственно, чаще всего case-sensitive, то есть болт не кладет.  Как же лучше? Конечно case-insensitive. Почему? Давайте просто посмотрим, какие плюсы дает нам case-sensitive система.  Плюс первый: можно создать рядом файлы file и File и это будут разные файлы. Можно даже в гит их закоммитить, коллеги наверняка скажут вам спасибо.  Плюс второй: при открытии файла можно ошибиться в регистре и не открыть файл.  Все. Теперь анализ. По первому пункту: а нафига? Нафига вам иметь два файла, различающихся только регистром?  По второму тоже просто: чуствительность к регистру строго увеличивает количество ошибок. Лучше не становится, но в некоторых ситуациях становится хуже.  Итого: case-insensitive строго лучше, чем case-sensitive. Расходимся, дело закрыто.",189
"Я вам не рассказывал, но я ж купил VR. Взял Valve Index, чтобы Half Life, и, кажется, не прогадал.  Что могу сказать? Играть не во что. Те игры, которые есть, ну, это больше технодемки, чем игры. Надоедает очень быстро. От движения тошнит моментально.  Но. Но. Виар это наше будущее. Никаких сомнений, вот вообще. Серьезно.  Основная проблема мониторов, какими бы большими они не были — это просто картинка в рамке. Ты можешь убиться об асфальт и сделать самую лучшую графику в мире, и игроки даже смогут ее оценить, и она произведет какой-то эффект. Но это эффект примерно как от описания пляжа в книге — ты понимаешь, что имелось в виду, можешь оценить уровень владения словом, сравнить с другими книгами и даже нафантазировать себе чего-то. Но это ни в какое сравнение не идет с той бурей ощущений, которые ты испытаваешь, придя на настоящий пляж. Ни в какое.  Так вот виар по сравнению с монитором — это real deal. Играя в условный Дум, как бы ни старались его создатели, они не могут сделать даже самого гигантского монстра, даже высотой с небоскреб, больше, чем условные 30 сантиметров монитора. И как бы глубоко ты ни погрузился в игру, твои рецепторы этот факт не забудут.  А виар дает делать по-настоящему большие вещи. Соразмерные человеку, больше человека, меньше, но так, что этот масштаб реально ощущается. И внезапно оказывается, что для погружения, для впечатления, для перехода на следующий уровень как раз этого и не хватало. Когда ты видишь трипода высотой с пятиэтажку, у тебя потряхивает коленки, потому что самые глубокие, самые базовые инстинкты говорят тебе «прячься нахуй». А тот же самый трипод на мониторе — хмыкнул, пожал плечами, пошел на кухню заварить чайку.  И так со всем, не только с размером. Заходить в темный тоннель — стремно. Лазить по инопланетной слизи — противно. Смотреть вниз с крыши — трясутся коленки. Солдаты, которые тычут в тебя электрической палкой-наказалкой — заставляют тебя серьезно занервничать. Полное погружение, короче.  Трюк в том, что особо хорошая графика-то и не нужна. Полдела делает само ощущение места и размера, звуки, позиционированные в пространстве, возможность вертеть головой и отсутствие отвлекающего настоящего мира на периферии.  Это все применимо и к играм, и к кино. Дюна даже в самом большом имаксе производит умеренно-эстетическое впечатление. Что-то подобное, но в виаре перевернуло бы мир развлечений одним мизинцем.  Понятно, что все наработанные за сто лет паттерны развлечений — камера, монтаж, управление — все это бесполезно в виаре. Все надо придумывать заново. И пока что мы только в самом начале пути: шлемы неудобные, игры больше туториалы, кина вообще нет. Тошнота, опять же.  Но стоит один раз попробовать и всякие сомнения отпадут: развлечения будущего будут именно такими. Потому что это следующий уровень. Потому что настоящее погружение. Потому что свежие, сильные и непосредственные эмоции. Потому что в играх снова, по-настоящему может быть страшно. Но рассказывать бесполезно, это надо попробовать, чтобы поверить.",190
"А, еще про один прикол не рассказал. Это что в виар начинаешь больше использовать свое тело. Это неочевидно поначалу, потому что в компьютере весь ввод обычно условный — надо сделать Х, для этого нажать кнопку Й, которые вообще говоря никак друг с другом не связаны.  А тут подходишь к двери и никакой подсказки не появляется. Сначала тупишь, а потом понимаешь, что надо просто взяться рукой за ручку и потянуть. То же самое с предметами на полу: как их поднять? Присесть, епта. Или гранату кинуть: как замахнешься, так и полетит.  Это круто еще и потому, что в теле раз в сто больше разных мышц, чем в пальцах, которые лежат на контроллере. Да, Человек-паук может передвигаться по Нью-йорку восемьюдесятью разными способами, а ты, играя в него, можешь вообще ни одним мускулом на теле не пошевилить, знай только дави на кнопки.  А в виаре эти действия, во-первых, естественны (как учиться заново ходить), а во-вторых, гораздо интереснее, потому что тело может многое, чего не могут десять кнопок и два стика. Лучший интерфейс — это твоя правая рука, wink wink. Это я вам как человек, прирастающий к креслу на восемь-десять часов в день, говорю.",191
"Короче такая история. Был я маленький, и стоял у нас дома компьютер, кажется, 486-й. А через несколько домов жил мой друг, у которого тоже был компьютер примерно такой же. Играли мы в то, кто что мог раздобыть, и, конечно, менялись.  И вот я прихожу к нему как-то в гости, а у него какая-то игра ну ваще кайфовая. Какая конкретно, сейчас не вспомню, но как будто какая-то top-down тактика типа Jagged Alliance, только попроще. Я, конечно, ее себе захотел. Померяли размер. Вышло то ли три мегабайта, то ли пять.  Окей, прихожу домой. Смотрю, что по дискетам (прикиньте, флешек на терабайт еще не было!). Нашел одну 1.44 Мб. Почесал репу. И тут вспомнил про архиватор! Кто-то мне его как раз накануне показал, и это поди даже не ZIP был, а какой-нибудь ARJ.  Я что-то там заархивировал и померял размер. Получилось что-то типа 70% от оригинала. Неплохо, но на дискету не влезало. Я расстроился и лег спать.  И тут подсознание сгенерировало гениальное решение: а что если заархивировать сам архив? И так несколько раз? Рано или поздно-то он ужмется до нужного размера, если каждый раз будет по 30% отрезать. Ну да, муторно, придется несколько раз команду запускать, и распаковывать потом долго. Но все равно легче, чем между домами с одной дискетой бегать!  Довольный своей гениальностью, а пришел к другу, уговорил его перестать играть и дать мне заняться переносом игры. И тут-то меня и ждал самый грустный сюрприз в моей жизни: уже на второй раз архив перестал уменьшаться, даже стал на несколько байт больше.  Это был первый раз, когда я серьезно разочаровался в компьютерах.",192
"Вот чего я не понимаю, так это мигающего курсора. Идея ладно, понятна: если текст статический, а экран черно-белый, единственный способ выделиться — помигать. Но это было, когда, 50 лет назад?  Как появился цвет, в мигающем курсоре необходимость в общем-то отпала. Текст черно-белый, курсор – синий, зеленый, красный, оранжевый, фиолетовый, да какой угодно. Находится моментально. Вот я сейчас пишу в Sublime Text с темой Writer, все прекрасно видно.  Тут, конечно, врываются программисты с их Christmas Lights Diarrhea темами для редакторов. Когда используется все восемнадцать цветов и каждая буква раскрашена в другой цвет, чем соседняя, конечно, курсор ничем не покрасишь. Поэтому я, кстати, люблю спокойные темы.  В чем проблема мигающего курсора? Да в том, что половину времени он на экране, а половину — нет. Как вам идея искать что-то, что никак на экране не нарисовано? Не очень, да? Ведь никто не гарантирует, что в те миллисекунды, когда вам понадобился курсор, он будет в видимой фазе. Приходится по два-три раза сканировать экран, чтобы наверняка.  Ну и тут мы, наконец, приходим к тому, чего я не понимаю. А где, собственно, альтернативные решения? Курсор, мигающий двумя цветами? Курсор, не исчезающий полностью, а только до половины яркости? Курсор, анимирующий свою высоту/толщину вместо цвета? Что-то я такого не видел, вот что странно.  Если бы я делал свой редактор или UI-фреймворк, у меня точно не было бы опции, когда курсор 50% времени вообще не видно. Потому что это максимально тупо и не имеет никакого смысла.",193
"В Твиттере Дэн Луу пишет, что внезапно обнаружил, что многие опытные программисты не следуют «общему пониманию эффективности» и наоборот, задрачивают скорость набора текста/кода, пишут длинные функции и т.п.  Про длинные функции у меня уже был пост (был же, да?), а вот про скорость кодирования хочу набросить.  КОНЕЧНО скорость набора текста важна. КОНЕЧНО личная эффективность важна. Программист, который набирает одним пальцем код, это как шеф-повар, который не научился владеть ножом. Или водитель, который никогда не переключает передачи.  Печальный факт состоит в том, что код недостаточно придумать. Его нужно как-то внести в компьютер. И не надо мне рассказывать, что вы думаете 95% времени, а набираете код 5%.  В-первых, наверняка же не 5%, а ну 20%-30% как минимум.  Во-вторых, набор все-таки присутствует, никуда от него не деться, а значит, есть смысл его оптимизировать.  И в-третьих, если вы делаете это медленно, то... зачем? Какие причины заставляют вас НЕ оптимизировать то, что оптимизируется проще и лучше всего?  Только не надо заливать, что вы зато вместо этого оптимизируете голову. Во-первых, наверняка тоже не оптимизируете. Во-вторых, одно другого не исключает.  Я готов принять, что на заре карьеры есть некий выбор — разбираться с языком или дрочить редактор. Но через года два-три про само программирование уже более-менее все понятно, и если вы к этому моменту не порхаете по кодбазе и не правите код килобайтами в секунду, то я не знаю, почему вы этого не делаете.",194
"Я тут артефакт в Мавен Централ запихивал. Это такой репозиторий глобальный для Джавы. Ну и как и всегда в Джаве, всю осмысленную работу делаешь за 15 минут, а потом 7 часов ебешься с кафкианской бюрократией.  Не, я был готов, что раз это что-то центральное, то там все будет плохо. Но настолько?  Про приятное: jar-ку я собрал за 15 минут. Все, что идет в комплекте с JDK — прекрасные, удобные, стабильно работающие вещи: javac, jar, javadoc, java. Наверное, потому что люди, программирующие JDK, на Джаве не пишут.  Подписал еще минут за тридцать. Там нужен GPG, ну и всякая возня с Github Actions, традиционная для linux еботня: немножко помучался, немножко в говне измазался, 40 вкладок с гуглом открыл, но задачу выполнил.  И дальше, сука, начинается кафкианский процесс. Вот у меня лежат восемь файлов: три джарки, pom.xml и четыре подписи к ним (не то, чтобы нам все это было нужно, но когда начал, остановиться трудно). В конечном итоге в Maven Central будут лежать ровно эти же восемь файлов. Побайтово те же. И ничего сверху.  Казалось бы, насколько сложно их будет туда положить? Ну, curl какой-нибудь с Auth токеном, да? В цикле? Казалось.  Что нам говорит документация? На тебе, говорит, плагин для мавена. Нахера мне плагин для мавена? У меня и мавена-то нет. Ну ладно, давайте попробуем.  Попробовал. Типичный мавен: ты что-то в него пишешь, а потом ничего не происходит. Документации нет (это ж плагин). Точнее, документация такая: просто вызови mvn deploy. Вызываю. Не реагирует. Вызываю более настойчиво. Не, каких-то ключей не хватает, урлы не те, тут я вообще не понял, и вообще ты мудак, иди нахер. Ладно.  Следующая строчка в документации: если не хотите использовать mvn deploy, зовите mvn nexus-staging:release. В чем разница? Ладно, пробую. Нет такого плагина. А я все ну вот побуквенно скопировал из доки, хоть плач. И опять я мудак. Ладно. Типичный мавен.  Смотрю еще в документации. О! Ручной деплой. Ну там-то поди есть заветный URL для curl-а? Не-а. Ручной — это реально ручной, зайди, говорит, на сайт, и мышкой накликай. Я думал, компьютеры должны избавлять человека от работы, а не создавать ее.  Пошел посмотреть на их UI. Я, конечно, был готов к тому, что Джава-программисты традиционно не умеют в веб (а во что они, вообще говоря, умеют-то? В десктопы тоже не особо получается). Но тут меня встретило просто дно дна. Это какие-то табы и панельки из 90-х, как будто Эклипс взяли и засунули в браузер, а иконки натырили из какого-то бесплатного банка.  Ладно, думаю, но есть же мавен-плагин, который делает этот самый треклятый деплой. Значит, у него есть исходники. Значит, где-то внутри он делает http-запрос. Значит, можно его реверснуть. Так?  Так, да не так. Maven плагины это помойка с эффективностью примерно 1000 строк Джавы на 1 curl-запрос. Естественно, он собирается по кусочкам, которые достаются из всех возможных жоп: констант, импортов, классов каких-то, бинов. Там целая инфраструктура с фабриками чтобы, скажем, сегмент /promote/ в URL дописать.  Пошел гуглить, может REST API задокументирован где-то? Задокументирован, для третьего Нексуса. А у Сонатайпа какой? Конечно второй.  Может, ко второму документация есть? Есть, конечно же, вот она. Статья 2018-го года. Само АПИ, говорит, мы вам не покажем, пореверсите в браузере. Вот как включить: три ссылки, объясняющие, что такое девтулы, и одно видео (!!!) с заветной командой. Видео, конечно, недоступно. Вообще ни одно видео не доступно. Ну разумеется.  Вопрос только один: это все следствие какого-то survivorship bias? Нормальный человек на Джаве писать не пойдет или что? Почему так плохо все в КЛЮЧЕВОМ элементе инфраструктуры? Почему Мавен-репозиторий это не тупо SFTP папка, например? Нахрена мне настраивать какой-то maven плагин, если вызвать gpg и дернуть curl я могу хоть из баша, блин. Я же не безрукий.  Вообще, вот мотто Джава экосистемы: «нам не нравятся существующие стандарты, мы напишем свое такое же, но на Джаве, а еще мы программировать не умеем».  Так и живем.",195
"В комментариях к прошлому посту @T0rvin порекомендовал статью «It's probably time to stop recommending Clean Code». И это отличная статья, которая разносит в пух и прах Боба Мартина (Uncle Bob) и его неспособность написать хоть сколько-нибудь приличный код, даже для книжки. Абсолютно поддерживаю.  Код из книги, кстати, очень похож на то, что я видел в Гредл-плагине — неужели по этой книге кто-то реально учился и потом начал так же программировать? Похоже на то 🙁  Но сказать-то я вот что хочу. Есть такой интересный феномен, который я и в своих публичных высказываниях заметил, и у других программистов-(микро)блоггеров. Как-то только ты перестаешь пытаться донести какие-то сложные идеи, пытаться разобраться, как устроен мир, и начинаешь просто давать безаппеляционные советы, как жить, так сразу популярность резко возрастает. Да, вот просто говоришь: делайте так и только так, или вот такой принцип, следуйте ему. Очень востребованный контент.  Прикольная часть состоит в том, что качество совета совсем не важно. Можно советовать полную ерунду. Можно советовать вредные вещи. Можно уметь программировать. Можно не уметь программировать, но все равно учить других (что мы, собственно, на примере Боба и видим). Работает одинаково.  В принципе, это и логично: если тебе нужен совет, ты по определению не в состоянии оценить его качество. Приходится ориентироваться на другие признаки: известность говорящего, громкость голоса, рост.  Что с этим делать не особо ясно. Но дядюшку Боба лучше не слушайте – здоровее будете. А ведь я еще радовался когда-то, когда он на Кложу перешел, думал, раз известный человек, рекламу сделает. Наивный, я не знал, чем именно он известен.",196
"Вообще если про дизайн-философии, то я, конечно, за there’s only one way to do it. В смысле если что-то надо, то вот вам один способ, дальше уже как-нибудь сами.  Во-первых, это очень экономит силы. Типа, кто его знает, какие у вас там представления об удобстве. Кому-то, вон, кажется, что названия методов в 20 слов (да, слов, не букв) это descriptive. А с TIOOWTDI ты не пытаешься угадать или кому-то там угодить, как только что-то становится возможным, твоя работа закончена.  Во-вторых, это такая бритва Оккама: если есть два одинаковых способа сделать что-то, ну, бери тот что проще. Если один выражается через другой — бери более фундаментальный. Главное, что это actionable критерий, который позволяет решить проблему буриданова осла и не медитировать бесконечно между pen.write(paper) и paper.write(pen).  В-третьих, заранее все равно не угадаешь. Если через три месяца двадцать человек придут и скажут «хотим по-другому, так, как есть, неудобно», значит, это не еще один способ сделать то же самое, а в чем-то фундаментально другой. Даже пусть в удобстве, но за три месяца тебе это удобство уже так ясно в словах сформулируют и кристаллизуют, что никаких сомнений в полезности и измеримости преимуществ не останется. А если не сформулируют — значит, не так сильно и надо было.  Но вообще все это проистекает из глубинного страха кому-то что-то советовать и назидать, наверное. Я всегда завидовал людям, которые могут прийти и сказать: вот так вам будет удобно, делайте как я говорю. Я так не могу и вообще верю в то, что пользователи умнее меня и сами разберутся. Может быть, зря, и это сдерживающий фактор успеха — ну, кто знает?",197
"В апреле я написал пост о том, как сделать из Sublime Text почти что iA Writer (Building an ultimate writing machine from Sublime Text).   Понятно, что тема нишевая, и я буду рад, если хотя бы десятку людей хоть какая-то часть этого сетапа пригодится. Нет, я пользуюсь каждый день, каждый пост сюда так написан. Но «продать» эту идею шансов почти нет — в конце концов, кто из программистов много пишет?  Ну и вот, в реплаи в твиттер пришел какой-то хуй (перечеркнуто) noname и написал, буквально, «HERE LOOK, I MADE A LIST OF PEOLPE WHO CARE:». Типа, всем похуй.  Но забавно и то, что в те же самые реплаи в тот же день пришел основатель Roam Research, попытался воспроизвести сетап в своем продукте, слово за слово, познакомились, подружились, и вот сегодня уже две недели, как я вышел к ним на работу, с зарплатой в 1,5 раза больше чем в JetBrains и карт-бланшем делать десктопную версию на Кложе. А как все невинно начиналась, нарисовал темку для Саблайма.  Мораль, наверное, такая, что делай что нужно и будь что будет, предугадывать, как что тебе аукнется — дело бесполезное (например, еще одна история, я как-то похвалил Notion в Grumpy (да, похвалил) и на следующий день уже разговаривал с CEO Pitch — казалось бы, какая связь), а доказать что-то проходившему мимо мудаку, которого ты никогда в жизни не видел и не увидишь — главный мотиватор карьерного роста.  Так и живем.",198
"В прошлом посте я упомянул, что написал хвалебный пост о Ноушене и привлек внимание основателя Wunderlist/Pitch. Чего я не упомянул, так это того, что я до этого написал аж три ругательных поста в том же месте и в том же стиле, и они никакого внимания не привлекли.  Рефлексируя над этим, возникла концепция информационных пузырей, в которой люди с разным майндсетом (ну а как по-русски сказать?) просто неспособны слышать друг друга, пока не начнешь говорить именно на их языке.  Например, копаясь в UX проблемах, я нашел какое-то количество важных и серьезных тенденций, но их трудно доносить до широкой аудитории: они просто слишком занудны, слишком неконвенциональны, слишком неочевидны при поверхностном взгляде.  Скажем, какой-нибудь Welcome Screen, который недавно стал появляться в Эппл-приложениях: я вижу серьезную проблему и неудобство, а какой-нибудь серийный основатель стартапов видит: а) бесплатную рекламу, б) возможность сыграть на fear of missing out и продавать подписку и в) возможность «сделать как у Эппла»/«как у всех», то есть быть в тренде. Поэтому если я поругаю велком экраны, люди такого плана пожмут плечами и пройдут мимо, даже, возможно, не заметив аргументы. Зато если им такое нарисуешь, они будут рады как дети и может даже дадут премию. Интересы владельца бизнеса вообще говоря не совпадают с интересами пользователя, а продаешь ты фичи, увы, не пользователю.  Зачем я это пишу? На самом деле это не критика «у какие тупые» и «вот почему все плохо». Скорее это повод, а интересен мне здесь психологический аспект, как думают такие люди, потому что в идеале я тоже хотел бы стать дизайнером продуктов и найти свою аудиторию.  Так вот, интересный вывод, который я, кажется, нащупал, это что продукт дизайнится из «положительных», «добавляющих» фич, а не из критики. Можно долго распинаться, сколько вреда приносят welcome screen-ы или неработающая кнопка назад, но в конечном итоге продукт не сделаешь из «отсутствующего welcome экрана».  Экран, в конце концов, можно в продукт добавить и какую-то, пусть не главную, проблему решить. Сумма решеных проблем за два-три-пять лет работы и будет вашим продуктом. А «чистоту и аккуратность», «ненавязчивость» добавить и, скажем, продать нельзя. Интерфейс, хоть он и зло, в конечном итоге будет состоять из того, что мы в него добавили, а не из того, что убрали. Можно хоть всю жизнь полировать пустой экран, но пустой экран никому не нужен. Пользователи приходят за тем, что в конечном счете в интерфейсе осталось.  Нужно, короче, нужно думать в терминах «что делать» и «что добавлять», а в терминах «почему это плохо» думать не нужно. Сорян, если это звучит мутно, но не напишешь — не поймешь. Может, кому-то пригодится.",199
"Одна из вещей, которым меня научила Кложа — это что когда программировать легко, то многие вещи, которые в других языках оформлены целыми библиотеками, можно просто мимо проходя сделать и не заметить.  Скажем, на Java, чтобы какой-нибудь там файл сохранить, прочитать или распарсить, надо неделю раскачиваться, типы завотить, классы какие-то, все это организовывать, архитектуру придумывать.  А на кложе это две строчки и регэксп какой-нибудь. Все помещается в одну функцию.  Кажется, что это количественное изменение, но в таком масштабе оно уже перерастает в качественное. Ты больше не боишься данных и задач, а щелкаешь их, как орешки. Сложно описать, сложно поверить, так что могу только собственным ощущением поделиться.  Именно это качество, мне кажется, поднимает Кложу на следующий уровень в лестнице языков. Легкость написания кода.",200
"Многие заметили, что мол непонятно, вроде прочитать файл легко где угодно. И действительно, надо бы придумать хороший пример, но сходу у меня его нет. Давайте попробуем?  Например, такая задача: есть путь до CSV-файла, надо его открыть, прочитать заголовок (первая строка), найти колонку Salary и вывести топ 10 зарплат.  Хороший ли это пример для демонстрации возможностей Кложи? Не знаю. Может оказаться, что это везде делается тривиально. Но давайте попробуем, хоть на код посмотрю.  Итак, Clojure:   (defn total-salary [path]   (with-open [rdr (io/reader path)]     (let [[header & body] (line-seq rdr)           col (.indexOf                 (str/split header #"","")                 ""Salary"")]       (->> body         (map #(str/split % #"",""))         (map #(nth % col))         (map #(Double/parseDouble %))         (sort)         (reverse)         (take 10)))))   Кидайте свои реализации на ваших любимых языках. Использовать можно только стандартную библиотеку. Колонки в CSV простые, без строк с эскейпами.  (UPD: поменял сумму на top 10, чуть поинтереснее должно получиться)",201
"Итак, по поводу вчерашнего соревнования: победил язык J! Решение в 28 байт, спасибо Юре Кашникову, который его прислал.  По этому поводу соображения следующие:  Во-первых, очень много комментариев было о том, каким должен был бы быть код вместо самого кода. То есть первый инстинкт профессионального программиста это не написать программу, чтобы что-то объяснить, а пофантазировать о том, как она могла бы выглядеть. Это манифестация того самого FizzBuzz? Программистам платят за код, а не за рассказы о нем, и то, что должно лучше всего получаться у программиста это код. Видели писателей, которые сочиняют офигенные романы, но не умеют печатать или писать буквы? Я нет (но я вообще писателей не особо видел).  Второе это play the real game. Цитата из поста «Are You Playing to Play, or Playing to Win?»:  > Make sure you’re playing the real game, not some more complicated game you’ve made up for yourself.  Смотрите, вам в руки попал csv-файл, и вам нужно узнать топ 10 зарплат. Можно написать «правильный» код, который абсолютно корректно парсит файл, обрабатывает ошибки, минимально ест память, не теряет файловые дескрипторы, документирован и еще что-нибудь (все советы из комментариев).  А можно открыть конкретно тот файл, который у вас на руках, посмотреть, есть ли в нем escapes, глянуть на размер и написать самый плохой, но минимально работающий код, который выдаст вам ответ. В конечном итоге, все, что важно — это ответ, а программу можно сразу после этого выкинуть. Людям не нужна дрель, им нужны дырки в стенах.  Поэтому все советы о том, что «в реальности такая программа бы не прошла», зависят от этой самой реальности. Если вы пишете сервис по приему csv-файлов, то вам нужно как можно точнее поддержать формат. Если вы получаете csv-шки от внешнего API, то можно срезать какие-то углы, например, размер файла. Если вы получаете его из внутреннего API и можете гарантировать, что там не будет закавыченных строк, то можно обойтись регулярным парсером. А если вам надо посчитать это один раз, то берите Эксель 🙂  Я не говорю, что обрабатывать ошибки, быть толерантным к формату ввода или оптимизировать память не надо никогда. Я лишь говорю, что в зависимости от конкретной ситуации, эти аргументы могут иметь нулевой вес. Не небольшой, не «едва заметный», а именно нулевой. Побеждает всегда самое простое и быстрое в данной конкретной ситуации решение, а не самое правильное, сделанное для ограничений, которые вы сами для себя и придумали.  Третье это батарейки. Решения на Питоне, Руби, JS, Julia, J, R, Go, Rust и SQLite использовали встроенную в язык поддержку CSV и получились очень короткими (ну, кроме Rust и Go :). По поводу батареек могут быть разные мнения, в конце концов, вместо батареек можно и библиотеку взять.  Но мне кажется, что, во-первых, библиотеку всегда можно взять, даже если есть батарейки, а во-вторых, какое-то количество разумных вещей, которые люди обычно делают с компьютерами, не грех и включить в поставку. При прочих равных, это сильно уменьшает порог входа (языком можно пользоваться сразу, ответы на СтекОверфлоу звучат проще), увеличивает применимость (например, можно писать скрипты) и упрощает интеграцию сторонних библиотек друг с другом. Удобно, когда две разные библиотеки используют одни и те же даты, словари или дескрипторы файлов, и очень неудобно, когда разные библиотеки тащат разное.  В-четвертых, пример может быть вышел не совсем удачным: преимущества Кложи, как я рассчитывал, я так и не показал. Во многих языках проблема решилась достаточно неплохо, и даже Джава показала себя достойно. Я не хочу отказываться от своего тезиса (проблемы щелкаются на Кложе легче, чем на других языках), но как минимум я понял, что надо научиться лучше объяснять проблему и, видимо, подобрать пример. У Ивана Гришаева есть отличный пост «Зачем нужна Кложа», почитайте, он объясняет лучше.",202
"Если и фантазировать про ОС будущего, то файловая система им будет не нужна, нужна будет база данных.  Во-первых, гарантии. Идея, что на файлах нельзя практически ничего надежно и атомарно сделать, это какой-то абсурд, фундамент из песка. Почему, пока я пишу, другой процесс может прочитать частично записанный файл? Зачем это? Какой у этого юз-кейс? А создавать файл во временной директории, чтобы потом атомарно его перенести? Я до сих пор в шоке, что компьютеры вообще хоть как-то работают.   Как должно быть: открыл транзакцию, создал файл тут, записал что-то там, тут папку перенес, закоммитил все разом. Или откатил. Я многого прошу?  Во-вторых, само АПИ к файловой системе. Оно сейчас на уровне NoSQL: можно получить информацию по одному файлу или список детей. Рекурсию пиши сам. Запросы пиши сам. Обходы пиши сам. Нотификации об изменениях получай поллингом, епта. А, пока будешь обходить дерево, другой процесс в нем что-нибудь поменяет, и ты никогда не узнаешь, лол. NoSQL, если что, это не самый удобный способ доступа к данным. Самый тупой — да, но не удобный. Понятно, что раньше надо было экономить на всем, но сейчас-то уже не нужно.  Как должно быть: утилиты find вообще существовать не должно, а должен существовать язык запросов, SQL или типа SQL, который может атомарно выдать всю нужную информацию. Естественно, запросы не только по пути, но и по ACL, и по мета-информации. Плюс реактивные нотификации, что-то типа changes feed, с возможностью фильтрации. И это все не из bash-а, а на уровне системных вызовов прям.  В-третьих, сами файлы. Сейчас это тупо byte[], что как бы универсально, но и универсально неудобно: людям приходится придумывать, как засунуть в byte[] их собственные структуры, а это разброд, шатания, каждый изобретает свои форматы, они все друг с другом не дружат, куча сил тратится на сериализацию-десериализацию, а файлы для большинтсва утилит остаются непрозрачными.  Идет это от того, что файл вещь дорогая и неудобная, поэтому файлов программы стараются создавать поменьше, а запихнуть в них — побольше. Ну и от того еще, что ничего кроме fread и fwrite система не предоставляет.  А вот если бы файлы были дешевле, удобнее и имели бы типы, то в принципе конфиги можно было бы хранить как одно значение == один файл. Тут на самом деле сам термин «файл» размывается, это уже и не файл будет, а  табличка в неймспейсе вашей программы.  Если грубо, не ФС → byte[] → ваши данные, а ФС → ваши данные → иногда (в порядке исключения) byte[], например, для совместимости с чем-нибудь старым.  Проделайте как-нибудь мысленный эксперимент: если бы у вас не было файлов вообще, но была общая на всю систему база данных и системное API для доступа к ней, какие задачи стали бы невозможными? А какие из них стали бы существенно легче?",203
"Все знают комикс XKCD про 14 competing standards. Типа, 14 конкурирующих стандартов это проблема, давайте придумаем один, который их объединит, ой, теперь у нас 15 конкурирующих стандартов.  Обычно его вспоминают, когда хотят кого-нибудь заткнуть: типа, че ты высовываешься, бери то, что есть и не придумывай.  И это все круто и понятно, кроме, собственно, одного момента: а как, по-вашему, эта ситуация должна разрешиться? Просто сидеть и ждать, когда тринадцать из четырнадцати отомрут? Да тут скорее я на пенсию выйду.  Штука в том, что если стандартов реально 14, значит, они все решают какую-то часть проблемы и не решают какую-то другую. То есть просто сидеть и ждать, когда один победит, явно не вариант, потому что победить ни один не может по определению.  А это значит, что все еще есть пространство перекомбинировать плюсы и выкинуть минусы, сделать 15-й, да, но не простым повторением, а с прицелом на то самое доминирование. Раз 14 стандартов до сих пор не могут выбрать победителя, может быть, нужно что-то качественно другое как раз? Каждый из 14 существующих тоже писался в условиях, когда его никто не просил, и когда вокруг уже была куча конкурентов. Но чего-то в них не хватало.  Тут есть проблема, что не всегда лучшая технология это самая популярная технология (worse is better), но я воспринимаю это просто как еще одно качество: не только технически лучше, но и операционно/когнитивно лучше, то есть проще и понятнее. Вполне себе ось, по которой тоже можно оптимизировать.  Короче, мораль простая: стандарты, конечно, переизобретать не нужно, кроме случаев, когда нужно.",204
"Тут внезапно выяснилось, что не все знают, почему XML умер, а JSON победил. Это, если что, на моих глазах произошло, я помню, как все носились с этими XML-ками дурацкими, редакторы для них специальные писали, парсинг was a big deal. Реально было движение за XML-изацию всего, даже HTML пытались в XML засунуть (XHTML называлось, все забили в итоге).  XML — это такой очень странный формат описания данных, который ни на что в компьютере не похож. Каждый узел — это одновременно И словарь (атрибуты), И список (дети). Атомарный тип данных только один — строка. Причем все это приправлено разными условиями: словарь неполноценный (только строки), а список только рекурсивный (другие XML-элементы), пробелы у строк обрезаются, строки могут содержать другие XML элементы, список строк не создашь, ну и так далее.  И это все прекрасно, но хранить-то программистам надо совсем другие, гораздо более простые вещи: числа, строки, словари, списки. В этом смысле XML это уже не просто прозрачный формат сериализации данных, а какой-то свой собственный мир со своими условиями и философией, который не будет просто хранить какие попало данные, нет, тебе надо его уговаривать, работать с ним.  А работать никто не любит. Посмотрите:   <field type=""array"" name=""arr"">     <value type=""integer"">1</value>     <value type=""integer"">2</value>     <value type=""integer"">3</value> </field>   Ну что это такое, а? Несмешно даже. Сравните:   {""arr"": [1, 2, 3]}   И дело даже не в том, что в XML нельзя что-то представить. Дело именно в том, что необходим этот дополнительный шаг семантической конвертации из формата программы в XML. А JSON — это буквально ваши данные как они есть.  JSON-революция это кстати пример одной из действительно хороших и позитивных революций в IT.  Почему HTML до сих пор не переделали на JSON? Моя версия — потому что писать в основном текст с редкими вкраплениями тегов все еще удобнее в HTML. А вот все остальное — в JSON.   {""doctype"": ""html"",  ""head"": {    ""meta"": {      ""charset"": ""UTF-8""    },    ""title"": ""Webpage""  },  ""body"": ....}   UPD: Пост слегка переписан, в первой версии проблемы XML я назвал «потому что он дерево»",205
"Наверное, самое смешное и наивное, что я видел вообще в компьютерах, это когда создатель Маркдауна предложил, что дополнительный пробел в конце параграфа должен что-то там означать.  Выводов можно много сделать. Например, даже самые великие вещи нельзя придумать сразу целиком хорошо. Или что даже умные люди не застрахованы от очевидно дурацких идей.  И все равно, каждый раз как вспоминаю, улыбаюсь.",206
"Лучший интерфейс — это когда все работает и стыкуется само. Во-первых, это просто, а простое использовать всегда приятно. А во-вторых исключает ошибки.  Поясню, о чем я. В какой-нибудь условной Java каждый файл в принципе самодостаточен: неважно, где он лежит и кто лежит рядом, его всегда можно скомпилять и получится одно и то же. В этом смысле и сборка, и запуск Java-программ это такой большой котел: ты в него что-то кидаешь в произвольном порядке, а оно потом как-нибудь само разберется.  Потом это, конечно, испортили, и сейчас, как я слышал, в условном Maven и в условной Idea файлы должны лежать строго в папках, соответствующих именам пакетом, да еще и в src/main/java. Файлы перестали быть самодостаточными, появилась некая «хрупкая» мета-структура над ними, от которой вдруг стал критически зависеть успех сборки. Удобно ли это? По-моему, не очень.  Еще хуже в C(++), где одни файлы подключают другие по относительным путям. Эта структура еще менее самодостаточна и еще более хрупкая: пока в точности не воспроизведешь всю раскладку, ничего не заработает.  Идеалом такого дизайна будет система управления версиями darcs. В ней, как я понимаю, нет привычного «таймлайна» и DAG-а коммитов. Вместо этого это просто куча патчей, которые сами между собой разбираются, кто с кем совместим, и складываются в итоговый код. Любой патч можно из этой кучи вынуть или, наоборот, докинуть, и он не встанет в хронологическом порядке, а просто добавится в кучу. Никаких ребейзов.  Правда, говорят, это все не очень хорошо работало, да и с удобством использования непонятно, но как идея по-моему восхитительно. Будь как darcs.",207
"Ух, как меня бесит, когда в пиксель-арте пиксели не стоят по сетке. Понятно, что он давно уже превратился из технического ограничения в стилизацию, но все равно, каждый раз как вижу дробный пиксель, повернутый пиксель, градиентно раскрашенный пиксель, трехмерный пиксель, мозг кричит: «Обман! Не верю!»  Кайф же не в том, что все квадратное, а в том, что мозг принимает правила игры, несовершенство условий, и додумывает, что там между пикселями. А когда один пиксель криво и неровно накладывается на другой, возникает, собственно, вопрос: а куда тут додумывать-то? Если вы можете рисовать между пикселями, почему все остальное из таких гигантских квадратов?",208
"Чего я так и не понимаю, так это ситуацию с реплами в Clojure. С самого начала это одна из самых сильных ее сторон: пишешь код, пока «играешься» с запущенной программой, проверяя все гипотезы прямо на месте, и не тратишь время на перезапуск.  Казалось бы, значит и поддержка должна быть топовая. Вместо этого Clojure поставляется только с command-line реплом. То есть, ты можешь запустить программу в консоли и у тебя будет prompt для печатания. Классика, да.  Но потом начинаешь задумываться: подожжи, а как редакторы-то интегрируются? Емакс как?  Ну, для начала, я лиспер ненастоящий, и как это все устроено не сильно-то себе представлял. То есть, представлял все сильно более красочно, чем оно оказалось на самом деле. Начинал я с Lighttable, и там была (оказывается) прорывная для своего времени поддержка: результаты eval-а прям рядом внутри кода показывались.  Оказалось, это нетипично и все остальные, в общем-то, просто открывают внутри редактора терминал (!) который занимает полэкрана и в котором надо печатать. Интеграция заключается в том, что редактор может выделение из редактора скопировать за тебя в этот «терминал».  В чем проблема? Да в том, что stdout там человеко-читаемый, то есть программно его хрен разберешь. Например:   user=> (do (println ""user=>\nnil"") (future (println ""<=user"")) nil) user=> nil nil user=> <=user   Тут первый user=> и первый nil это stdout, второй nil это результат функции pritnln, второй user=> это следующий prompt и наконец <=user это stdout который случился после выполнения функции. Короче, шансов распарсить в этом хоть что-то надежно нет ну совсем никаких.  (и да, я то сих пор не верю, что люди всерьез так работают и даже нахваливают, а не бунт поднимают)  Ну окей. Умные люди спохватились и сделали nREPL (Network REPL): нормальный сетевой протокол, с командами, форматом, эскейпингом и так далее. Даже сериализацию взяли максимально тупую (Bencode), типа, чтобы клиенты было проще писать.  С nREPL-ом все классно кроме одной простой проблемы: его нужно явно в программу добавлять и стартовать. То есть если ты заранее его в приложение не положил и не проинициализовал, сетевого REPL-а у тебя не будет. Lein этот факт хитро от тебя прятал, но в продакшне об этом думать приходилось. Так мы и жили долгие шесть лет.  И тут — о божечки — ядро Кложи (Clojure Core, коллектив такой) вроде как признало проблему и решило сделать — тарам-парам — встроенный сетевой репл. Собрали комитет, покумекали, и накидали реализацию, которая — наберите воздуха в легкие — позволяет запускать тот же самый command-line но по сети!  Это случилось только в 1.8, то есть две версии назад. Все нормальные люди хмыкнули и продолжили сидеть в nREPL-е, конечно.  Прошло два года (или сколько там прошло), вышла последняя (на данный момент) версия Clojure и, о чудо!, туда наконец-то добавили какой-никакой дефолтный сетевой REPL. Помечен (как и все в новейшей истории Кложи) как alpha, функционал минимальный, но более-менее юзабелен.  Казалось бы — ну Clojure, ну REPL это же ваша сильнейшая сторона, как можно столько времени тянуть? И как можно так сильно поженить REPL с command-line интерфейсом, где ваши навыки декомпозиции? Это command-line должен работать поверх протокола, а не протокол поверх command-line (кстати, в Lein так и было)  Но слава богу, что ситуация более-менее разрешилась. Это я пошел свой REPL для Sublime Text писать, а то сколько уже можно. Заодно вот историю вспомнил.  P.S. Это все не включает ClojureScript, в ClojureScript с REPL все проклято, не ходите туда  P.P.S. Передавать конфиг они решили не ключами, а одим ключом с EDN внутри. EDN это что-то типа JSON-а, то есть в command-like максимально неудобно эскейпить несколько уровней кавычек, вот это все. Так более того, они как-то так умудрились написать парсер аргументов, что в этом EDN нельзя использовать пробелы (!). Вместо пробелов предлагается использовать зяпятую (!!!), к счастью EDN позволяет. До сих пор в шоке от того, насколько компьютеры из говна и палок состоят",209
"Сегодняшний лулз: в приступе панической атаки, вызванной необходимостью работать, залип в Ютуб и натолкнулся на видео, где чувак критикует The Last Jedi (Star Wars - How To Kill A Franchise).  Главная претензия — слишком многое поменялось, персонажи уже не те, какими они были в оригинальной трилогии, Люк Скайвокер никогда бы таким не стал.  Ну, то, что он многим не нравится, не новость, но тут именно сравнение кекное: чтобы объяснить, что так нельзя, он решил привести в пример Терминатора 2! А смешно то, что Терминатор 2 проделал ровно то же самое с оригиналом: он поменял все, что можно было поменять. Сара Конор из официантки превратилась в спецназовца, Шварц из плохого превратился в хорошего (буквально зеркальное отражение), жидкий терминатор ставит под вопрос существование твердотельных, ну и, если есть машина времени, то убивать Джона Конора все-таки удобнее до его рождения, когда никто к появлению терминаторов еще не готов.  И никто ведь не против! Т2 классный фильм, так что на все несостыковки люди спокойно закрывают глаза. The Last Jedi тоже классный (ну, по-моему), но у фанатов все равно зуд в жопе.  Смешно, кстати, что в том самом видео чувак критикует и седьмую часть тоже. Там, как мы помним, персонажи за 30 лет нисколько не изменились, сюжет повторяется, канон блюдется, но этому видеоблогеру все равно что-то не как раз. Ничего не меняли — плохо, поменяли — снова плохо. Вот и пойди таким фанатам угоди.",210
"А хотите я немножко про PC Experience расскажу?  Купил я значит своему писюку беспроводную клавиатуру. Вообще я предпочитаю донглы, потому что Bluetooth на PC проклят, но тут симпатичная и маленькая Logi K380 была только Bluetooth, а мне нужна была как раз маленькая: я компом пользуюсь редко, так что удобство использования на втором месте, а вот удобства хранения и доставания из шкафа на первом.  Короче, решил рискнуть еще раз. BT-донгл тоже купил, потому что это системник, да еще старенький, и встроенного Bluetooth нету, а USB-портов лишних хоть жопой жуй.  Окей. Вставляю донгл. Находит драйверы, готово, мастер, говорит. При этом на бумажке, которая с ним шла, вполне недвусмысленно написано «лучше скачайте с сайта». Решил не рисковать и сделать как написано, да и молодость вспомнить. Кривой сайт, поиск по разделу Support, MSI-архив, Setup Wizard, «мы точно не знаем, может все уже и работает, но вы на всякий случай перезагрузитесь», перезагрузка.  Супер. Иду в Settings. Там красиво задизайненный раздел Bluetooth, кнопка добавить, поиск. Видит клавиатуру. Даже модель показывает. Жму добавить. Тупит с минуту и Check the PIN and Try Connecting Again. Да ну ж девочка, ну ж еб твою мать. Какой PIN? Где его проверять? Че ты от меня хочешь? Вот клавиатура, вот донгл, работай, блядь!  Ладно, мы ж программисты, практикуем научный подход. Пробую другую клавиатуру (да, тоже Bluetooth, но по понятным причинам она у меня через USB все это время висела). Та же фигня. Пробую другой донгл (да, у меня был какой-то старый, после которого я Bluetooth проклял). Та же фигня. То есть проблема не в клавиатуре, не в донгле, а в сраной Винде.  Окей, мы ж программиты, иду на Stack Overflow^W^W Гугл^W Bing (ну по дефолту он стоит, ну надо же дать им шанс). Нахожу кучу советов про «подуйте на контакты», «уберите свинцовую пластину между девайсами», «закройте дверцу микроволновки».  И вот наконец натыкаюсь на видео какого-то индуса (не расизм, это правда индус был). И он такой: все фигня, идите сразу в Win+R, запускайте services.msc. Окей. Находите Bluetooth Support Serivce. Нахожу. Жмите Properties. Останавливайте. Останавливаю. А теперь заходите в Log On и (внимание) переключите «Log on as» с «Local System account» на «This account». Если вам что-то из происходящего хоть на каком-то уровне понятно, снимаю шляпу. По-моему это лучшая иллюстрация «магического ритуала, после которого идет дождь и женщины рождают детей с песьими головами». Но работает!  Точнее, как работает. В видео у чувака напротив «This accout» написано «Local Service». А у меня ничего не написано. Что делать? Ладно, я не первый день за компьютером, иду нажимать все кнопки, какие есть, пока что-нибудь не произойдет (НЕ преувеличение, НЕ метафора).  Жму Browse (типа, посмотреть, че там за аккаунты есть вообще). Там, конечно, какой-то интерфейс эпохи так Win 95 (на самом деле, начиная с services.msc он весь из этой эпохи) поиска непонятно чего по непонятно чему непонятно зачем. Если вы занимались админством Винды или просто хоть раз заходили на третий-четверый уровень панелей конфигурации, понимаете, о чем речь.  Продолжение ↓",211
"Начало ↑  Ну так вот, там кнопка Check Names, которая, собственно, ищет. Она Disabled (ну конечно). В отчаянии я щелкаю на Disabled кнопку и открывается (наберите воздуха в легкие!) браузер со справкой по программированию UI под Windows!!!  Короче, я позаходил-повыходил, позапускал сервисы-поостанавливал и в какой-то момент кнопка разблокировалась. Я бы рассказал, что там дальше, но, к сожалению, второй раз повторить трюк не смог. Но смысл в том, что там еще один поиск (поиск по поиску, да) и как-то я чудом нашел там LOCAL SERVICES юзера. Мне надо было маленькими буквами, конечно, но этот был похож на то что мне нужно лучше всего.  Ура, Local Services подставился, форма стала похожа на то, что было в видео, нажимаем Ok, и... Введите пароль! Какой пароль? От чего пароль? Зачем пароль? От Local Services пароль? Откуда мне его знать? Прикол в том, что какой-то пароль вписался сам, когда я нашел этого «пользователя», но он не подошел.  Логика давно уже ушла покурить и не вернулась, так что я ввожу свой собственный пароль и о чудо, он подходит! Сервис запустился, пробую закрыть этот весь хлам разом и получаю «You must close all dialog boxes before you can close Services». Ну конечно. Это было бы слишком просто. Иду и закрываю каждое гребаное окно по отдельности.  Иду по видео дальше, нахожу следующий сервис, называется «Bluetooth User Support Service_b6611» (буквально, да, с пробелами и _b6611 на конце), пытаюсь поменять ему тип запуска на Automatic, получаю отлуп «The parameter is incorrect». Ну как incorrect-то, когда вот он у тебя в выпадайке прямым текстом нарисован? Ладно, хрен с ним, оставляю Manual, запускаю, а что будет после рестарта, я фиг его знает — там разберемся. Но проводную клавиатура я на всякий случай пока не буду выкидывать.  Возвращаюсь в красивый и современный Bluetooth Settings и этом стильном Metro-интерфейсе гребаная клавиатура наконец-то гребано добавляется. Введите этот пин-код на клавиатуре (наконец-то, пин-код на экране и вводить на клавиатуре, а не наоборот!) и (внимание!) «возможно (мы точно не знаем) понадобится нажать Enter». Слезы льются по моим щекам, изображение расплывается, я падаю от истощения в обморок. Занавес.  А теперь представьте себе обычного человека, врача там, или адвоката, который купил себе в магазине новенькую симпотную клавиатурку и пришел домой в надежде ее быстренько подключить. Ха-ха. Ха. Сука.",212
"Пользователь Илья Бирман пишет:  > AirPods [...] перешли на дурацкое сжатие вместо даблтапа (как Эйрподы-про).  Имеется в виду, что на первых Эйрподсах надо было стучать пальцем (или просто прикасаться, как к тач-поверхности?), а на Прошках сделали обычную кнопку.  Мне в целом все равно, у меня ни первый, ни второй способы как-то не прижились, я всегда вытаскиваю телефон, НО. Но все-таки мне кажется, что жест «постучать по наушнику» максимально дебильный.  Во-первых, собственное ухо в нормальных обстоятельствах человек не видит. Поэтому куда там попадет палец непонятно. Вот ты подносишь палец к тому месту где ты думаешь сейчас будет наушник а он начался раньше и палец уже на нем. Это засчиталось за первый тап? Или нет? И если да, мне надо поторопиться сделать второй, а я был не готов.  Ну и во вторых засунуть себе что-то в ухо и потом стучать по этому чему-то снаружи, ну такое. Неприятно ведь. Вообще по ушам стучать неприятно.  Поэтому в теории я только за кнопку. Нормальную, тактильную, физическую кнопку, без всяких там ваших тачей и притопываний. Нащупал наушник, положил палец куда надо, подготовился, и пошел тройной клик отбивать.",213
"Окей, объясните мне одну вещь. Вот Эппл, например, никогда не называет свои 120 Гц экраны 120 Гц экранами. Знаешь, как они их называют, Джулс? Они говорят «ProMotion». А в объяснении всегда написано, что так-то экран 60 Гц, но «может увеличивать развертку до 120». И вот у Гугла сейчас увидел то же самое, написано «экран 10-120 Гц», а не просто «120 Гц».  Теперь собственно вопрос. В моем представлении обновлять экран принудительно 120 раз в секунду не нужно. Должно быть так: если что-то на экране двигается — 120 Гц, а если ничего не меняется — 0. Типа, зачем обновлять, если ничего не происходит?  Так вот, а зачем вот эта вот нижняя граница в 60 Гц у Эппла и в 10 у Гугла? Она вообще что-то значит? Они все равно обновляют экран, только реже? Почему просто не написать «120 Гц экран», ё-маё? В этом есть какой-то глубокий смысл? Это не 120 Гц экран, нас где-то обманули? Что происходит?  UPD: Кажется, я непонятно спросил. Мне понятно, когда экран обновляется 120 Гц и 0 Гц. А вот те 60 Гц и 10 Гц, они когда включаются? В какой ситуации?",214
"Лет так десять назад моя старенькая самсунговская звонилка сдохла, я решил наконец раскошелиться на айфон. Актуальная версия на тот момент была 4S, купил я ее в каком-то полулегальном московском магазине, расположенном в отеле, офигел от того, насколько непривычно смотрятся ретиновые картинки рядом с текстом (как будто их специально уменьшили), притащил домой и обнаружил, что к вечеру он совсем разрядился. Хотя на момент включения была половина батарейки.  Ну все, думаю, обманули. Время тогда было неспокойное, айфоны в особенности было трудно купить, то и дело проскакивали истории про подделки и про то, как на почте их подменяют на камни.  Для молодых, кто не в курсе контекста: нормальным временем работы для телефона в то время считалась неделя. Самого обычного при этом, рядового, не какого-то специального. То есть про факт зарядки ты как правило не думал. Она случалась, но настолько редко и рандомно, что просто успевала выпасть из контекста до следующего раза.  Ну вот, оказалось, что батарейка, которой едва хватает на день — это теперь не баг, а фича. И что теперь всегда так будет.  Так и живем с тех пор. Возле розетки.",215
"Пипец, до сих пор не понимаю, зачем нужны языки, где не каждое выражение — это выражение.  Для отстающих: в языках программировая давным-давно придумали, что бывают expressions (выражения), которые во что-то вычисляются, например, 1 + 2. И бывают statements (инструкции), которые ни во что не вычисляются, записываются отдельной строкой и не могут быть частью большего, например x = y.  Так вот, нафига нужны эти ваши statements вообще, как класс? Какая может быть даже чисто теоретическая польза от того, что нельзя написать x = if (a) b else c. Кому от этого легче? Зачем это запрещать? Или какое-нибудь y = x += 1. Что вам, жалко что ли?  Сидишь, бывает, себе, думаешь: ну вот, простая вроде штука, ща я ее в одну строчку запишу, а там бац и в середине надо переменную поменять. И все, сиди городи вместо компактного выражения отдельную функцию, прости господи. Так и до стандартов дяди Боба пасть недолго.  Раньше еще функции делили на функции и процедуры, но потом, слава богу, одумались, сообразили, что это бред какой-то. А со statement-ами до сих пор тянется.  Короче, простое правило: все выражения в языке должны быть выражениями. И никаких дискуссий.",216
"В Америке опять прошел какой-то антимонопольный суд и показали какие-то внутренние документы Гугла, в которых, сюрприз-сюрприз, их криптоправители реально устраивают между собой секретные заговоры и вообще придумывают, как бы честных людей (то есть нас) наебать. Про заговоры не метафора, если чо.  В связи с чем хочу опять посоветовать: бегите с Хрома. Когда Хром только начинался, им нужен был рынок и они покупали пользователей фичами и удобством. Тогда возникло общее мнение, что Хром быстр, хорош, удобен. Оно и было правдой — тогда. Многие, я уверен, до сих пор сидят на Хроме только по старой памяти.  А ситуация тем временем кардинально изменилась. Хром победил, забрал рынок и перешел в следующую стадию: капитализации. То есть ему теперь насрать, что там думают пользователи, они уже и так все у него. Им надо денег зарабатывать, а ваше удобство или там безопасность дело десятое. Им нужно сохранять _видимость_ заботы, но нет никаких реальных причин думать о ваших интересах. От слова вообще.  Я эту перемену почувствовал еще в 2018, когда они ввели обязательный логин в браузер. Как показали выложенные на днях документы, к сожалению, я не ошибся.  Казалось бы, что за хуйня: браузер это нейтральная сторона и должна весь интернет показывать одинаково. А тут внезапно Гугловые сайты стали «чуть более ровнее, чем все остальные»: передают браузеру твой логин, а Хром передает его уже на не-гугловые сайты. Но охуел я больше всего от того, что у тебя отобрали возможность НЕ пользоваться этой функцией. Из Хрома нельзя вылогиниться.  С тех пор я потихоньку составляю списочек сомнительных практик (читай — наебок) Гугла и Хрома и только убеждаюсь, что сделал правильный выбор. Там и АМП (настолько очевидно рекламная хуйня, что даже смешно от наглости Гугла, когда они пытаются описывать ее нейтральными словами), и подсирательство в веб-стандарты, и скандалы с блокировщиками, и рекламные идентификаторы, и закладки на своих сайтах, которые ломают все кроме Хрома.  Короче, ловить в Хроме больше нечего. Я когда в детстве читал фразу «звериный оскал капитализма», не знал, о чем речь вообще, просто пожимал плечами и проходил мимо. А тут вот он, наглядный пример, который прямо лично меня касается. Действительно, зрелище не из приятных. «Звериный оскал киберпанка», епт.  Куда переходить? Мой выбор — Файрфокс. Его как раз где-то в районе 2018-го хорошо разогнали, и он уже года три как не хуже Хрома. Только не стучит на каждый ваш чих в Гугл. Ну и плюс это единственная оставшаяся альтернативная реализация браузера (все остальные на вебките), то есть только из-за них веб все еще вынужден придумывать и согласовывать стандарты и не скатился пока в адок «реализации как спеки».  На втором месте Сафари. Эппл, конечно, такая же отвратительная глобальная корпорация, но именно в интернете у них, слава богу, интересов нет.  Очень надеюсь, что Хрому недолго почивать на инерции его былых заслуг. Скоро останутся одни только сотрудники Гугла, которых пользоваться Хромом будет заставлять корпоративная политика, и они будут бегать по кампусу и продавать друг другу прокисшее медвежье говно под соусом заботы о пользователях.  Ну и расскажите друзьям, конечно. Перелом стереотипа про удобство и скорость Хрома начинается с просвещения.  И поиск по умолчанию меняйте тоже. Нахуй Гугл.",217
"Ладно, раз пошла такая пьянка. Расскажу вам, как перейти с поиска Гугла на ДакДакГо.  Идешь в настройки браузера и переключаешь, епта.  «Но у Гугла же поиск лучше...»  «Я пробовал и сбежал обратно...»  Тут вот что надо понимать. Я тоже долго держался за качество. И оно действительно лучше. Гугл находит больше страниц, лучше ранжирует и в целом «does the right thing» гораздо чаще и увереннее, чем ДакДакГо. И я долго не спешил переходить, думая, что это шоу стоппер.  НО! На практике оказалось, что львиная часть запросов — настолько тупые и очевидные, что их найдет любой поисковик, даже Бинг. Поэтому вообще пофиг, чем пользоваться. Да, раз в месяц (я не утрирую, буквально, один раз за четыре недели) я вспоминаю про Гугл, когда что-то не находится, и проверяю там. Все же остальное время ДакДакГо более чем покрывает мои нужды. Да, так тоже можно: наслаждаешься приватностью, а в Гугл ходишь только по большой нужде. Best of both worlds.  Так что попробуйте тоже. Только не разово, а поставьте его прям дефолтным поисковиком хотя бы на недельку. И в конце оцените, реально ли невозможно пользоваться или вам только так казалось издалека (как мне).  Бонусом, кстати, идет адекватный интерфейс. Я на Гугле редко бываю, но вот сейчас зашел и вижу: один поисковый ответ, блок «People also ask», блок «Videos», блок «Top Stories», блок «Карты» и наконец второй поисковый результат. То есть нужно промотать четыре (да, блядь, четыре!!!) экрана, чтобы увидеть второй поисковый результат. И это по запросу «Dog» (собака). Какие, блядь, карты по запросу «Собака»???",218
"Итак, последний совет из серии «фак гуглу» — как сбежать с Гмейла.  Как и все, я завел Гмейл в 2004. Бесплатный публичный адрес с бесконечным местом на всю жизнь звучало тогда как сказка. Да и денег у бедного студента на покупку почты все равно не было. Я бы еще похвастался, что застал времена, когда у Гмейла висел бейджик «бета», но он висел там лет десять, так что такое себе достижение.  Ситуация с тех сильно изменилась. Гугл отказался от лозунга «Don’t be evil», интернет захватили истории «Гугл заблокировал мой аккаунт, я потерял все и умер», Гмейл пережил два редизайна, каждый из которых делал хуже и по оформлению, и по скорости работы, в саму почту напихали всяких Chat, Spaces, Meet, Tasks и Keep, более-менее сносный Inbox просто закрыли, ну и реклама стала совсем уж невозможной. Тут-то я и решил с Гмейла бежать.  Первый вопрос — а получится ли? Действительно, на почту так или иначе завязана практически вся онлайн-жизнь, что немного страшно. Из-за этого я переход долго откладывал. Оказалось все не так страшно — большинство сервисов без особых проблем позволяют поменять почтовый адрес, часто это делается даже легче, чем, скажем, сменить пароль.  Второй — куда? Я выбирал между FastMail и ProtonMail, выбрал FastMail практически наугад. Оказалось, что у них супер-отзывчивый веб-интерфейс (внезапно!), хотя и выглядит слегка старомодно. Ну и нормальный IMAP, так что можно пользоваться любым сторонним клиентом.  Тут теоретически есть еще вариант поднять свой почтовый сервер. Не рекомендую — сам по себе-то он будет работать, а вот Гмейл убедить такие письма принимать будет очень и очень сложно. Мы пробовали сделать это для Грампи — не смогли.  Третий вопрос — домен. Я настоятельно рекомендую привязать именно свой домен, а не пользоваться вендорским, чтобы в случае чего было легче поменять провайдера. Тот же prokopov@gmail.com уже никуда особо не привяжешь, а под niki@tonsky.me может быть что угодно.  А дальше стратегия очень простая: настраиваешь редирект на новую почту, фильтруешь его в отдельную папку. У меня «Gmail». Когда туда приходит письмо, идешь на этот сервис и меняешь там адрес. Все, через неделю все важные сервисы будут уже на новой почте. Через месяц там будет вообще все, даже неважные. Главное, что это плавный и совершенно ненапряжный процесс, однако сходится он довольно быстро. Я иногда заглядываю в Гугл, что туда приходит — там уже давно помойка из спама, рекрутеров и каких-то приглашений на конференции.  Главный кайф перехода имеено с Гмейла — его бесплатность. То есть у меня навсегда останется доступ к архиву писем, а если я кому-то давал свой адрес десять лет назад, его письмо все равно до меня дойдет, хоть и через редирект. То есть ты особо-то ничего и не теряешь и это тебе ничего не стоит. А вот приватность защитишь.",219
"Ладно, вот теперь реально последнее из советов «как жить без Гугла», просто уже для полноты.  Когда-то меня бесило, что у каждого сервиса свой логин-пароль и держать их в голове не было никаких сил. Потом появился OpenID (открытый протокол, прикиньте?), но че-то как-то не пошло. Возможно, потому что надо было вместо логина какой-то длинющий урл вставлять? Не помню уже.  А потом все начали делать кнопки логина в соцсети, и я даже как-то радовался, потому чтостало как-то проще. Ну, кроме проблемы вспомнить, через какую конкретно сеть ты логинился в прошлый раз.  А потом пошли все эти истории, как человека удалил фейсбук или там гугл, и он потерял доступ ко всему остальному в интернете. Казалось бы, какая связь? Вот те самые кнопки логина и перестали.  Короче, покумекав, я заставил себя сделать усилие и поставить менеджер паролей. Эта такая фигня, которая генерит тебе рандомную строчку на каждый сервис и закрывается общим мастер-паролем. Помнить ничего не надо, зависит все только от тебя, а если у какого-то сервиса утек пароль, лично тебя это нигде больше не компрометирует.  Удобно ли с менеджером паролей? Наверное, чуть сложнее, чем логин через соцсети, но проще, чем вбивать пароли вручную (особенно на телефоне, где автозаполнение сильно удобнее, чем клавиатура). Ну и нет-нет да и появляется какой-то странный контекст без твоих привычных куков (какой-нибудь web view, открытый из приложения Твиттера, например), и в такой ситуации сильно приятнее залогиниться напрямую в сервис, чем сначала войти в Гугл, который обычно сильно анально огроженнее.  Какой сервис использовать? Ап ту ю, главное, чтобы было удобно. С LastPass у меня не пошло, а вот 1Password встал гладко. Даже жалко, потому что они испортились, а переходить я теперь боюсь, вдруг где-то еще будет интеграция хуже? Safari менеджер не рекомендую, даже если вы полностью на Эппл, потому что он только для сайтов, а пароли нужны много от чего: от вайфаев, ssh-ей, десктопных программ и так далее.  Все, больше не буду. Завтра возвращаемся к набросам!",220
"Когда-то давно я делал библиотеку DataScript и у нее был довольно сложная релизная процедура: нужно было поправить версию в нескольких файлах, прогнать тесты, закоммитить, залить на npm, залить на Clojars и в Github Releases. Надо ли говорить, что я довольно быстро задолбался. Релизы делались неохотно и копились подолгу.  В какой-то момент я собрал себя в кулак, разобрался во всех этих гребаных АПИ и запилил скрипт, который делал все, от начала и до конца. Прям пишешь ./release.clj 1.2.3, завариваешь чашку чая и приходишь, когда все уже готово. Скрипт сам правил файлы и общался с npm, clojars, git и github, узнавал что ему было нужно и делал the right thing.  Ну и все. Стало хорошо. Я перестал бояться релизов. Сейчас прям на каждый PR я просто беру и выкатываю новый (надо будет еще в GH Actions его засунуть, тогда вообще хорошо станет).  Выиграл ли я суммарно по времени? Думаю, нет — если на скрипт ушел, допустим, день, а релиз занимал 10 минут, то мне нужно хотя бы 48 релизов, чтобы отбить экономику.  Зато я выиграл в душевном спокойствии и комфорте, а это, мне кажется, многого стоит. Каждому новому PR-у я радуюсь, а не пугаюсь, и это прекрасно.  Такая же история была с обновлением списка патронов на сайте. Я делал это вручную, минут 10 раз в месяц. Но каждый раз это страшный стресс — я все время забывал, какие кнопки нажимать, каждый раз это было слегка по-разному, в процессе участвовал CSV и программа Numbers (кто ей хоть раз пользовался знает, насколько неудобно в ней работать с числами). В итоге я тянул с дедлайном и вместо начала месяца мог обновить список ближе к концу.  Потом начался адок с годовыми спонсорами (огромное им спасибо, но процесс это усложняло, потому что _появилось ветвление_), потом пришел Гитхаб, у которого деньги вообще списываются как будто по рандомным дням, а в отчете было черти что.  Короче, подтер сопли, собрался, заботал АПИ Патреона и Гитхаб Спонсоров — вуаля. Теперь я жму кнопку раз в месяц и она даже пуш сама за меня делает. А чтобы особенно кайфовать, нарисовал прогресс-бар в терминале. Мелочь, а радует каждый день.  А вчера вообще скрипт, на который я когда-то убил пару дней, по тегу сам собрал три джарки и залил их на мавен централ. Я уже давно забыл, как он это делает и какие кнопки надо было бы нажимать, если бы я делал это вручную. Помню только, что там все ублюдочно сложно по сравнению со сложностью самой проблемы. А тут скрипт взял на себя эту задачу целиком и решил ее, а у меня освободилось место в голове под что-то более полезное.  Мораль какая? Ну да, я ленивый. Ну да, я не люблю программировать. Но вот главная: автоматизируйте. Все что можно. От начала и до конца. Не оставляйте ни одного шага для человека. Не считайте время, окупится ли — не окупится. Окупится удовольствие.  Звучит тупо и очевидно для программиста, но я вот очень долго до этого доходил. Рад что дошел наконец.",221
"Прочитал в переводе релизных заметок Next.js гениальный абзац:  > В Next.js 12 поисковым ботам будут отдаваться полностью отрендеренные страницы, использующие Incremental Static Regeneration. Обычные пользователи будут видеть интерфейс загрузки страницы.  И это гениально, конечно. Для ботов стараются лучше, чем для живых людей! Боты не могут подождать загрузки, поэтому для них мы заморочимся, а человек, значит, может, так что ничего с ним не случится.  Обидно, насколько низко упали стандарты того, что считается вообще приемлимым и терпимым. Компьютеры ускоряются, а люди ждут их все больше.  Помню, лет десять назад в ЖЖ мы сидели и фантазировали, что вот в будущем сервер вообще страницу не будет рендерить, а все будет исполняться в браузере. Ну вот дождались, это то самое будущее, мы  в нем мы живем. Нравится?",222
"Короче, почитал, что такое Incremental Static Regeneration из предыдущего поста:  > Next.js allows you to create or update static pages after you've built your site.  В общем я не знаю что у вас там во фронте творится, но у нас дедов как было? Приходит тебе запрос, ты генеришь страницу прям на лету и говоришь браузеру: на. И в кэш положил. Приходит еще один, ты глядь в кеш, есть-нет? Есть — хорошо, нет — тоже не беда. Называется CGI, придумали в начале 90-х.  А теперь читаем про алгоритм ISR:  1. Next.js can define a revalidation time per-page (e.g. 60 seconds). 2. The initial request to the product page will show the cached page. 3. The data for the product is updated in the CMS. 4. Any requests to the page after the initial request and before the 60 seconds window will show the cached (hit) page. 5. After the 60 second window, the next request will still show the cached (stale) page. Next.js triggers a regeneration of the page in the background. 6.Once the page has been successfully generated, Next.js will invalidate the cache and show the updated product page. If the background regeneration fails, the old page remains unaltered.  Или я тупой, или это какой-то очень сложный алгоритм кеширования с какой-то искусственно встроеной задержкой. Откуда 60 секунд? Зачем наполнять кеш в процессе билда? Зачем сервить протухшие страницы? Что именно тут изобретается? Чем не угодил memcached?  Это не вопрос с подвохом, мне правда интересно и я правда не понимаю (но я и что такое next.js не понимаю, я думал это хостинг?)",223
"Как вы может быть знаете, установка обновлений в Виндоус — процесс, остановить который не может даже Билл Гейтс. Механически это работает так: в любой момент Винда может решить что пора обновиться, принудительно закрыть ВСЕ открытые приложения и перезагрузиться.  Это может произойти и когда вы за компом, и когда вы не за компом, и непонятно, что хуже. Это может произойти, пока закрытый ноут лежит у вас в рюкзаке и он запросто может перегреться или выжрать батарею и сдохнуть. Короче, настоящая Обезъяна Хаоса.  Естественно, все несохраненные документы пропадут. У нас дома лично как минимум один раз проебался очень большой ворд документ из-за такой перезагрузки (не у меня, а у жены — я-то жму Ctrl+S после каждого напечатанного слова). Для сравнения: от хакеров или вирусов мы пострадали ноль раз, от самой винды — пока один. И кто тут больший злодей, да?  И в общем-то это факт, охуевание от которого очень сложно описать словами. Но еще больше шокирует, как все делают вид, будто все нормально: Микрософт выпускает какие-то апдейты, редизайнит там че-то, телефоны презентует, все чинно-красиво-современно, и упорно делает вид, будто это хороший надежный продукт, что-то, чему люди могут доверить свою ну не жизнь, допустим, но как минимум работу. _Как будто они на нашей стороне_.  И потребители тоже такие: ну вроде норм система, будем пользоваться. И вот факт, что с таким подходом Винда остается сильно конкурентной ОС, он конечно ввергает в шок. Это как если бы на каждом коммерческом рейсе во время полета выбрасывали за борт одного случайно выбранного пассажира, и все бы знали, что это обязательно произойдет, но такие: ну а что поделаешь, перелеты это все равно удобно, а какие альтернативы, поди со мной не случится.  Абсурдность происходящего при этом не подвергалась бы какому-то обсуждению, это вообще не рассматривалось бы как проблема, а принималось бы как данность: ну вот так вот самолеты работают, что тут сделаешь? И все продолжали бы летать, причем за те же деньги.  Еще раз: с очень ненулевой вероятностью Виндоус намеренно и целенаправлено уничтожит большой кусок вашей работы. Это не вопрос «если», это вопрос «когда». Почему про это выпуски новостей не снимают, блин? Почему Микрософту это сходит с рук? Где протесты? Где штурмующие кампус Микрософта реднеки? Где кэнсел-культура, когда она нужна? Почему никто не требует нормального, блядь, софта? Почему всем нормально???",224
"Офигенная же история, как Эпплы сделали на Айфоне магазин приложений, он оказался супер-успешным, они обрадовались и сделали такой же на Маке.  Разработчики посмотрели на него, покрутили пальцем у виска: ревью какие-то, выкладывают долго, доступ к АПИ ограниченный, денег надо треть отдавать. И забили.  Ну и юзеры тоже не дураки: раз там нифига нет, то и зачем туда ходить. И продолжили по-старинке из интернета программы качать.  А все почему? Потому что те, кто сидел на десктопе, помнят вкус свободы и понимают, что от нее выигрывают все.  Ну, кроме Эппла.",225
"Мысль не для всех очевидная, поэтому: ноутбук должен быть маленьким.  Когда-то давно я был уверен в обратном. Гонял сначала с 17-кой, еще на винде, потом с 15-шкой Макбуком. Больше места — больше входит — удобнее. В этой логике, кстати, я не разочаровался до сих пор.  Ну и вот. Потом я увидел на конференции Дэвида Нолена (это как Кристофер Нолан, только из мира Кложи — известный, любит запутать), который приехал из Нью Йорка с тоненьким Эйром. Тогда они еще, кажется, даже 11"" были.  Смотрел я на это с ужасом: как же так, так он ведь, так там же, медленно же! И не входит ничего! У самого в этот момент в рюкзаке лежала четырехкилограммовая пятнашка, которой я был очень доволен: максимум перформанса, максимум комфорта.  А потом до меня дошло, и все сложилось. Толку именно от пятнашки на конференции не было. Можно было хоть с телефоном приехать, главное, чтобы слайды и переходник на VGA был.  Тебе (и мне, и тому парню) не нужна мощная рабочая машина в поездку. В поездке нужен комфорт, а это маленький размер и небольшой вес. А мощь нужна дома, возле удобного рабочего кресла, стола с кактусом и холодильника.  Теперь вторая часть пазла. Зачем нужны маленькие ноуты мы поняли. А зачем нужны большие?  Да низачем! Смотрите. Возьмем даже самый большой возможный ноутбук. Обычно это 16"", но даже пусть 17"". Да, разрешение может быть большим, даже 4К, но это все равно маленький в абсолютных значениях экран, который нельзя поставить удобно (то есть перед собой), над которым надо скрючиваться и щуриться, чтобы что-то на нем разглядеть. Плюс ноутбук это всегда компромисс скорости, производительности и цены: дорого, медленно, неудобно. Выбери три.  Поэтому для постоянной работы нужен хороший внешний монитор, хотя бы 27"", а то и несколько. Для непостоянной и в поездках — компактный и легкий. Ну и все, в общем-то. 15-16-17"" ноутбуки это что-то, что пытается угодить всем, но в итоге собирает все недостатки вместо достоинств.  А собирать надо достоинства! Часто легкий ноут + мощный десктоп может обойтись дешевле и удобнее, чем один здоровенный ноут, который плох во всем. Например, я долго работал на 13 на ходу и на мини дома. 15-шка стоила бы суммарно так же, но была бы тяжелой в рюкзаке и медленной дома.  Нет ничего зазорного в том, чтобы обустроить постоянное рабочее место не-мобильным ноутом. В конце концов, на то оно и постоянное. Работать восемь на пять за ноутом — вот настоящее безумие.  Но сейчас все стало еще лучше. Теперь можно купить ультрамобильный ноут весом 1,3 кг (Macbook Air M1 2020), который при этом обгоняет любой 17"" Intel i9, не греется и живет капец как долго. Это то самое чудо, дешево, легко и производительно — выбери все три, которое еще год назад казалось невозможным. Пользуйтесь ситуацией. Только не забудьте прикупить к нему монитор.  P.S. Новые прошки, кстати, магию слегка так подрастеряли. Они дорогие и тяжелые, а прироста производительности особо не дают. Если бы не 120 Гц экран, сидел бы я, может быть, дальше на Эйре. Очень уж, зараза, хорош.",226
"Мое любимое это так называемые «Portable» варианты приложений. Точнее, контраст.  Типа, вот вам приложение которому ничего не нужно, скопировал с флешки и оно работает прямо из той папки, где лежит. Систему не трогает, никуда не срет, кушать не просит, прав не просит.  А, ну и если хотите, то рядом вот есть еще обычный вариант, с заморочками, инсталляцией, требованием прав, прописыванием куда только можно, меню, ярлыком, перезагрузкой и жертвоприношениями. Но это только если хотите.  Ну и собственно вопрос: кто вообще в здравом уме даже потенциально может захотеть не-portable вариант???",227
"У Casey Muratori новая лекция, называется Where Does Bad Code Come From? Но там 40 минут, так что я вам главную мысль перескажу.  Короче, мысль в том, что принципы SOLID это некие ритуалы, оторванные от объективной реальности. Типа, ты хочешь программу, которая ест мало ресурсов, надежная и быстро работает, но ничего этого в SOLID нет. Вместо этого есть принципы организации кода и неявное обещание, что если ты будешь им следовать, каким-то образом получится хорошая программа.  Ну а мысль в том, что если вы чего-то хотите, то меряйте это непосредственно, а не надейтесь, что если будете что-то делать, то обязательно получится и что-то сделать.  В общем-то ситуации вроде «один ноутбук обгоняет целый Хадуп-кластер», «компиляция занимает четыре дня», Кубернетес там, Вебпак или Гредл это как раз такие примеры, когда люди очень долго делали, но совсем не смотрели на то, что они сделали.  У меня лично тоже есть пример на эту тему: когда-то мы год пилили энтерпрайзное веб-приложение на Джаве и веб-фреймворке Wicked, я выгорел и начал смотреть по сторонам, увидел, что люди любят меряться производительностью веб приложений, типа там 100 RPS, 1000, 10k. Дай, думаю, я наше тоже проверю. И намерял меньше одного RPS. Кроме того, я был вообще первый, кто догадался эту цифру померять за все время разработки продукта.  Вот что значит не смотреть на объективные показатели.",228
"В прошлом видео еще была прикольная аналогия про молоток. Типа, программирование — это путешествие. Ты в целом знаешь куда хочешь прийти, но как – нет. И что может случиться по дороге тоже нет. И вот написание программы это собственно и есть процесс путешествия, процесс прохождения неизвестных сложностей в надежде достичь какой-то цели.  А SOLID в этой аналогии это молоток. Тебе его дают и говорят: если будешь использовать молоток, придешь к цели. При этом непонятно, как именно его использовать, зачем и какое он отношение к достижении цели и вообще к процессу путешествия имеет. Но вроде как какие-то люди которые когда-то куда-то дошли, вроде говорят что у них был молоток, так что теперь мы их всем выдаем, стараемся использовать и в университетах преподаем.  Спасибо @chyvonomys, что напомнил про эту деталь.",229
"> Telegram начинает тестировать рекламные сообщения.  Расстроился я чет. Очень неприятно видеть в личном авторском канале, который я так тщательно оберегаю от рекламы и даже от любых ссылок, чужой голос от твоего лица.  Opt-out-а нет, доли я тоже не получаю. Понятно, что мы все тут у Павла в гостях, но можно было как-то чуть более желанной рекламу сделать? А то сейчас ни читателям, ни владельцам каналов. Павел против всех.  UPD: Рекламное сообщение всегда висит последним. Ну охуеть. Зашел глянуть, че новенького — хапни-ка рекламки. Хуже старта даже трудно себе представить.",230
"Увидел в Твиттере meekaale, лучше и не скажешь. Моя война:  It’s not just you. Things can be better.  Programs should make people feel helped, as Christopher Alexander suggested, on the same level that they are helped by horses, and roses, and a crackling fire.  How hard could it be?",231
"Ладно, еще чуть-чуть про рекламу. Никого не напрягло, как странно то самое объявление сформулировано?  > Павел Дуров: Telegram начинает тестировать рекламные сообщения. Как это скажется на пользователях?  Что за оборванный вопрос? Кому он адресован? Получается, что читателям. Типа, задумайтесь, ребята? Ответьте на него каждый сам?  По логике тут же должен быть и ответ, но вместо ответа — ссылка на целый канал (не на ответ!) «Как это скажется на пользователях? — Канал Павла Дурова». Че к чему?  Прям чувствую влияние человека, придумавшего бренд «Вконтакте», об который русские люди уже 15 лет язык ломают.",232
"Интересно, что внутри компьютера — жесткая и безупречная логика и полная детерменированость.  А снаружи черт знает что — гейзенбаги, нестабильные тесты, неопределенное поведение, то, что работало вчера, сегодня уже не работает, ну и знаменитое «попробуйте выключить и включить снова», которое сегодня уже превратилось в «попробуйте удалить сервис воркер».  Получается, что если долго и упорно применять безупречную логику поверх безупречной логики, слой за слоем, то в итоге из математики получится гуманитарная наука: разброд мнений, уникальность опыта и полная невозможность однозначных определений.",233
"Вопрос на засыпку: вот стоит на столе компьютер, для простоты десктопный ПК.  Почему нельзя подойти к нему и просто выдернуть его из розетки, как пылесос или тостер? Что именно мы выиграли, отдав эту возможность?  Ответ «потому что дисковые кеши и что-то там не сохранится» — не устраивает. Что не сохранится? Почему нельзя сохранить? Есть ли какое-то фундаментальное ограничение, или просто «так получилось»?  На ответ дается тридцать секунд.",234
"Главное правило дизайна любого протокола — не должно быть нескольких вариантов делать одно и тоже. Если у вас так получилось — оставьте один самый универсальный, даже пусть самый неудобный, а остальные выбросите.  Например, в JSON все ключи должны быть в кавычках. Вроде бы, если одно ASCII слово, то и без кавычек было бы понятно, но тогда было бы два способа записать одно и то же: {key: ...} и {""key"": ...}. JSON принял правильное решение и узаконил только более универсальный вариант.  На другом конце этого правила возвышается YAML. Это квинтессенция подхода «сделаем максимально удобно» настолько, что она начала регулярно отстреливать людям ноги. Например, строки можно не кавычить, но вполне себе невинный список двухбуквенных кодов стран [ru, us, gb, de, no, ua] будет иметь тип Tuple(str, str, str, str, bool, str) и вся твоя система типов рухнет. Хуже всего, что все это может очень долго успешно работать, пока в гости не придет кто-нибудь из Норвегии.  Если подытожить: сюрпризов в протоколе быть не должно, special cases приводят к сюрпризам (не знал, не учел), поэтому делайте максимально универсально, а об удобстве думайте во вторую очередь.  Ну и место в голове еще не резиновое, чтобы все эти правила помнить, во!",235
"Давайте поговорим про ебанутые названия библиотек.  Понятно, что когда человек что-то создает, ему в первую очередь хочется побыть глубоким философом (или на крайняк плохим юмористом) и как-то это что-то назвать. Каждый человек хочет побыть брендом, экспертом и новостью. Это священное право и я на него посягать не собираюсь.  Но должно же какое-то чувство меры быть? Если ты придумал библиотеку, которую в лучшие ее дни увидит человек 200, не надо выебываться и называть ее именем греческого бога.  > Sonatype's Open Source Software Repository Hosting (OSSRH) service [..] is a hosted deployment of Nexus Repository Manager with the Nexus Staging Suite [...]  У меня, блин, места столько в голове нет, чтобы засирать ее высерами ваших маркетологов. Что, думаете, в голове происходит, когда я вижу в тексте Nexus Sonatype OSSRH Staging Suite? Я вспоминаю, что значат все эти доморощенные форсед аббревиатуры? Нет, блин, сверчки у меня в голове концерт играют.  Недавно в Кложе-сообществе Дастин Гетц запилил прикольный проект, назвал Hyperfiddle. Ну ладно, вдруг правда во что-то вырастет. Но заходишь внутрь и начинается:  > Hyperfiddle is based on missionary, photon, photon-dom, zero, hfql and rcf.  Все эти названия придумал тот же чувак и они вообще ничего не значат. Тут даже вопрос, понадобятся они хоть кому-то хоть когда вообще как отдельные сущности. Но нет, названия уже есть.  А вот зависимости Kaocha. Угадайте, что это за библиотека и что делают зависимости:  > slingshot, hawk, expound, aero, progrock, orchestra, portal  Даже я, вроде, давно в Кложе варюсь, но вообще не представляю, что тут и почем.  Metosin любит называть библиотеки по-фински:  > reitit, malli, muuntaja, loiste, sieppari, tilakone, clj-suomi, juustometsae, eines, mallitaulut, potpuri  А JUXT — на четыре буквы:  > site, clip, tick, grab, aero, card, jinx, edge, yada, reap, spin, hire, pick, apex, vext, flow, pull  Принципы прикольные, метафоры наверняка очень остроумные, но, сука, почти все из этого — микроскопические библиотеки, и их как плодится как тараканов каждый день.  Вот, скажем, зависимости другого хорошего проекта, Алефа:  > manifold, potemkin, criterium, cheshire, bcprov, bcpkix, codox, jammin, marginalia  Кто из них парсит JSON? Ну конечно Cheshire, неужели неочевидно? А potemkin чероморским флотом руководит, ага (на самом деле это просто помойка по типу utils, зато с0 сMыCл0м).  Я уже даже начинаю думать, что Студия Лебедева с их Унитазусами и Клавиатурусами не так уж и плохи в смысле naming things на этой специальной олимпиаде.  Самое смешное, что в Алефе рядом используется Netty, и вот как выглядят модули Netty:  > transport, transport-native-epoll, codec, codec-http, handler, handler-proxy, resolver, resolver-dns  А что, так можно было? Или вот Кложа:  > core.async, core.cache, core.logic, core.spec, data.xml, data.json, tools.build, tools.deps, tools.namespace.  Так вот, так не только можно, но и нужно. React Router знаете? Сразу понятно, что делает, да? Вот будь как React Router. Не выебывайся.  (Да, я сам люблю/любил названия поизобретать. Не будь как я).  UPD (zabolekar в комментах):  > меня в своё время поразило в самую печень, что клиенты для rabbitmq на кложуре называются langohr и bunnicula. прямо видно, как авторы старались, чтобы название не содержало ни намёка ни на кложуру, ни на rabbitmq  UPD2 (YoroolGui):  > Надо брать пример с СССР. Вот есть какой нибудь Главстройжилмонтаж - одно слово, а все сразу понятно.",236
"На каком-то там курсе универа, вроде бы третьем, у нас были лекции по компьютерной графике. Препод выдал задание: написать рейтрейсер. К нему прилагался простенький формат описания сцены, типа сфера-координата-радиус, ну и примеры нескольких сцен.  В общем, я от задания знатно кайфанул, быстренько все написал и пошел играться! Со сферами быстро стало скучно, так что я добавил коробки и еще что-то, не помню уже что. Наделал примеров сцен и в таком виде, довольный, одним из первых сдал.  А дальше произошла простая вещь. Преподу мои сцены и их разнообразие понравились. Он взял эти файлы и начал кормить ими решения других студентов. Решения, понятно, не кормились, потому что я расширил формат. Я мог открывать чужие файлы, а они мои не могли.  Препод при этом находился в состоянии постоянной войны со студентами (например, делал перекличку на каждой лекции). Когда ему попытались объяснить, что происходит, решил, наверное, что студенты опять отмазываются и просто не засчитал задачу всем, кто не смог открыть мои файлы. Точнее, всем, на чьих задах он пробовал их открыть. То есть кому-то повезло, а кому-то нет.  Выводов я тогда сделал для себя несколько. Во-первых, стандартный формат это прикольно, потому что разные реализации могут обмениваться данными между собой.  Во-вторых, людям хрен что объяснишь, будь ты хоть сто раз прав и правда на твоей стороне. Точнее, иногда объяснишь, а иногда нет, и рассчитывать на то, что ты точно сможешь объяснить ситуацию — нельзя.  В-третьих, зачет — дело везения, а не твоих способностей. Как и любой успех, впрочем.  В-четвертых, очень наглядно на собственной шкуре ощутил, как развиваются стандарты. Потом мне это в веб-программировании очень пригодилось.",237
"А вот объясните, нафига на каждый электроприбор лепят светодиоды? А то я уже задолбался их везде заклеивать. Недавно принтер купил, так у него в режиме сна кнопка вообще мигает на всю комнату.  Предвидя возможные ответы:  – Да они особо и не мешают.  Мне мешают.  – Чтобы знать, что прибор включен в розетку.  А нафига мне это знать?  – Есть закон/регуляция, требующие светодиодов.  Окей, а за законом какая логика? Его принимали, чтобы что?",238
"Прочитал в какой-то рецензии на фильм «Вечные»:  > Сексуальная ориентация одного из центральных героев не несёт в себе решительно никакой нагрузки для сюжета.  Звучит как «я конечно не расист, но негров как-то не очень». Какую, по мнению автора, нагрузку может нести сексуальная ориентация? Да никакую! Люди просто такие какие есть, и гомосексуальность, также как и гетеросекусальность, не требует никаких оправданий чтобы присутствовать на экране, так же как размер носа, форма зубов или цвет глаз. У части героев глаза карие, у части — голубые, и все это не несет никакой нагрузки для сюжета тоже. Просто должны же быть хоть какие-то глаза, верно?",239
"Самое гениальное изобретение: папка Downloads.  Если вы молодой, то может и не помните, что папки Downloads раньше не было. Потому что интернета не было.  Потом появился интернет, но папку надо было выбирать вручную. Да, каждый раз, на каждый загруженный файл. Ну и народ развлекался: всякие C:\Games, разделы дисков, такая всякая ерунда. Я с одной стороны немножко симпатизировал, конечно, а с другой у самого у меня никогда не получалось как-то удачно на будущее разделы запланировать. То есть получалось, но особой разницы я не чувствовал.  Ну а потом сделали Downloads и стало хорошо. Это такая помойка, единственное место на диске, которому позволено пребывать в перманентном бардаке. Файлы туда сами скачиваются, без дополнительного диалога, ну офигеть! Все гениальное просто.  У меня были разные были периоды: когда папка забивалась и не чистилась, когда я пытался сделать несколько «помоек» (Screenshots, Papers там), когда я пытался синхронизировать ее между компьютерами.  Но в итоге пришел к тому, что это своего рода Inbox: пока там что-то есть, надо это разобрать. Все, что выполнило свою функцию, нещадно уничтожается. Downloads всегда пустой (ну или стремится к тому).  Ну и Инбокс должен быть один, поэтому только Downloads и выжил. В остальном у меня на диске практически ничего не происходит: есть еще рабочая папка и, пожалуй, все.  All hail Downloads!",240
"Любой интерфейсник сходу назовет миллион преимуществ маковского меню перед виндовым:  - Оно расположено у края экрана, а значит, у каждой кнопки в нем «бесконечная» высота. - Оно не отнимает место у самого окна, окно выглядит чище. - Оно «одно на всех», то есть суммарно место тоже экономится. - Оно позволяет «приложения без окон». - Оно работает для «узких» окон.  И все это верные и правильные аргументы, но... Все-таки это очень сложная и противоестественная концепция, к которой, конечно, можно привыкнуть, но это именно нужно усилие над собой сделать.  Сначала вам говорят: окно — это визуальное представление вашей программы, вот этот вот квадрат. А потом: кстати, действия, которые вы можете с ним делать, они перечислены в этой отдельной от него панели, которая никак с ним не связана ни по стилю, ни по расположению, и вообще может находиться за километр от окна. На маке вообще, кажется, любят отдельные окошки по каждому поводу.  Вот такое вот интересное противоречие. С одной стороны удобно, с другой — слишком абстрактно, неинтуитивно. Мак, чтобы не мучать людей, вынес меню в тулбары, сведя необходимость использовать меню примерно к одному случаю в месяц. Винда начала придумывать, куда бы заныкать гамбургер внутри окна.  Я тут, бывало, шутил про нерешенные проблемы компьютер сайнс. Вот эта правда нерешенная пока.",241
"При всей раздутости веба как платформы надо отдать должное сначала браузерам, а затем и Электрону за то, что они взяли эти вот сумасшедшие всякие нативные АПИ и причесали их до какого-то разумного минимума.  Когда Электрон только появился, я даже особо как-то не мог понять, в чем состоит предложение (веб тогда был не очень мощным, и представить, что на нем будет писать десктопные приложения каждый второй требовало определенной гибкости мышления). И только сейчас, покодив под AppKit и Win32 (и X11, боже, X11), я потихоньку начал понимать, сколько же ерунды нужно спрятать, чтобы к этому перестали бояться подходить нормальные люди.  То есть не очень понятно, почему создать нативное окно — это история на десяток строк, каждая из которых выглядит как будто сейчас будут призывать сатану. Начать в него рисовать — минимум кандидатская по информатике. И это при том, что большинству людей эти детали вообще не интересны, но они зачем-то есть и торчат.  То есть понятно зачем — исторически, но легче от этого не становится.  Зато из Электроновского джаваскрипта это выглядит как-то соразмерно проблеме, что ли: Window.setIcon, Theme.isDark. Всякие GLFW и SDL2 тоже в общем-то про то же: сил нет в нативных АПИ уже разбираться, я хочу программу писать, а не с ОС интегрироваться.  Программирование на нативных АПИ би лайк: привет, мы тут упоролись и пользователи вас задолбают, если вы каждый чих не поддержите. И тут приходит вебчик и такой: привет, мы тут кое-как только самый основной юз-кейс наконец вам прокинули, если начнете использовать, пользователи вас на руках носить будут.  И знаете что? Я все больше и больше чувствую очарование простоты второго подхода. Жаль, что Электрон прибит гвоздями к Хрому, Джаваскрипту и вебу, потому что вот эта часть, где они кросс-платформенные окна и события создают — она очень важная и много кому могла бы пригодиться.",242
"Раз уж зашел разговор про удобство программиста. Вот многие испытывают теплые чувства к Дельфи, и есть гипотеза, что именно потому, что там все создано и настроено уже за тебя: запускаешь редактор и он тебе сразу работающее окно дает, развлекайся. Нет вот этого барьера, когда надо пять каких-то этапов пройти, принять с десяток решений, только чтобы начать. Вместо этого ты сразу начинаешь с работающего, а дальше править уже легче. Хороших приложений на нем, может, не сделать, но нормальные — только в путь.  Или вот из треда про 25-летие Visual Basic:  > [VB] fills that essential niche between stuff that’s useful and stuff that’s too important to kludge.  (kludge ~ сделать из говна, палок и изоленты)  То есть многие программы неплохо бы написать кое-как, лишь бы не привлекая программистов. Потому что программисты это про небоскребы и бетононасосы, а людям иногда нужно всего-то пару ведер раствора замешать.  И тут, внимание, вопрос. Если это такая важная ниша была, то куда она делась? Не бывает же так, что всем нужно, а предложений нет. Почему ничего не выросло на ее месте? Где веб-приложения, которые может накидать Петрович на выходных? Где VB.Web? Nocode как там, взлетел уже? Взлетает?",243
"Вот чего я не понимаю, когда люди начинают у программистских концепций искать математические основания. Ну там теория категорий, реляционное исчисление, такое всякое.  Точнее, не понимаю, когда это преподносится как что-то положительное. Алло, математические основания не значит вообще ничего. Можно любой бред описать математически, и это не значит, что он будет удобным, полезным, надежным, простым, да вообще ничего не значит. Это значит только, что его описали математически. Все.  В смысле разминки для ума это может быть полезно, типа кроссворда, но не более. В реальной жизни это все имеет либо максимально общие следствия, настолько, что они становятся бесполезными, либо максимально конкретные, до тривиальности.  Есть хорошие вещи, которые описали математически. Но тут надо понимать: они хорошие сами по себе, а не потому что их описали.",244
"В Твиттере Тагир Валеев поднял тему, почему в Идее (да и в любом другом софте) всегда будут баги и ничего с этим не сделать, только смириться. Но у него там сводится к тому, что системы шибко сложные стали (а кто в Идею миллионы строк понаписал, Пушкин, что ли? Вы же сами и понаписали). У меня немножко более философский взгляд.  В том, что софт кишит багами, виноват ты, лично ты, дорогой пользователь. Ну а кто еще? Потому что пользователи хотят фичи, а не отсутствие багов.  Не верите? Ну вот допустим вы могли бы сегодня иметь в кармане первый айФон, но идеально отлаженный, без багов вообще. Или тринадцатый, но кое-как работающий. Что выберете? То-то и оно.  В принципе, если действительно очень захотеть, от багов избавиться можно. Это несложно даже, было бы желание. Так же как и писать быстрые программы. Но это должно быть приоритетом, а не делаться по остаточному принципу.  У Артемия Лебедева было как-то мнение про то, что если бы в России законодательно запретили праворульные машины, японцы быстренько бы наладили фабрику по переделке руля прямо на границе. Так же и программисты — если бы вдруг оказалось, что кровь из носу надо вот прям без багов что-то написать, они бы собрались и написали. Нашли бы способы, методики, инструменты. И все бы получилось.  Но вы этого не хотите. И никто не хочет. Поэтому и имеем то, что имеем.  А вот почему в Твиттере неправильно склоняются числительные, хотя у них в штате 5000 программистов и что они там делают (явно не фичи, давно вы видели новую фичу в Твиттере?) — это уже другой вопрос, вопрос эффективности больших компаний. Как видим, они не очень эффективны. Так же как один дохленький ноутбук может обогнать Хадуп, так и один сеньор может сделать больше, чем весь Твиттер за месяц.",245
"Иногда в погоне за кажущейся простотой дизайнеры прячут несколько действий за одной кнопкой. Например, создать новый файл в Фигме, или новый митинг в Meet. С одной стороны, все классно, экран выглядит просто, куда нажимать понятно.  Проблема в том, что после нажатия кнопки вылазит меню, в котором надо сделать настоящий выбор. Design или FigJam в Фигме? Начать митинг сейчас, запланировать на попозже или запланировать на попозже в Meet-е? (да, там два одинаковых пункта, это же Гугл).  То есть сложность никуда не делась, решение все равно надо принимать, но мы его типа спрятали, чтобы сразу не пугались. Хорошо? Ужасно, плохо, отвратительно, так нельзя.  Если хотите, чтобы я делал выбор, покажите мне варианты сразу, чтобы я знал, чего ждать. А сюрпризы нафиг. Последнее, что я хочу увидеть, когда нажал «начать митинг» — это какую-то фигню, которая не дает мне его начать. И FigJam тоже наfig. И выбор «шаблона документа» после того, как я уже решил, что хочу новый документ. Кто ими вообще пользуется?",246
"А я же не рассказывал, что ClojureScript, диалект Clojure, который как раз всем сейчас интересен (потому что браузер) это совсем другой экспириенс?  Самая большая неприятность это размер бандла. Шутка ли, 6 Мб только на то, чтобы напечатать «Привет, мужики». Чтобы не размениваться, в CLJS решили взять самый злой и агрессивный минификатор: Google Closure Compiler (да, Clojure компиляется Closure, да, совпадение, да, путают постоянно). Это такая штука, которая будет изо всех сил ломать, портить и удалять твой код, пока ты не докажешь ей обратное. Получается, мы изначально в проигрышной позиции: код по-умолчанию НЕ работает, и это ТВОЯ проблема. Компилятор работает против тебя, отличное начало.  А еще этот минификатор медленный (десятки секунд на жалких 10K LoC) и неинкрементальный. Один из моих проектов (AnyBar) возник исключительно потому, что невозможно было сидеть и ждать после каждого сохранения. Но жмет хорошо (вроде, 94 Кб на «Привет, мужики»). Потом, правда, выяснилось, что минимальный осмысленный проект начинается от то ли 300 Кб, то ли от 600, так что можно было бы минификацией особо и не заморачиваться уже. Ну 600 Кб, ну 6 Мб, какая уже, в самом деле, разница?  Чтобы максимально усложнить всем жизнь, CLJS поставляется с альтернативным режимом компиляции: быстрым, удобным, не ломающим код. Но с, сука, большим выхлопом и большим оверхедом. В итоге есть два стула, из которых сидеть неприятно на обоих.  Хуже всего, что минифицированный режим ломается внезапно, когда уже все расслабились. То есть компилятор немножко «умный» и работает без подпорок «часто», вплоть до того, что часть тулинга (и сам язык, кстати) тупо забывают про то, что ему нужно помогать. А потом какая-то эвристика не проходит, твой код молча ломается и все в шоке, даром что понять что происходит нет никаких шансов (код-то минифицированный уже). Случается даже на самом идиоматичном коде. Это тот случай, когда тупой но предсказуемый компилятор был бы лучше, чем «умный», но хаотичный. Если уж ломаться, то всегда, а не по праздникам.  Вторая проблема в том, что CLJS так и не стал большим самостоятельным проектом, а до сих пор живет внутри Clojure. В итоге там очень странные заморочки, например, с макросами и неймспейсами, про которые зачем-то приходится знать.  Была попытка отделиться и переписать JVM часть на JS, и это даже получилось, но потом оказалось, что компилятор, написанный на JS, работает в 4 раза медленнее компилятора на JVM (потому что JS медленный, не надо опять удивляться) и никто не был готов страдать только ради идеи «не пущу на свою машину JVM».  Третья проблема в том, что CLJS сильно меняется. REPL ломали и переделывали три раза. Правила импорта менялись раза два. Неймспейсы менялись. Обратная совместимость не особо блюдется. Взять старый проект и собрать современным CLJS компилятором почти наверняка не получится.  Сам тулинг тоже настраивать другу не посоветуешь. Официально CLJS поставляется в виде одной-единственной jar и делает вид, что никакого тулинга не существует. Комьюнити заполнило пустоту, но получается с переменным успехом. Я как-то хотел постримить разработку игры на CLJS, так первые два часа я только создавал проект (не шучу). Кажется, когда говорили «давайте тащить опыт у JS», надо было уточнить «только положительный».  В целом это огромное достижение, конечно, что Кложу можно скомпилять в браузер. Куча людей, безусловно, получили и продолжают получать пользу от КложеСкрипта. За это огромный респект и благодарность, учитывая, что все это еще и делалось на одном энтузиазме.  Цель же этого поста — напомнить, сколько незаметных вещей Кложа сделала правильно и что получается, если делать «как обычно». КложеСкрипт по качеству это скорее средний айтишный проект, и это круто, странно было бы просить большего. Единственное, что на фоне действительно выдающегося собрата начинаешь понимать, со сколькими шероховатостями в индустрии принято молча мириться каждый день.",247
"У меня тут вышла новая версия DataScript с большими оптимизациями, и внутри там бы интересный случай.  Есть там некий формат описания запроса со своей грамматикой, который надо парсить. И вот одна из фич языка (это что-то вроде GraphQL, описывает форму запроса к данным) это рекусрсивные запросы: достань имя, фамилию, возраст для текущей entity, потом пойди по :friends и достань для них то же самое, рекурсивно.  Ну и структура, описывающая распарсенное дерево, довольно тупая: вот паттерн, в нем атрибуты, для ссылочных атрибутов — подпаттерн, и плюс рекурсивные атрибуты, для которых паттерном по сути является тот паттерн, в котором они находятся. Короче,   (defrecord Pattern [attrs]) (defrecord Attr [name subpattern recursive?])   Ну и вот, при обработке вроде как удобно было бы для рекурсивного атрибута чтобы ссылка subpattern вела тупо на родительский паттерн:   pattern.attrs[0].subpattern === pattern   Потому что никакого особо специального тритмента для рекурсивных атрибутов нет, это точно такой же вложенный атрибут, просто переиспользующий паттерн.  Уф. Это было вступление. Теперь проблема. Как вы знаете, Кложа — язык иммутабельный. В иммутабельных структурах циклические ссылки невозможны. Поэтому мне пришлось таскать отдельный атрибут recursive? и везде, где приходит атрибут, прокидывать еще и родительский паттерн, и писать if для рекурсивных случаев, чтобы игнорировать subpattern и смотреть на родителя, которого передали рядом.  Неудобно? Вот и я подумал, что неудобно. В принципе, способы сделать мутабельные поля в Кложе есть, даже несколько. Просто может чуть менее удобные. Попробовал я один, второй, третий. В принципе проблему решил. Код, использующий Pattern, упростился. НО.  Но зато усложнилось все остальное. Тесты на парсер перестали работать: как сравнивать не-циклические структуры понятно, а как сравнивать циклические? Вывод на экран — как? Надо как-то отслеживать циклы и обрубать. Сериализация встала под вопросом.  И тут-то я собственно и осознал, какое же это благо — простые value типы. Безо всяких ссылок внутри, которые только все усложняют. Да, кое-какие трюки становятся невозможными, но нужны они довольно редко, а по-умолчанию надо вот такие простые структуры составлять и гонять, а к объектам только в исключительных ситуациях обращаться. То, что в некоторых языках ничего кроме объектов нету и любой объект может содержать ссылку — беда, ошибка проектирования, которая выкидывает в окно много полезных свойств там, где они действительно нужны, в обмен на только потенциально нужные качества, которые нужны редко где.  Ну вы поняли.",248
"Не каждый день такое бывает, но сегодня в превью вышла новая ИДЕ от Джетбрейнс, над которой я в том числе работал. Называется Fleet.  Самая главная радость, конечно, в том, что это ИДЕ не на браузерных технологиях. Видит бог, мы пробовали, и ClojureScript, и Реакт, и даже точечный кастомный DOM-патчер на 200 строк — хоть разбейся, но не тянет браузер серьезное редактирование текста. Даже если брать от него только рисование. Ну или не тянет в том виде, в каком получалось писать у нас (это было до меня, так что подробностей не расскажу).  Тут сейчас понабегут умники и скажут, а почему не WebGL + WebAssembly, на что я заранее отвечу: оно бы взлетело (см. Makepad), но в чем тогда вообще радость запускаться в бразуере, если ты ничего от него не используешь? Приседаний много, а бенефитов как-то не очень.  В числе прочего, именно для этой ИДЕ создавалась Skija, и она до сих пор на ней работает (правда, исходники недавно форкнули и сконвертили в Котлин).  И именно на Fleet я осознал, что создать UI фреймворк в общем-то дело вполне подъемное, и браузер/электрон не настолько уж невозможную задачу делают и совсем не так сильно нужны, как может показаться на первый взгляд. То есть если у вас три студента и надо делать продукт, а не точить пилу, то свой UI вы наверное не осилите. Но если команда из хотя бы пяти сеньоров и финансирование на пару лет, то никаких серьезных препятствий нет, а выигрыш потенциально очень существенный.  (но кто сейчас может позволить себе пять сеньоров, да?)  Пост про эмоджи тоже, кстати, родился из работы над редактором Флита. Не скажу что там лучшая поддержка в мире, но должна быть лучше Идеи как минимум.  Вообще работа в Джетбрейнс была очень интересным опытом. Я узнал про себя, что мне очень нравится выдрачивать пиксели, например. Узнал, что есть две парадигмы разработки: быстро накидать как-то и потом разгребать последствия, или делать хорошо, но долго. Мне комфортно во второй парадигме, но вот парадокс: новым продуктам нужна первая, иначе ничего никуда вообще не сдвинется. А я пугаюсь, когда не могу все объять, погрузить в голову и контролировать. Учусь теперь отпускать и расслабляться.  Узнал про ловушку С++: это ультимативный язык «но есть нюанс». С одной стороны кажется, что все понятно и пишется довольно просто и прямо. С другой, раз в неделю ты застреваешь на каком-то бреде на день-два и просираешь время вообще непонятно куда. И каждый раз проблема разная, и каждый раз, разобравшись, она не кажется такой уж страшной. Но факт остается фактом: тупишь ты больше, чем хотелось бы, а объяснить это практически невозможно.  В целом это офигенно круто, что такой большой игрок как ЖБ выступил с не-браузерным решением. Очень хочу, чтобы это заставило другие большие компании нервничать и шевелиться, и смотреть на Электрон с меньшим энтузиазмом, чем раньше. Выиграют все.  А также поздравляю с релизом всех причастных!",249
"Забыл еще написать, когда мы только начали Флит догфудить, народ вокруг ходил и хвастался друг другу, как приятно в нем тупо печатать. Буквы набивать. Мне-то с Саблаймом разница не особо заметна была, а вот на Идеевцев эффект производило. Даже со всеми зеро-лейтенси. Вот что стабильные 60 фпс делают (а на 120 Hz так и вообще сказка).",250
"В каждый пост, где кто-то хотя бы заикаится о том, что можно делать приложения, которые не запускаются в браузере, обязательно приходят люди и начинают придумывать, как их все-таки запустить в браузере. Натурально, вчера кто-то придумывал, как бы скомпилять Скию в вебасм и рисовать ей по канвасу (при том что канвас под капотом и так Скией рисует).  По этому поводу у меня три соображения. Во-первых, веба, наверное, хочется, потому что это последний оплот свободы на мобильных платформах. Делай что хочешь, никто тебе не указ, неслыханная роскошь по сегодняшним временам.  Так вот, я лично когда-то делал веб-мобильное приложение вместо настоящего мобильного приложения и хочу сказать: к сожалению, этот путь не работает. Это гораздо дороже, чем делать нормальное приложение, результат будет гораздо хуже, плюс сами мобильные браузеры не хотят, чтобы ты делал в них приложения. То есть они будут ломаться, не давать тебе что-то сделать и т.п. В этой игре казино играет против тебя.  Второе соображение в том, что веб наверное неспроста единственная настоящая кросс-платформенная среда. У веб-программирования идеальный именно девелопер экспириенс: он абсолютно ничего от тебя не требует, все «просто работает», вся сеть на твоих кончиках пальцев и начать максимально легко. Покажи браузеру на любой файл и он молча сожрет его и исполнит. Никаких компиляций, сетапов, окружения, мозгоебства, ничего. Показываешь – работает. Реально, ни одна среда даже близко к такому не подошла. Ну как с таким тягаться?  (Тут можно сделать лирическое отступление, что конечно как только в веб пришли «настоящие» программисты он тоже стал сложным, хрупким и неудобным, но... но вот мы его и сделали).  Ну и третье соображение в том, что я уже слишком старый, чтобы верить в «write once, run anywhere». Можно написать приложения, которые будут «как-то» работать везде. Но чтобы из этого «как-то» перейти в «нормально», нужна куча усилий на каждой отдельной платформе. VS Code сколько понадобилось, шесть лет, чтобы начать запускаться в браузере? И это с учетом того, что они уже были на веб-технологиях. За шесть лет можно и с нуля ИДЕ написать. Так что «просто напишите на Электроне и я запущу у себя на Айпаде в браузере» – это немножко не так работает.  Поэтому я очень странно себя чувствую, когда условный Флаттер, или Композ начинают пихать в веб. В вебе с юайем уже и так все хорошо, а с перформансом уже и так все плохо, чтобы тащить туда таких франкенштейнов. Хотите писать на вебе — ну так и пишите на вебе, а не через Скию, скомпилированную в вебасм, которая рисует на канвасе, который реализован опять на Ские, и все это завернуто в Электрон.  Компьютер, он не резиновый, абстракции протекают, а сложность не складывается, а умножается.",251
"Немножко про бритье яков, или Yak Shaving. Это ситуация, когда ты хотел сделать что-то простое, но него сперва нужно сделать одно, для него второе, для второго третье, и вот спустя время ты обнарживаешь себя в горах голым, с бритвой в руках, бреющим яка. И все логично!  Итак, решил я почитать Кровавый меридиан. Надо же когда-то окультуриваться начинать.  Нашел английскую версию, убедился, что слова понимаю через одно, а язык красивый, жалко. Ладно, ищем русскую.  Беру Айпад. Иду на Литрес — нету. Иду в Айбукс — нету. Я бы и рад вам, дорогие магазины, денег дать, дак ведь вы же сами не хотите!  Ладно, пойдем к пиратам. Беру ноут. Иду на рутрекер. Ищу. А он без логина не ищет.  Ладно, логинюсь. Ищу опять. Ура, есть! Качаю файл торрента.  Вспоминаю, что ноут новый, а в Германии за торренты неиллюзорно ебут. Надо ставить ВПН.  Ставлю ВПН. Вспоминаю, что ноут новый, торрент открыть нечем.  Иду на сайт Transmission. Жму скачать. Не качает! Как так? А ссылка на релизы в Гитхабе, а Гитхаб как раз лежит. Сколько он лежит в год, час-два? Ну вот мне как раз повезло.  Иду за старым ноутом. Перекидываю Трансмишн через Эйрдроп. Спасибо Эплу и Portable apps.  Запускаю торрент. Сиды есть, слава рутрекеру!  Скачалось. Открываю. Книга в fb2. Ладно, плавали, знаем.  Гуглю сайт в Дакдакго. Конверчу в epub. Кидаю через Airdrop.  Выбираю открыть в Books. Алилуйя! Я наконец-то увидел буквы, те самые и ровно там, где я хотел.  В итоге хотел почитать книжку, а вместо этого сижу с двумя ноутами, айпадом и десятком открытых вкладок. Странно, что телефон не понадобился.  Все записано по горячим следам, все чистая правда. С неделю назад все происходило, ну или когда там недавно Гитхаб лежал?  А в программировании так каждый день, блин!",252
"Одну важную формирующую мысль я прочитал когда-то на сайте Ромы Воронежского. Он там рассуждал, что логотип необязательно ставить в левый верхний угол. Да, исследования показывают, что люди смотрят чаще всего именно туда, но это потому что там _уже_ стоит логотип, а не логотип там стоит, потому что люди туда смотрят. Цитата:  > Люди смотрят туда, где им что-то показывают, а вовсе не куда-то туда всегда.  Похожую ситуацию видел на одном докладе. Там чувак говорил: вот, смотрите, статистика, чем больше платформ поддерживает приложение, тем больше оно зарабатывает. И давай продавать свой кросс-платформенный фреймворк. А на самом деле, конечно, компании, которые много зарабатывают, имеют деньги делать под все платформы. Не надо путать причину со следствием.  Ну и это меня немного расслабило в смысле отношения к жизни. Понравится ли людям читать лонгриды? Сколько должно быть картинок в статье? Делать мобильное приложение или веб? Что лучше — аудио или видео? В какой день недели выкладывать? Исправлять ли ошибки? Будут ли люди скачивать и устанавливать десктопное приложение? Купят ли приставку только ради вашей игры? Встанут ли в 4 утра, чтобы посмотреть прямой эфир?  НЕВАЖНО. Если будет очень нужно, люди сделают что угодно. А если не очень нужно, то проблемы у вас начались гораздо раньше.",253
"Когда-то давно я работал в компании Эхо, и у нас было довольно толковое руководство: смотрели, вникали, обсуждали, думали, пробовали и меняли процесс. Реагировали, короче.  Ну и вот заметили мы в какой-то момент, что становится хуже и хуже. Все больше вещей нет-нет да ломается, все чаще будят по ночам, все меньше аптайм. Посмотрели на эту тенденцию, почесали репу, решили, что дело в техдолге и приняли осознанное решение им заниматься.  И что бы вы думали? Через полгода все исправилось! Ошибок стало меньше, аптайм выше, программисты и админы счастливее. Это, кстати, чуть ли не единственный случай в моей жизни, когда я настолько наглядно увидел, ощутил даже, анализ проблемы, решение и эффект. Даже ненадолго поверил, что программистами можно управлять.  Ну это я все к чему. Знаете, наверное, что я как минимум с 2018-го, когда вышла Software Disenchantment, ною по поводу того, как все стало сложно в этом вашем Айти: кубернетесы там, вебпаки, электроны, приложения по пятьсот мегабайт — без поллитры не разберешься.  Казалось бы — ну дед ноет, что у него в юности спина не болела, проходи мимо, да? Но если подумать рационально и сложность софта действительно растет на ровном месте, мы должны бы по идее как-то увидеть результаты, эффекты от этого, так?  Так. Ну а теперь вспомните, сколько раз за этот год лежали гиганты: то фейсбук, то гугл, то клаудфлер, то гитхаб, то вот амазон сегодня. Ага.  А причина простая: сложность. СЛО-О-О-ЖНОСТЬ, алло. Пора платить техдолг и расчищать конюшни, а не продолжать тушить костер джунами. Рано или поздно оно все должно было ебнуться, ну вот мы где-то в середине этого коллапса и находимся. Дальше будет веселее.",254
"К истории с Log4J есть только один вопрос: раскрывать переменные не только в конфигурации, но и в «опасных» строках, которые пришли снаружи, это же уязвимость уровня «строить SQL-запрос конкатенацией без эскейпинга», нет? Давайте просканируем сообщения пользователя и если найдем в нем код, исполним. Причем это сделано осознанно (майндфул, как сказали бы сейчас), потому что была опция такое поведение отключить.  Я почему-то видел видел только треды жалости к разработчикам. Мне их тоже жалко, но если хотите извлечь из этой истории какой-то полезный для себя урок, то вот он: строки бывают опасные и безопасные. Безопасные — те, которые зашиты в вашу программу на этапе сборки. Все остальные опасные, и работать с ними надо совершенно по-другому.  Да, система типов этого не отражает, даже в Расте, где есть 20 разных типов для строк, но нет вот такого вот гораздо более важного. Это еще один урок — системы типов программисты делают для возни в компьютере, а на бизнес-задачи им в общем-то пофиг. Поэтому не надейтесь и думайте своей головой.",255
"Не знаю как вас, но многих впечатлила демка The Matrix Awakens на Unreal Engine 5. И я уверен что там много подкапотных улучшений именно для создателей игр, включая упрощение производства, глобальные и единые системы освещения и детализации, которые «просто работают», система генерации ассетов и т.п. Безусловно, это изменит экономику создания игр, что очень важно.  И мне очень жаль, что я не могу в полной мере этим всем впечатлиться из-за... latency. Да, оно производит красивые статичные картинки (если выключить зеленый фильтр, ололо), но в динамике, как только что-то происходит — едет машина, поворачивается камера — оно происходит с видимой задержкой в несколько фреймов.  Оно и понятно — UE5 это шаг в сторону «честного» расчета света, отражений и теней, чтобы художникам не надо было трястись над каждой сценой отдельно. И это шаг в правильном направлении, конечно, но, к сожалению, сегодняшнее железо не может обсчитать ВСЮ картинку за каждый кадр. Вместо этого информация об отражениях, тенях и даже пикселях (да?) накапливается несколько кадров и потом как-то аппроксимируется, то есть усредняется, заполняя пропуски (я не эксперт, знаете, что там происходит — расскажите!)  И как я уже сказал, картинка — супер, но задержка — полный атас, как будто опять в детство попал, родители не хотят апгрейдить комп, а поиграть в современные игры хочется.   Обидно, что как только я заработал достаточно денег, чтобы позволить себе last gen, индустрия сделала резкий поворот и решила производить тормозящие игры by design. Кто как, а я за картинку попроще, но чтобы каждый кадр был «настоящим», а не «примерным». Стабильный высокий FPS >>> красивых статичных кадров, опоздавших на 50 мс. Да, я считаю, что Quake 3 на 240 Hz это в первую очередь впечатляюще и красиво. Ждем RTX 9090 Ti, может хоть на нем рейтрейсинг начнет нормально работать.",256
"История-то не заканчивается! Если в результате первой подстановки в паттерне появились новые переменные, Log4J их радостно продолжить подставлять :))) Пока залатали, ждем уязвимости и патча с третьим уровнем рекурсии.  Хочется, конечно, верить, что индустрия какой-то урок из этого извлечет, типа что сложность это плохо, а в среднем Джава коде примерно в 200 раз больше фич, чем того требует здравый смысл, но кого я обманываю. Залатают и продолжат брать log4j дальше и нахваливать, делая вид, что все отлично.",257
"Лев попросил написать, что наконец-то сделали язык с нормальными строками — Свифт. Нормальные — это когда ""🤦🏼‍♂️"".count == 1. Преимущества языка, выпущенного после 2001 года.  Каждый раз, когда вижу где-то неправильно обрезанные строки, в каком-нибудь условном превью сообщения («уважаемый Никита, идите в зад...», раньше по байтам, сейчас все чаще по кодпоинтам), думаю, что писали бы на Свифте — было бы нормально. Потому что defaults matter. Когда для того, чтобы что-то обрезать правильно, нужно ставить какую-то там библиотеку на 13 мегабайт (да, на 13 мегабайт), апдейтить ее дважды в год (да, дважды в год), конвертить строки туда-сюда, какие-то там итераторы создавать, да даже если бы этого всего не было и нужно было просто разобраться в проблеме, а тебе как всегда некогда, ты нелюбознателен и String::substring вот он, под рукой (а в подлом Питоне так и вообще неправильный способ выглядит как красивейшие `str[0:100]`), то конечно выиграет всегда второе. А проиграем мы, юзеры.  На моей памяти довольно редкий случай, кстати, когда язык программирования в противостоянии компьютера и человека занял сторону человека. Обычно же как: компьютеры работают вот так, поэтому и язык работает так же, а со своими людскими проблемами разбирайся сам.  Правильные строки — это когда вместо «как компьютеры работают» сделаем «как человеки работают», что довольно круто, как мне кажется. В смысле что язык помогает решать те проблемы, которые на самом деле возникают у людей, а не те, которые удобно решать компьютеру. Так что это, будете делать свой язык программирования — не продолбайте.  UPD: В Эликсире еще правильно String.length(""🤦🏼‍♂️"") == 1",258
"Вот уже три недели я решаю Advent of Code в прямом эфире. Это не первый мой заход, но пока что самый стабильный, с реальным шансом дойти до Рождества.  Зачем? Мне кажется, он тренирует несколько полезных навыков, которые в обычной жизни у меня слабо развиты.  Во-первых, решать быстро. Я вообще люблю все делать размеренно, подумать, погулять, подождать, когда придет хорошее решение. Адвент не про это — чем быстрее, тем лучше.  Во-вторых, он учит решать настоящую задачу, а не какую-то более сложную выдуманную вместо нее. Это важный концепт, но попробую ужать.  Допустим, в спорте обнаруживается какой-то очень простой, но мощный удар, который позволяет при минимуме тренировки побеждать очень часто. При этом он скучный, неинтересный, «подлый», но валидный. И очень уж хорошо работает.  Так вот, у людей, этим спортом занимающимся, могут возникнуть в голове некие «соображения совести», которые будут мешать им пользоваться, потому что «неправильно», «неэтично», «скучно», «так все могут». И тут-то собственно и вскрывается, что они не ради победы спортом занимаются и поэтому, возможно, у них и нет особых результатов. Они придумали себе более сложные, чем реально необходимо, условия и страдают, пытаясь в них существовать. Не надо так.  В программировании такое сплошь и рядом, но в первую очередь, наверное, там, где разводят архитектуру и инфраструктуру вместо того, чтобы написать простой перл-скрипт. И это нормально, естественно, но неэффективно, и хотелось бы научиться видеть и решать настоящие проблемы максимально эффективно, а не те, которые хочется или интересно решать.  И тут помогает Адвент. Для меня настоящий прорыв случился, когда я понял, что могу редактировать вход программы руками, если мне так удобнее. Формально там всегда есть один текстовый файл на вход, и, кажется, что надо бы в первую очередь написать его парсер. На практике парсер можно писать дольше, чем просто захардкодить значения. Сегодня, например, файл был такой:   Player 1 starting position: 1 Player 2 starting position: 3   Ну да, парсер написать несложно, но в этом нет смысла: не нужно писать программу, обрабатывающую все подобные файлы, нужно решить для конкретно вот этого, а он никогда не поменяется. Так же как Player 1 и Player 2 нет смысла абстрагировать: их всегда будет ровно два и ровно в таком порядке.  Или вот тоже сегодня я написал фунцию, складывающую семь векторов. Не шесть, не восемь, а именно семь: на любом другом количестве она работать не будет. И ничего, брат жив.  Третье чему учит Адвент это не планировать на будущее. У каждой задачи две похожие части с одним и тем же входом, но, пока не решишь первую, условие второй не видно. Можно попробовать угадать и приготовить какие-то заготовки на будущее, но довольно быстро становится понятно, что угадываешь ты редко, заготовки не так уж и сильно помогают, а поменять код, когда наконец появляются новые требования, не так уж и сложно. Прямо как в жизни.  Ну и четвертое важное это то, что программа здесь в общем-то никого не интересует. Отправлять код некуда, нужен только ответ на проблему — как правило, одно число или слово. Сможешь решить на бумажке — флаг тебе в руки, никто косо не посмотрит. Иногда программа нужна, чтобы понять проблему, а дальше уже включается человеческая смекалочка. Более того, программу даже не всегда можно написать. Короче, дрель никому не нужна, нужны дырки в стене. Прямо как в жизни!  Все в целом для меня такая когнитивно-поведенческая терапия. Даже если умом я понимаю все это, попробовать и увидеть, как эти принципы работают на практике, обжечься, ошибиться и сформировать правильные привычки — бесценно. Кроме того, писать медленно, решать не те задачи и автоматизировать ненужное я уже и так хорошо умею, почему бы не потренировать те навыки, которые проседают? Присоединяйтесь!",259
"Dominic Szablewski недавно опубликовал QOI: Quite OK Image format. Это примерно как PNG, только сильно проще, сильно быстрее и жмет почти не хуже. В качестве главного артефакта — спека, которая помещается на одну альбомную страницу.  Какое-то время назад я увлекался распределенными алгоритмами, и тогда на смену Paxos приходил Raft. У них тоже одна из целей была: Paxos работает норм, но въехать в него сложно, поэтому мы придумали новый протокол, который не хуже, но сильно проще понять и закодить. Это прям явно как одна из дизайн-целей заявлялось.  Оба этих случая бьют мне прямо в сердечко, конечно. Потому что не разводят сложность на пустом месте. Всегда есть этот баланс — сделать чуть лучше, но сильно сложнее, и многие не чувствуют, когда надо остановиться.  А второе — это что помимо придумывания надо еще и объяснить, и это часто важнее. Простота тут помогает, но и сама по себе цель благородная. Что толку от великого алгоритма, если его никто не может понять?  Академики тут, к сожалению, часто не блещут, и донести мысль до простых работяг вроде меня им бывает тяжело. Я поэтому предпочитаю пейперам блог-посты: их хотя бы пишут люди для людей, а не пользователи Латеха для владельцев А4 принтера.",260
This message is not supported in your version of Telegram. Please update to the latest version.,261
"Все, наверное, видели старую картинку, как в Слаке доставляются нотификации. Если не видели, то там такая развесистая блок-схема с кучей стадий и условий, и все не в какую-то понятную линию выстроено, а переплетено в клубок со стрелками назад и всякими прочими сложностями беспокойного ума.  И типа картинка эта преподносится под соусом «смотрите, сколько сил мы потратили и как устали^W постарались», мол, простота для пользователя — это не просто.  А я думаю, что она иллюстрирует другой постулат — сложность, она и есть сложность. Если вы придумали сложные правила, пользователям тоже будет сложно. Если ваша схема не помещается в голову разработчика, она не поместится и в голову клиента, у него не возникнет ментальной модели и он махнет на попытки разобраться рукой.  Это все из собственного опыта, конечно — я который год вынужденно сижу в рабочем Слаке, но не так, как любят любители панических атак, а пассивно: если мне что-то написали — отвечу, в остальное время просто Слак не открываю. Зачем?  И вот из-за этой их сложности, которая «нужна для простоты», я который год не могу настроить себе нотификации. Типа, я очевидно хочу видеть все DM и @mentions и ВСЕ. И вот это какая-то неразрешимая задача. На десктопе, понятно, без шансов (почему, кстати, пуши для десктопа до сих пор не завезли? Очевидная вроде фича?), но хотя бы на мобилке.  То есть там есть какая-то такая опция, но он начинает показывать всякие @all и @here тоже, хотя я, очевидно, не @here (в чем, кстати, тогда его отличие от @channel, если мне все @here прилетают all the time?).  Можно, конечно, настраивать нотификации отдельно для каналов, и там вроде как есть возможность отключить @here (но не @all) (это мне подсказали, кстати, сам бы не нашел), но это тридцать каналов и семь кликов на канал. Я конечно упорный, но не настолько.  А когда открываешь, он тебя еще бомбит непрочитанными сообщениями _в соседних воркспейсах_, которые тебя вообще не касаются. Я был бы не против сидеть в условном слаке Кложуристов (да и вообще во всех слаках, в которые меня когда-либо приглашали — вдруг кто заменшонит?), но это значит что каждый раз когда кто-то там что-то пишет (не мне!!!) я буду видеть красную лампу. Поэтому приходится максимально быстро выпиливаться.  И я уж не говорю про баги. Например, прямо сейчас у меня в канале висит один Unread, хотя я заходил туда уже миллион раз и как от него избавиться — хрен знает.  Понятно, что Слак делается для тревожных кисонек, которые сидят там 24/7 и обрабатывают миллион сообщений в день. И оно для них, наверное, работает, потому что какая в самом деле разница, когда и какие нотификации прилетят, если все равно в него заходишь каждые пять минут. Но вот для пассивного расслабленного использования а-ля емейл, когда важна надежность и предсказуемость нотификаций, он подходит слабо.  Почему-то у меня стойкое ощущение, что я про это где-то писал, но где — никак не найду.  С Новым Годом! (Бирмана — годом!)  💩74 🔥59 😁29 👍26 😱16 🤮10 🥲8 🎉6 ❤️4 🤩4 👎3",262
"На Новый год (Бирман, смотри, правильно написал!) в Москве прошел «Бал самозванцев» — «событие, на котором люди рассказывали о том, что у них не получилось в 2021 году». Я там не был, но идея понятна.  Так вот, вместо итогов года почему бы не поделиться, что у кого не получилось в 2021-м? Я начну:  — Убил то ли две, то ли три недели на то, чтобы подвинуть маковский «светофор» в JetBrains Fleet. И не сделал. Тупо сдался.  — Не прошел собеседование в Nubank. Сказали, что слишком «индивидуальный».  — Пытался делать сайд проект, начатый еще в 2020-м. До сих пор не дописал.  — Сходил в подкаст, из которого меня выгнали из-за технической неподготовленности.  — Не смог договориться о компенсации в подкасте, который зарабатывает рекламой.  — Начал писать пост про отказ от Гугла и не написал (впрочем, в Телеграме вышло несколько постов по мотивам).  — Купил PS5, а времени играть не купил. За год прошел одну игру.  — Купил Valve Index, но не прошел даже Half Life: Alyx.  — Не получил водительские права.  — Утопил телефон (старый).  — Украли велосипед (новый).  Рассказывайте, что у вас не получилось?",263
"Ух как меня бесят рассинхроны в интерфейсе. Например, когда отвравляешь новый твит, он сначала не появляется в ленте, а потом может появиться дважды. Или когда поключаешь наушники через Bluetooth меню и оно пишет Connected, а соседняя иконка громкости все еще не поменялась. Или галочки в Github Actions: лог бежит вперед, а группы помечаются выполненными только через секунду-две.  Казалось бы: ну договоритесь, вся информация у вас есть, я своими глазами вижу, что нарисована самопротиворечивая ерунда. А компьютер не видит. Потому что нет single source of truth, данные никто не нормализует и во всем мире, кажется, осталась только eventual consistency.  В том смысле что eventually мы все умрем, и переживать будет уже некому.",264
"Вот вы все так любите Докер, а у меня с ним все как-то не получается.   Сначала я не мог на M1 запустить его с хоть какой-то приемлимой производительностью, а теперь вот собрал образ, который не могу потестить локально, но он хотя бы в Github Actions работает.  И что вы думаете? Уже два человека не смогли его запустить с совершенно мистическими ошибками. Причем ошибки не из серии «не запускается», все запускается, просто внутри уже ведет себя как-то по-другому. Что, почему? Да хрен его знает. Казалось бы, единственная фишка — воспроизводимость, и ту просрали.  Пока что из двух подходов оба себя не оправдали. Счет ноль-два не в пользу Докера.  А мораль какая? Упрощать надо софт, а не накручивать поверх сложных систем еще одну мега-сложную. Если бы то что я хочу запускалось, скажем, как Java-программа, никакой Докер никому никогда бы и не понадобился. Или как статически слинкованный бинарник. Но нет, блин, там Питон библиотеки, которые не то что запустить, их установить это целый квест.  Пис.  UPD: Докер предварительно оправдан по второму пункту (воспроизводимость). Оказалось, что в репе Fira Code есть инструкция собирать Dockerfile, а не юзать готовый образ. Поспешил с разоблачениями",265
"Посмотрел на Ютубе видео «Essence — October ’21 Progress». Там чувак пилит операционку с GUI с нуля. Да, даже без Линукса.  Выглядит, конечно, крышесносяще. Например, в инсталляторе он нажимает «Install» и тут же, в следующем кадре уже написано «Installation complete». Не секунду позже. Не полсекунды. Сразу же. Как будто ничего и не произошло.  Сама ОС после этого загружается за 700 мс. Он биоса ждет раз в десять дольше (да, в десять!). Представьте, что ваш компьютер включался нахолодную так же быстро, как ваш телефон просыпается ото сна?  Дальше он показывает графический юй, такой, довольно традиционный, но не без находок. Впечатляет, конечно, тупо количество приложений, которые он в одно рыло запилил. И качество, то, что они не разваливаются графически нахрен, как почти любое в Линуксе.  Показывает, что флешки можно вытаскивать без «безопасного удаления» (господи боже, наконец-то!). У папок сразу виден размер (о да!)  Показывает, что всякие системные вещи типа темы и скейлинга применяются мгновенно, без всяких «выйдите и зайдите снова». И ничего, блядь, не моргает!  Короче, впечатляет. И освежает. И напоминает, что компьютеры, вообще-то, могут быть быстрыми. Это все вроде бы простые, тривиальные, базовые даже вещи, однако же ни одна современная ОС так не может. Хотя если со стороны посмотреть — ничего, вроде бы, не мешает. Но, как в том меме, «то одно, то другое, блядь».  И видео обязательно посмотрите. Эффект очень сильный. Нам пишут:  «Я не знаю. как это работает, но после просмотра видюшки из твоего твита (Essence) у меня возникло желание прямо сейчас встать и начать кодить, впервые за месяц»  Абсолютно согласен. Пишите маленькие быстрые приложения. А большие не пишите.",266
"Чего я до сих пор не понимаю это истории с контроллерами/геймпадами. Наивному мне казалось, что они должны что-то вроде мышки быть: воткнул — сразу работает. Один фиг там одни и те же кнопки в одних и тех же местах.  Каково же было мое удивление, что:  - Не всякий контроллер подключится ко всякому компу. - Контроллеры между разными приставками вообще нельзя использовать. - Контроллеры разных поколений, даже у одного производителя, тоже как-то принципиально по-разному подключаются.  Помню, гуглил как-то, можно ли Xbox контроллер подключить к ПК, и там была какая-то история типа «надо посмотреть на заднюю крышку и если там какая-то крышечка одной формы, то да, а если другой, то нет». При том что во всем остальном они идентичные абсолютно. Не то что кнопки совпадают, а вообще все, даже дизайн.  То есть я все понимаю и про маркетинговые причины, и про сложности договориться, и про стандарты USB/Bluetooth.  Но, сука, потом смотрю на два абсолютно одинаковых контроллера от разных приставок и все-таки не понимаю, в какой момент мы свернули не туда.",267
"Как тяжело чувствовать себя дедом, который не понимает и не разбирается в этих ваших комплюктерах.  В какой-то момент мой телефон перестал просыпаться на СМС. Ну, знаете, ждешь там какой-то код подтверждения, он оказывается уже сто лет как пришол, но от телефона ноль намеков. Причем это перенеслось со старого телефона на новый. В настройках, конечно, включены все возможные способы: звук, баннеры, удар током, выстрел в воздух. Do not disturb не включен. У других приложений таких проблем нет.  На том же самом телефоне не синхронизируются контакты. Не все, а некоторые. При том что айклауд включен и всегда был включен и на телефоне, и на компе. Эта «странность» тоже пережила два телефона, контакты между ними мигрировали, а вот на комп ни в какую.  Вчера вот еще буквально собрался спать, поставил ноутбук на рабочий стол и воткнул шнур зарядки. Открылся колор пикер. Как, что, почему? Никогда такого не было, но вот один раз случилось.  Купили домой принтер. Ну, то что он после сна теряет вайфай и требует хард ребута это я могу понять, это уровень современных технологий. Но вот если послать на него документ с айпада, то там не будет диалога «настройки печати». И, соответственно, нельзя выбрать ориентацию листа. Казалось бы, он наверное не дурак, у картинки/документа легко найти большую сторону и поставить ее вдоль большей стороны листа, да? Или хотя бы всегда вести себя консистентно? Но нет, это было бы «not retarded enough», как говорили в великом Generation Kill. Он выбирает сторону (кажется) рандомно, иногда печатает правильно, иногда перпендикулярно, даже один и тот же документ, даже из одного и того же приложения!  AirPods Pro, конечно, хорошие наушники. Но логику их подключения я так и не понял. У меня не самый экзотический сетап в мире — ноутбук и телефон. Так вот, он выбирает, к чему подключиться, абсолютно рандомно. Может быть так, что ты смотрел видос на ноуте, закрыл, перешел за другой стол, открыл — они уже отсоединились. А может быть так, что только что слушал на телефоне, убрал уши, достал — они уже на компе. Никакой логики и закономерности я не заметил, ну, кроме того, что оно это делает, чтобы максимально меня выбесить.  Я уж не говорю про то, что наушники тупо иногда смещают баланс полностью на левое ухо. Сами. Старый баг. Известный. Люди дажи проги понаписали, которые проверяют и восстанавливают все как было. Но не Эппл.  И вот буквально сейчас логинился в сайт, он прислал код подтверждения. Я его профукал (телефон не загорелся), запросил повторный. Повторный пришел в точно таком же сообщении, слово в слово, но все пробелы заменены на плюсы. Почему? Как?  Я не знаю. Да и не хочу знать. Я дед, технологии меня не любят, а я их. Мое время прошло, я уже никогда не смогу в этом разобраться.",268
"Одно время в юзабилити были очень популярны так называемые «персоны». Это когда ты придумываешь несколько вымышленных персонажей, которые якобы будут пользоваться твоим продуктом, и дальше дизайнишь для них, а не для абстрактного пользователя в вакууме. Причем придумывали прям целую биографию: имя, возраст, цвет глаз, где учился, как выглядит, кем работает, есть ли девушка, и т.д.  С одной стороны вроде бы и логично, а с другой полный бред. В этой системе нет новой информации: люди, их желания и возможности придуманы целиком из головы дизайнера (высосаны, да), поэтому что придумывай персон, что не придумывай, получится все равно отражение культурного уровня проектировщиков.  Ну и лишних деталей одновременно и слишком много (почему персону зовут Вася? А если назвать Петя, что, другой продукт получится?), и слишком мало, чтобы дотянуть до сложности реального человека.  Тогда дизайнеры поигрались, им надоело и они придумали новую парадигму (да, совсем как в программировании!), называется Jobs to be done. Внезапно свежей оказалась мысль, что независимо от того, зовут человека Глаша или Маша, им обоим нужно посмотреть баланс лицевого счета, и вот вокруг этой задачи и надо проектировать.  Звучит пока что сильно логичнее, хотя, как и с любой методологией, не обходится без перегибов. Например, легко забыть, что за определением Jobs стоит целый этап собственно проектирования: а как эти пятьдесят задач упаковать так, чтобы в приложении вышло всего две кнопки? Вот настоящая задача, а собирать требования, скажем честно, и без всяких методологий всегда умели.  Ладно, это все вступление, а теперь примеры. Есть версия, что тот самый адский дизайн современных микроволновок — ну, когда у нее восемьнадцать кнопок и тридцать четыре режима — это как раз прямое следствие Jobs to be done, примененного буквально.  Механически ты управляешь всего двумя параметрами — мощностью и длительностью. Но если зайти со стороны JTBD, то человеку ведь не нужно «2 минуты на 800 ватт», ему нужен теплый блинчик с ветчиной и сыром.  Моя любимая цитата — «людям не нужна дрель, им нужны дырки», но слава богу, дрели пока еще не превратились в микроволновки. А вот микроволновки — превратились. Всякие вот эти кнопки типа «суп» или «курица» или «завтрак» это в буквальном виде задачи, и под каждую отдельная кнопка.  Проблема? Ну, проблема в том, что кнопок-то много, а нужной все равно нет. Курица из морозилки и слегда остывшая курица с обеда — две разных курицы, но в какую панель влезет столько нюансов?  Ну и переносимость, конечно. Ни на каком продукте в жизни не напишут «засуньте в микроволновку и нажмите функцию “Картошка”». Напишут — 2 минуты на 800 ватт. Потому что минуты и ватты универсальны, а функция «картошка» — нет.  У меня в Airbnb сейчас стоит чайник (да, чайник, для кипятка), на котором 11 кнопок, 10 лампочек и 75-компонентная ЖК-панель. Да, там есть функции «Травяной», «Улун», «Крепкий» и т.п. И да, чтобы его включить, мне понадобилось минут пять. И да, прямо сейчас я полез его тестировать, включил кипячение и не смог его выключить. Теперь у меня есть полный кипятка чайник, но чаю я совсем не хочу. Интересно, где в матрице Jobs to be done эта ситуация? Также интересно, вспоминал ли во время проектирования хоть кто-нибудь цитату из Юрского Парка?   Поэтому методология методологией, а этап синтеза никто не отменял. Иногда проще дать людям дрель, а не каталогизировать все возможные ситуации, для которых им могут понадобиться дырки. Думайте головой, а не только книжками.",269
"Обсуждали в Грампи.Чате галочки «запомнить меня» и протухающие сессии. Вообще удивительная технология, мало что в компьютерах так плохо работает (или так сильно тебя обманывает) как «запомнить меня». Потому что я (естественно) всегда и везде ее зажимаю, но при этом логиниться приходится все равно по пять раз на дню.  Так вот, @grishka сформулировал простую концепцию:  > если я где-то залогинился один раз, эта сессия ОБЯЗАНА жить вечно, пока я сам не разлогинюсь, или не завершу её с другого устройства  Просто? Просто. А знаете что еще кайфово? Галочка «запомнить меня» становится не нужна. Интерфейс и ментальная модель становятся радикально проще, потому что не нужно держать в голове и управлять вот этим вот странным процессом «что делать, когда компьютер посчитал, что нужно тебя разлогинить». А поскольку им управлять не нужно, он пропадает из ментальной модели вообще и становится хорошо, просто и предсказуемо.  Похожее откровение было когда-то в блоге у @ilyabirman. Он придумал, что галочки «Open at login» быть тоже не должно. Запустил программу — она работает, пока из нее не выйдешь. Если компьютер решил перезагрузиться, что ж, это не повод закрывать программу!  А если уж ты из программы вышел, и компьютер (скорее всего, по какой-то совершенно другой!) причине перезагрузился, это не повод открывать программу снова. Всем, наверное, знакомо ощущение, когда раз в полгода перезагружаешь ноут и вылазит миллион каких-то чертей, про которые ты те же полгода как забыл и закрыл, а они открылись, потому что «Open at login».  Короче, не надо озадачивать пользователя страными вопросами «а что делать, если произошло рандомное условие X» (перезагрузка, две недели прошло, луна поменяла фазу, кот чихнул). Если я что-то сделал, то пожалуйста выполни и запомни. А если я ничего не сделал, то пожалуйста ничего не трогай и оставь как было.  И нет, перезагрузка компьютера это не «активное пользовательское действие». Это техническая деталь, типа «пора делать дефрагментацию», которая нормальных людей не волнует и влиять тоже ни на что не должна.",270
"Считается, что программисты любят иерархии. Их хлебом не корми, дай что-нибудь во что-нибудь рекурсивно вложить. Папки в файловых системах, например. Или там урлы. Или ямл.  А люди (обычные, не-программисты) считается что рекурсивные иерархии не очень хорошо понимают. В обычной жизни ты можешь взять лист бумаги и положить его в папку, а вот папку в папку положить уже не можешь.  Я в этом вопросе скорее на стороне людей. Мне всегда импонировали плоские организации, в первую очередь потому, что иерархию надо придумывать и поддерживать, а это значит принимать решения и мириться с их несовершенством, то есть работа и боль. А плоский список — он и есть плоский список, в нем все равны и думать особо не надо.  Поэтому каждый раз, когда в программе больше одной панели для организации чего-то, я сильно напрягаюсь. В iA Writer, программе, которая начиналась с того, что боролась за цифровую чистоту, например, сбоку показывался список файлов, но потом над ним сделали еще один уровень — «Locations». Мало того, что это еще одна панель, которая черт знает сколько места отъедает, она еще и угнетает одним своим присутствием. Мол, неправильно ты, дядя Федор, программу используешь, мы вот панель сделали, а у тебя в ней всего один пункт.  Это я демку Stack Browser посмотрел. Они предлагают табы группировать в карточки, карточки в стеки, а стеки — в пространства. Опять же, это какого размера голова нужна, чтобы в этом ориентрироваться и все правильно разложить? При всей кажущейся непрактичности обычных браузеров я восхищаюсь простотой линейного списка табов и все. Даже окна отдельные это уже оверкилл.  Самое страшное, что я видел на эту тему будет, пожалуй, OneNote. Там чтобы до заметки добраться надо четыре уровня пройти: Блокнот → Секция → Страница → Текстовый блок на странице. А ведь всему этому еще и имена надо придумывать!  Короче, простая, плоская организация — да. Иерархия — нет.  UPD: Люди, конечно, хорошо понимают иерархии (дом - улица - город, подчиненный - отдел - компания). Наверное, проблема тут в том, что придумывать иерархии на ровном месте сложно, а уже существующими пользоваться более-менее легко. Особенно когда в них есть смысл (в реальном мире иерархии, как правило, возникают ровно там, где они очень нужны, поэтому въехать в схему всегда легко). Ну и я тут смешал немного рекурсию и иерархию, конечно.",271
"Посмотрел видео, в котором Егор Бугаенко (да) критикует новый Макбук. Среди претензий только сравнение со старым: весит не так, экран не такого же размера, коробка другая, кнопки черные на черном фоне. И вот это его настольно взбесило, что он даже вернул его в магазин и сидел ждал у телефона, что ему позвонят из Купертино и извинятся (вы сейчас думаете, что я преувеличиваю, но нет, ЭТО ЖЕ ЕГОР, такого нарочно не придумаешь).  Это я к чему? Конечно, к вещам легко привыкнуть. Конечно, каждый раз, когда берешь в руки что-то новое, сделанное по-другому, первая мысль: как так можно? Это же отвратительно.  Первый раз, когда я увидел клавиатуру макбука, мне казалось «зачем черные кнопки на белом, это же нелогично?». Потому что подавляющее большинство ноутбуков тогда (да и сейчас) это либо черное на черном, либо белое на белом. Но пожив с макбуками, нелогичным теперь кажутся все остальные. «Как можно делать по-другому?». То же самое при переходе с Андроида на Айфон, с Айфона на Андроид, с маленького телефона на большой, с большого на маленький, с Винды на Мак и с Мака на Винду. (Линукс не вспоминаю, Линукс плох объективно).  «Как такая громадина поместится в карман?». «Как на таком маленьком экране что-то делать?» «Как жить без нотификейшн центра?» «Как жить без счетчиков непрочитанных на иконках?» «Как жить без свайп-клавиатуры?» «Как набирать на свайп-клавиатуре?» Все это абсолютно симметричные вопросы, в которых нет правильной стороны. Можно так, а можно так, никто не умрет, задачи сделаются, все будут довольны.  Секрет в том, чтобы дать себе время привыкнуть. Да, первое время все будет мешать и не нравиться. Но цена этим впечатлениям примерно ноль. А вот через неделю, а лучше через месяц, когда руки привыкнут, логика утрясется, привычки выработаются, вот тогда-то самый ценный фидбек и пойдет. 90% свежих впечатлений забудутся, потому что по большому счету они ничего не значат.  «Встречают по одежке», «только один шанс произвести первое впечатление» — да, это факт человеческой психики, но не ролевая модель. Это когнитивная ловушка, которую надо преодолевать, а не строить на ней свою картину мира. «Я воспринимаю только компьютеры Эппл», «Эппл уже сделала лучший ноутбук, лучше уже не будет» — признак костности мышления и жизни внутри пузыря, а не что-то, чем стоит гордиться.  Пост скриптум. Почему, действительно, у макбуков черные клавиши? Очевидно, потому что надписи должны светиться в темноте, а значит надписи будут белыми (прозрачными). Значит, чтобы они читались контрастно, кнопки должны быть черными.  Почему тогда весь макбук не сделать черным? Потому что черная электроника уже и так выглядит как говно, а белый (ну, светло-серый) радует глаз и легче вписывается в интерьер. Любой черный монитор или системный блок выглядит как бельмо в любой более-менее человеческой комнате. Откуда пошла мода на черный я не знаю, может быть, всех задолбал желтеющий пластик, а может быть, чтобы сматчить вид выключенного экрана, но я рад, что Эппл pushed back.",272
"Попалось в Твиттере:  > Safari doesn’t support fractional font sizes, so we do integer font size and add the fractional size using the scale transform.   el.style.fontSize = `${Math.floor(fontSize)}px`; el.style.transform = `scale(${fontSize / Math.floor(fontSize)})`   И это, мне кажется, максимально концентрированно отражает вообще все программирование:  - Абстракции, которые не делают то, что тебе нужно. - Объезд абстракций максимально идиотским, но изобретательным способом (смекалочка!) - Создание техдолга, с которым самому же и придется разбираться. - Вполне вероятно, потеря качества. - Вполне вероятно, не самое оптимальное использование ресурсов. - Из-за одной неудачной платформы страдают все. - Сомнительная фича in the first place (я не знаю контекста, но зачем вообще нужен дробный размер шрифта?) - Готовность мириться с неоптимальными посредственными решениями. «И так сойдет» - Бессилие перед невозможностью сделать нормально. - Полная бессмысленность происходящего на всех уровнях. - Высокие зарплаты всех участников^W^W^W^W.  Шутка про «вылить воду из чайника и перейти к шагу 1» это не шутка, это буквально рабочие будни.",273
"Коллега по несчастью Алексей Мигутский пишет в твиттере:  > Ребята, если ГитХаб начнёт ВДРУГ тормозить, то знайте — мы внедрили реакт! Я вас предупредил. Обновляйте макбуки.  И дальше про мотивацию:  > Мотивация — чья-то карьера, строчка в резюме и «я слышал, что реакт — это быстро», пизданутое каким-то топом.  И это натолкнуло меня на мысль, что в современном айти важно не то, что ты делаешь на самом деле, а то, что ты сам о себе говоришь. Хром самый быстрый браузер, потому что они сами себя так рекламировали. МонгаДБ это веб-скейл. Распределенные базы гарантируют консистентность, потому что написали так у себя на странице. Или вот что Реакт — это быстро.  Можно не проверять. Можно проверять, публиковать и разоблачать (см., например, Jepsen). Разницы по большому счету не будет никакой. В голове все равно останется изначальный посыл, даже если на поверку он десять раз окажется неправдой. Люди запомнят и люди будут принимать на основе этого решения, которые аукнутся всем остальным. Такова реальность, в которой мы живем.  Отдельно печалит в этой ситуации, конечно, что технические решения диктуются не результатом, который хочется получить (быстрый сайт), а процессом (удобнее разрабатывать). А цена вот:  > [...] просто подключение Реакта + стейт менеджера дает 20-25% агрегированного замедления перфа на всех страницах  Всем хорошего рабочего дня!",274
"Ух, как меня бесит фраза «На любом языке/стеке можно написать плохо». Она настолько пустая и бессмысленная, что хочется сразу из разговора удалиться, когда она всплывает.  Примерно как «Ни один истинный шотландец»:  А: Все шотландцы обожают хаггис. Б: Мой дядя шотландец, но он не любит хаггис! А: Ну, вообще-то все истинные шотландцы любят хаггис.  Возьмем Реакт. Я уверен, что на Реакте можно написать быстро. Уверен, что можно медленно. Уверен, в мире есть больше одно примера и того, и другого. Но знаете что? То же самое можно сказать про любой другой фреймворк. И даже про ванильный ЖС. На нем тоже можно написать и быстро, и медленно, и наверняка есть больше одного примера и того, и другого.  Таким образом, какую новую информацию мы получили из «На любом стеке можно написать плохо»? Правильно, никакую. Куда мы продвинули дискуссию? Правильно, никуда. Как называется человек, который использует подобные «аргументы»? Точно не истинным шотландцем.  Важно не то, что можно, а что нельзя. Можно все, вопрос только какими силами. Вам нужна команда принципалов, чтобы сайт не тормозил? У меня для вас плохие новости. Три джуна утром с бодуна не смогут испортить перформанс? Новости хорошие. 90% сайтов на Реакте тормозит? Нет, делать ставку на то, что у вас почему-то получится лучше, что вы не войдете в эти 90% — ну, минимум глупо. У Твиттера не получилось, у Гмейла не получилось, у Ютуба не получилось, а у вас вдруг получится? Сфигали?  И говорить, что фреймворк тут не при чем, а у программистов руки кривые — ну, можно конечно, но немножко глупо. Потому что знаете что? Фреймворк можно выбирать, а вот программисты, к сожалению, будут одни и те же.  Можно ли на C написать программу без утечек памяти, выходов за границы массива и UB? Теоретически можно, конечно, но на практике ни у кого не получалось.  «Если девушка сосёт хуй в публичном доме, из этого с высокой степенью вероятности следует, что перед нами проститутка.»  «Почему обязательно проститутка, — сказал я. — А может это белошвейка. Которая только вчера приехала из деревни. И влюбилась в водопроводчика, ремонтирующего в публичном доме душ. А водопроводчик взял её с собой на работу, потому что ей временно негде жить. И там у них выдалась свободная минутка.»  Вот на этом невысказанном предположении и держится весь наш хрупкий Айти.",275
"Прикольно еще, как лет десять назад все бегали и советовали брать js-библиотеки и шрифты с какого-то общего CDN, потому что «да все одно и то же используют» и «скорее всего, уже будет закешировано».  А потом пришли минификаторы JS с одной стороны и прайваси паранойя с другой (а на самом деле офигевшие рекламщики типа Гугла и Фейсбука, которые начали совсем уж бессовестно деанонимить и торговать данными), браузеры кросс-доменные кеши отключили и вся красота накрылась медным тазом.  И если подумать, то действительно, если я один раз в жизни когда-то по какой-то причине скачал react-16.0.1.min.js с хэшем abdef12345, то нет никакой причины в мире качать его еще раз для всех остальных сайтов.  Но нет, к сожалению, хорошие, красивые и логичные решения не про современный мир.",276
"В ПК-гейминге меня всегда раздражало, что какой бы комп у тебя ни был, ты все равно постоянно чувствуешь неудовлетворение: всегда есть настройка, которую можно еще задрать, разрешение, которое можно прибавить, ФПС-ы все равно проседают и ты постоянно грызешь себя: а в ту ли я версию играю? Может быть надо еще покрутить, потюнить, поиграться с настройками?  В этом смысле консоли всегда выглядели как спасение: одна-единственная железяка, одинаковая у всех по всему миру, под которую разработчики идеально настроили свою игру. Ты играешь ровно в то и ровно так, как было задумано, и абсолютно уверен в этом. Полное отсутствие графических настроек (кроме, может быть, ползунка яркости и overscan) — секрет душевного спокойствия.  Каково же было мое разочарование влиться в консольный гейминг в самый неприятный переходный период: консоли нынешнего поколения оказались в странном лимбо между 4k и 60 fps. Они не могут и то и другое, поэтому впервые в жизни пользователь должен выбирать, как он хочет играть: медленно или некрасиво. И самое обидное, что бы ты ни выбрал, ты всегда будешь знать, что ты _гарантированно_ что-то упускаешь.  Два стула пришли откуда не ждали.",277
"Был у меня когда-то прекрасный телефон: Lumia 1520. Здоровый как лопата, OLED экран, Windows 8, интерфейс стильный, приложений нет, красота короче.  В карман в принципе помещался (я человек высокий, соответственно и карманы на одежде пришиваю большие), но был заметен, то есть определенный дискомфорт доставлял. Особенно когда с ним в кармане садишься или, упаси бог, на велосипеде едешь. Врезался, так сказать.  Прошло восемь лет и я купил себе лопату-айфон. Размеры практически такие же (160x80 mm), но в кармане лежит прекрасно, никакого дискомфорта, нигде не упирается и не отдавливает.  Что случилось? Я вырос? Мода на джинсы поменялась? Нет. Все очень просто: у Lumia углы были прямые, как логотип Виндоус, а у айФона — скругленные.  Помните, может, как Эппл растянула экран на весь айфон, но углы сквадрачивать отказалась и вместо этого обрезала пиксели по углам? Оказалось — мудрейшее решение, и телефон любого размера теперь в кармане не давит. Вот уж единство софта и железа, вот это я понимаю.  А мораль простая: иногда для успеха достаточно спилить углы.",278
"Вчера шутил шутки про размер телефона, а сегодня война. Очень плохо 🙁 Хуй войне, сил украинцам.",279
"Я никогда не интересовался историей и слова из учебников ничего для меня не значили. «Германия считала, что условия, продиктованные в Версале, были несправедливы юридически и невыполнимы экономически. Всё это создавало международную напряжённость» — не откликается вообще никак.  То же самое касалось описания жизни в СССР, диссидентов, занавеса, дефицита, компартии — ну да, умом я понимал, что это какие-то осложнения, но всерьез переживать не получалось. Всегда казалось, что люди там не по-настоящему плохо жили, а жили нормально, просто описывали это плохо. Нагнетали.  Ну и еще со школы прижился образ абсолютного зла и что оно легко узнаваемо. Ну очевидно же, что фашизм плохо? Поэтому было непонятно, как, скажем, Италия заключила мир с Германией, когда фашисты это чуть ли не скелеты в кожаных костюмах, а итальянцы такие добродушные ребята.  Ну вот теперь и мне выпала возможность ощутить на шкуре, как жилось в 39-м в Германии и в СССР одновременно. Как постепенно варить лягушку, чтобы она не заметила дефицита продуктов или запрета путешествовать. Почему люди вообще эмигрируют, когда начинается война — раз они живут в стране, разве они не все вместе дружат? Даже фраза про «Гитлер планировал блицкриг» очень некстати развиртуализировалась. И ебаные часы судного дня из Хранителей — вот уж точно без чего можно было бы обойтись. Мысль, что где-то сейчас новый Алан Мур пишет очередной великий антивоенный роман забавная, но греет слабо.  Сажать за плакат «Нет войне» — это было сложно объяснить, зато теперь легко в это поверить.   Советы более старших коллег про то, что в России нельзя планировать старость, мне всегда казались излишним алармизмом, а оказались пророческими.  Что такое цензура, отсутствие СМИ, политические заключенные — абстрактные слова из учебника, которые вдруг ожили и довольно бесцеремонно вторглись в повседневную реальность. Что зло сложно и не сразу очевидно, и может по чуть-чуть присутствовать в каждом, и что Мордор складывается из миллиона маленьких локально-оптимальных решений, и какие абсурдные кошмары могут происходить при безразлии большинства.  Как и зачем работает пропаганда — мои родители, например, до сих пор верят, что Россия поступает правильно и надо «вернуться домой, пока чего страшного не случилось». Они не могут объяснить, как именно она поступает, но уверены, что их опытом им понятно больше.  Удивляет, как люди, большую часть жизни прожившие в Союзе и выросшие на его культуре, где весь этот опыт перерабатывался, как они могут не увидеть совок, когда он стучится к ним в дверь топором? Все эти антивоенные фильмы, «лишь бы не было войны» — они их смотрели и что думали? Что это какая-то фигура речи?  Удивительна механика войны, которую я не понимал даже в школе. «Это считается военным преступлением», «запрещенное оружие» и так далее. Типа есть такие суровые правила, что страны их придерживаются, даже когда начинают буквально убивать. Но почему бы тогда не внести в них запрет на убийства? Зачем вообще разрешать воевать?  Еще не понимаю, когда гражданские жертвы считают отдельно от военных. Да, страшнее — гражданские значит это могли быть мы с вами. Но военные-то тоже люди, и когда они убивают друг друга — это же тоже не нормально?  Это все глупости, которые, наверное, примиряют меня с тем фактом, что войны пока никуда не уходят, и хоть это и самое страшное, что может быть, но даже весь мир в целом ничего не может с этим сделать.  А еще я наконец осознал, что, кажется, я теперь надолго и по-настоящему уехал, учитывая, сколько я с начала войны натвитил.  Извините за сумбурные мысли, понятно, рефлексия берлинского айтишника с дивана сейчас никому не нужна и никому не поможет. Но это, наверно, самое умное, что я могу сказать тут, а помощь переместилась в реальную плоскость — протестуйте, донатье, селите, опровергайте, свергайте, любите и поддерживайте друг друга. Комментов нет еще с прошлого поста, потому что я не успевал чистить ботов и хейт, но есть личка. За Украину!",280
"Че, как вы вообще? Держитесь?",281
"Решил я, значится, писю свою (пэка, то бишь) к продаже подготовить. Загружаюсь, а там AMD драйвер забыл настройки integer scaling. Не впервой, открыл, вернул. И цвета какие-то не такие. Тут пришлось побегать, потеребить всякие контролы (реально практичный способ — поменять какое-то значение, а потом вернуть как было), и в конце концов все стало как нужно. Почему? Хз.  Ладно, гуглю, значит, как загрузочную флешку создать. Майкрософт говорит: вот, скачай утилиту. Ну окей. Десять гигов говна вы, значит, в дистрибутив положили, сканер с попапом, проверяющие на Windows 11, тоже положили, рекламу Candy Crush положили, а на утилитку весмо 200 килобайт места не нашлось. Чтош.  Утилитка говорит: непонятная у тебя какая-то флешка. Открываю в Disk Management и реально какая-то странная: прямо посередине какой-то раздел на 200 мегабайт, неудаляемый. Очень неудобно. Пришлось брать мак и форматировать там. Винда не хотела, да.  Дальше утилитка пошла качать ISO-образ. Заняло это примерно час. Ну да, час, хотя на 50 Mbit должно было около 15 минут.  Дай, думаю, запущу Divinity 3 ^W^W Baldurs Gate 3 в последний раз, пока она качает. Запускаю — уровень грузится, моделек нет. Можно из этого сделать аргумент, что у разработчиков руки кривые, но для меня это все-таки ПК экспириенс в первую очередь: все настолько плохо организовано экосистемно, что никто не может делать нормальные приложения, независимо от количества денег или желания. Баг чинится только переустановкой драйверов, кстати.  Тут вспоминаю, что я же на эту винду лицензию покупал! И надо ее как-то отключить. Гуглю. Находится сайт майкрософт, на котором предлагают скачать тулзу с какого-то третьего сайта. Вы там нормальные вообще? Гуглю еще. Находится сайт не-майкрософт, зато предлагают встроенную команду. Аллилуйя!  Почему для этого нет кнопки? Что, люди компьютеры никогда не продают, что ли? Меня всегда это удивляло — административные интерфейсы винды никогда не были особо продуманными, зато всегда развесистыми. Но какие-то операции делаются только через командную строку. Казалось бы — раз у вас уже и так мегатонны говна, соберите тогда уж совсем все туда. Но нет.  Кстати, сайт предупреждает, что даже если вы деактивировали лицензию, ваш ключ все равно можно достать из реестра. Очень удобно, спасибо. Именно поэтому я и собрался все это форматировать нахер. Не первый год замужем.  Тем временем сделалась флешка. Перезагружаюсь. Грузится с флешки. Давай ставить винду, говорит. Давай! говорю.  Вот, говорит, какие у тебя разделы. И список в семь штук показывает. На два диска!  Интересно, думаю. Нажимаю на самый большой. Не, говорит. Не буду. Нажми, чтобы узнать, почему. Че бы сразу не показать? Нажимаю. И она выдает, внимание, фразу:  «На этот раздел установка Windows не представляется возможной. Это MBR раздел, а чтобы EFI, надо GPT».  Цитата не дословная (в тот момент автор этого поста все еще надеялся на скорое разрешение конфликта и не думал, что это перерастет в три часа унижения программиста компьютером), но смысл примерно такой.  И тут, возможно, если вы знаете, что такое MBR/EFI/GPT, вы удивитесь: все же понятно? Я не знал. И вот для того, кто не знает, это максимально идиотская формулировка, просто чистая тарабарщина. Знаете, как в фильмах про хакеров те несут полную ахинею, которая типа «звучит компьютерно»? Вот это в точности такая же ахинея. У вас же XYZ, но чтобы ABC, вам нужен SPQR. ЧТО, БЛЯДЬ? Я даже хрюкнул, насколько по-программистски это звучит.  Вообще, в моем детстве все было просто. Показываешь винде на диск, она говорит «окей» и ставится, потом показываешь на него же биосу, он говорить «окей» и грузится.  Потом пришли какие-то люди и решили, что все плохо и надо сделать лучше. И я уверен, сделали! (хотя я, как пользователь, этого не вижу) Но старый способ никуда не делся. Простое стало сложным ради того, чтобы кому-то стало маргинально лучше. Ну здорово, рад за всех.  1/2",282
"2/2  Окей, разделы. Разделы же можно удалять? Можно. Я в общем-то все равно их форматировать собирался. Удаляю все. О, теперь можно ставить! Куда подевались проблемы с MBR, интересно?  Ладно, жму. Еще сообщение. «Винда может создать один или несколько разделов, которые нужны для правильного функционирования системы». Ну епт.  Во-первых, что за неопределенность? Определитесь, создаст или не создаст. Что значит «может»? По настроению, что ли?  А во-вторых, эта информация мне нахер не нужна. Ну создаст, мне-то что? Пусть делает что нужно.  Короче, винда поставилась. Довольно быстро, кстати. Перезагружаюсь. «Давай ставить винду, говорит».  ВСМЫСЛИ?  Короче, ситуация патовая. Винды уже нет. Есть флешка. Винда с нее, в принципе, ставится (по ее словам). На оба диска. Но не загружается. Ни с одного. То самое ощущение из детства, когда еще не понял, сломал ты все непоправимо и лишился компа на ближайшие дни, или пока еще поправимо.  Бился я, бился, и пошел от бессилия в BIOS ковыряться.  Нашел там порядком интересных опций, названия которых включали слово «Windows» и даже специфичные версии (7, 8.1, 10). В BIOS-е! Как там, ребят, с потолка не капает? Абстракции не протекают?   И тут на глаза мне попались знакомые буквы. UEFI. Это как почти как EFI в том сообщении раньше! А значит, теоретически, может на что-то повлиять. Стояло «Legacy or UEFI», но можно выбрать просто «UEFI», без Legacy. Казалось бы, если с двумя типами загрузки он не может загрузиться, с чего бы ему грузиться только с одним из двух?  Но было бы большой ошибкой применить тут логику. Опытные пользователи компьюьтеров знают: компьютеры не устроены логически.  Конечно, выбор UEFI сработал и все починил. Ну как починил? В меню boot loaders у меня до сих пор порядка десяти пунктов с записями типа дисков (понятно), разделов (кажется??) и какого-то старого хлама типа Ubuntu и macOS, которых давным-давно нет. Интересно, на что они указывают?  И не говорите мне, что установщик про UEFI ничего не знает, поэтому и не показывает. Он явно куда-то в ту же таблицу смотрит: в нем были, например, опции типа «перезагрузиться в винду» и три варианта (видимо, ubuntu/macos он как-то отмел):  1. Windows 10 disk 5 2. Windows 10 disk 3 3. Windows 10 disk 3  Да, именно так. Сначала пять, потом два раза три. Где остальные цифры — хз. Что это все значит — я даже узнавать не хочу. А, и ни один из них не работал, конечно.  What have we learned, Palmer?  С компьютерами так тяжело не потому, что они что-то сложное делают. Проблема в том, что они не показывают то, что нужно, и показывают то, что не нужно. Бесполезная информация афишируется (сколько разделов нужно для функционирования винды), а критически важная, от которой на самом деле зависит поведение системы (boot loaders), спрятана до полной невидимости.  Покажите мне текущее состояние и дайте кнопки, чтобы его менять — я моментально все сделаю. Проблема в том, что кнопок нет, состояние не показывается, а все заклинания нужно гуглить. И в итоге ты психуешь на самых плевых задачах, которые должны занимать минуты, а занимают — часы. Поэтому у нас и нервы ни к черту.  Не покупайте ПК, короче. Играйте в приставки, прогайте на ноутах, смотрите кино на умном тв. И ни за что, ни под каким предлогом не интересуйтесь, что там под капотом. Вам это не понравится.",283
"Смотрел сейчас Random Jonathan Blow Moments 2, и там есть видео, где он копирует через проводник файл с моделью, модель подхватывается движком и перерисовывается в реальном времени, а винда к этому моменту только начинает рисовать диалог «Идет копирование». И потом еще секунды четыре рисует фейковый прогресс-бар. Хотя само копирование завершилось, наверное, за миллисекунду.  Тут же вспомнил видео с Essence OS, где у чувака ОС ставится за один кадр:  > Например, в инсталляторе он нажимает «Install» и тут же, в следующем кадре уже написано «Installation complete». Не секунду позже. Не полсекунды. Сразу же. Как будто ничего и не произошло.  Помогает, что дистрибутив весит 17 мегабайт всего. Мне тогда, помню, в комментариях разоблачители писали:  > А ничего и не произошло. Он использует следующий экран, где спрашивается логин, чтобы спрятать время на копирование 17 Mb самой ОС.  На что я отвечал:  > Ну вот в самом слабом макбучном SSD запись 4500 Mb/s. То есть на запись 17 Мб нужно 17/4500 = 0,004 секунды  И тут же вспомнил случай, когда у меня на каждый билд собирался и паковался ZIP на десяток мегов, а потом при запуске обратно распаковывался.  И я этого несколько месяцев не замечал. Тупо забыл про это. При том что я усердно выдрачивал время билда (не люблю ждать). Записать десятки мегабайт — не что-то, что способен заметить человеческий глаз.  Воистину, люди не представляют, насколько на самом деле быстры их компьютеры. Не знают, чего могли бы требовать, а программисты и рады не стараться.  Каждый раз, как вспоминаю эти примеры, удивляюсь, зачем условному Гредлу пара секунд на запуск. Не на сам билд, только на то, чтобы подготовиться к работе. Что он там даже чисто теоретически может такого делать? И ничего, вполне себе успешная билд-система. Джава-программисты даже нахваливают.",284
"Опрос, проведенный в интернете, показал, что 28% программистов не знают/не используют регэкспы. Еще 37% их ненавидят.  И тем не менее один из самых практичных советов, которые я могу дать начинающим — разберитесь в регэкспах. Это как плавать — научился один раз, а пользы потом на всю жизнь.  Да, к синтаксису есть вопросы (см. Egg Expressions, Verbal Expressions). Да, можно злоупотребить до write only. Да, HTML не распарсишь. Да, могут быть дырки в перформансе (это, кстати, один из поводов разобраться).  Но это все еще один из самых компактных языков, придуманных человечеством, и один из самых универсальных. Миллион разных задач решаются на ходу одной строчкой регэкспа.  Как разобрать такой вот URL на части?   ""https://example.com:8080/path?x=y#fragment""   Нуу, надо наверное библиотеку подключать. А времена сейчас сами знаете какие — закладки против русских атакуют самых незащищенных, то есть джаваскрипт-программистов.  Без библиотеки? Ну наверное как-то так:   let domain = s.indexOf(""://"", 0) + 3; let port = s.indexOf("":"", domain); let path = s.indexOf(""/"", domain); if (port > path)   port = -1; ...   Продолжить на три экрана. Порта может не быть, но двоеточие может встечаться позже, где-нибудь в path, но и path может не быть.  Ух, короче. Как представлю, сразу глаз дергается. Лучше уж пусть библиотека выебет меня в ж^W^W^W отформатирует мне диск C:, чем такое вручную писать.  Или... Или можно накидать регэксп! Вот я за пять минут сделал, не подглядывая в интернет:   #""([a-z]+)://([^/:?#]+)?(?::(\d+))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?""   Да, читается отвратительно. Но при желании можно оформить по-приличнее:   (re-pattern   (str     ""([a-z]+)""        ;; schema     ""://""     ""([^:/?#]*)?""     ;; domain     ""(?::(\\d+))?""    ;; port     ""(/[^?#]*)?""      ;; path     ""(?:\\?([^#]*))?"" ;; query     ""(?:#(.*))?""))    ;; fragment   Если я вас сейчас напугал и вы думаете «ну нафиг», то, во-первых, пример чуть экстремальный. Большинство реэкспов в жизни выглядят гораздо прозаичнее, типа .*\.(jpg|jpeg|png) или ([^@]+)@(.*). Что не делает их менее полезными!  А во-вторых этот страх и есть та самая причина, по которой в регэкспах нужно разобраться. Оно только выглядит непривычно, но если разобраться, станет очевидно, что тут только базовые операции: зведочка, плюсик, вопросик, и группы. Но сколько мощи!  И сколько геморроя это нам сняло! Ценой пяти минут работы мы сжали сотню строчек до одной (или сэкономили подключение целой библиотеки). Причем этот регэксп будет работать быстрее и надежнее любого алгоритма на indexOf, который вы напишете сами.  Но самое классное — это знание переносимо! Регэкспы есть везде: во всех языках, во всех редакторах, во многих консольных утилитах. Они слегка отличаются, но базовые функции примерно одни и те же и записываются одинаково. Что уже неплохо по сегодняшним временам. Настоящий learn once, use everywhere.  Я вижу регэкспы таким же обязательным инструментом, как сложение или там поиск в массиве. Без регэкспов как без рук.  Учите, короче, регэкспы. Потом спасибо скажете.",285
"Отдельный пост для тех, кому не понравился предыдущий. Не используйте регулярки, учите стандартную библиотеку, пользуйтесь только написанным другими кодом. Потому что он уж точно стандартный, уж точно без ошибок, точно делает что вам нужно и точно поддерживает все RFC до последней буквы. И все у вас будет хорошо",286
Канал опять закрывается на неопределенный срок. Я опять не вывожу. Извините,287
"Татарин Фронтенд пожаловался в твиттере:  «Бля, опять регулярку писать. Я как не умел, так и не умею. Но писать придётся.»  (Кстати, совет молодым: не делайте текущее увлечение частью ника. Заебет вас фронтенд через пару лет, захотите стать вебкам-моделью, а в нике «Фронтенд». И че?)  И вот что ему написали:  «А может не надо?» «А нет готовых либ под задачу?» «Может найдёшь готовую?» «У тебя теперь две проблемы» «Регулярку не пишут, регулярку гуглят» «Отдай аналитику своему, тебе-то нафига это»  Что общего у этих ответов? Это отмазки, чтобы НЕ делать работу. Никто из них не поинтересовался даже, что за задача, для кого. Нет, первый инстинкт: а может не работать?  Мне писали: лень лучшее качество программиста. Но должен же быть предел? Хоть что-то же надо уметь делать? Кому нужен программист, который только профессионально отмазывается от работы?  Мне писали: зачем плодить код, если есть готовые, хорошо оттестированные библиотеки. Ну вот есть на npm библиотека mask-string. Заменяет слова в строке на звездочки. mask(""arse"", ""Parser"") => ""P****r"". Что там внутри? Конечно, регулярка. Более того, mask(""."", ""..."") виснет нахрен, потому что абстракции протекли: хотел заменить подстроку, а в итоге пришлось разбираться с регулярками все равно.  Библиотеки — не волшебная мазь, сделанная в башне из слоновой кости. Их пишут такие же программисты, как и вы. Может быть, она сделана хорошо и качественно. Может быть вовсе нет. Чтобы понять, надо как раз разбираться. Сам факт библиотеки не гарантирует вообще ничего.  Мне писали: у регулярок плохая репутация. Но это не повод не использовать их вообще нигде. Не используйте там, где они не подходят. Используйте там, где подходят. Я же не XML-парсер на них предлагаю писать. Задачу узнайте сначала!  Мне писали: регулярки вызывают критические простои сервисов. А что не вызывает? Что угодно вызывает: языки вызывают, библиотеки вызывают, процессы вызывают, сети вызывают, конфиги вызывают, логи вызывают. И ничего, штопают и работают дальше.  Так что, зачем напрягаться? Недавно узкий круг лиц поднялся в айти с лозунгом «как меньше работать и больше получать». Понятно, почему эта позиция нравится начинающим. Более того, на текущем рынке действительно можно до определенного предела эксплуатировать работодателя.  Но глобально это путь в никуда — и для вас, и для рынка. Просидите вы десять лет в своем уютном банке, плюя в потолок и собирая зарплату. Рынок изменится, или вы больше денег захотите, или релокейт, а вы уже никому не нужны, потому что привыкли не работать.  Поэтому я агитирую за противоположную точку зрения. Разбираться в чем-то — не зашкварно. Уметь что-то лучше, чем не уметь. Расширять кругозор, узнавать новое — чистое удовольствие. Если вы устроились программистом, то программировать — ваша работа. Не все, что вам нужно, будет написано в библиотеках. Библиотеки тоже кому-то надо писать. Чем больше вы умеете, тем ценнее как специалист.  Да, трудно конкурировать с «зачем что-то делать, если можно ничего не делать». Но лично для меня это не работает: во-первых мне скучно, во-вторых стыдно, в-третьих мне спокойнее, когда на меня есть спрос, в-четвертых я люблю хороший код, часто его приходится писать самому, ну и в-пятых есть о чем поговорить с девочками: в конце концов, вы читаете это в моем канале, а не я в вашем.  P.S. Задача из твита: определить соответствие одному из 4-х шаблонов. Шаблоны a + b * c, a * b - c, a / b * c, приходит например 100 + 200 * 300. Надо определить шаблон.  Если ваш первый инстинкт — «не используй регулярки», даже до того, как узнали задачу — надеюсь, вам теперь стыдно. ВСЕГДА узнавайте задачу.  Если вам все еще не стыдно, вот мое решение: (\d+)\s*([+\-*/])\s*(\d+)\s*([+\-*/])\s*(\d+). Покажите мне, как это решить понятнее без регулярок, и я, может быть, поменяю свое мнение. Мало ли?  Но пост в первую очередь все-таки не про регулярки. Пост про рабочую этику. И про то, что инструменты надо выбирать соразмерно задаче. Не забывайте об этом.",288
"На Эпл-ТВ скоро выходит «Доисторическая планета» — мокьюментари про, конечно, динозавров. А про кого еще, не про папоротник с моллюсками же.  «Документалки» про несуществующих животных в принципе вещь не новая. Я помню еще в детстве смотрел по телику аналогичный фильм и дико кайфовал. Графика явно подтянулось, ожидаемо.  Но документальный формат — это в первую очередь формат. Сложно представить фильм про животных без типичных условностей вроде съемок из кустов, неидеальных кадров, нестыкующихся сцен и супер длиннофокусной оптики. Очень мило смотреть, как все эти условности усердно воспроизводятся в на 100% постановочном шоу.  Но давайте продолжим этот вектор дальше. Мое предсказание: рано или поздно документалки про существующих животных тоже начнут рисовать на компьютере. Дешевле, проще, пространства для манипуляции больше. Про тигров, например, можно хоть сейчас делать — они уже хорошо обкатаны и на двух Маугли,и на Жизни Пи.",289
"Про важность формы, а не содержания.  С одной стороны, Кложа работает на JVM и не делает ничего, что не могла бы JVM.  С другой, Джава супер-статический язык: надо гредл запускать, рестартовать, ждать каждый раз. А Кложа — динамический до мозга костей.  Что же происходит, когда пишешь в Кложе-репле (+ 1 2)? Очень много всего! Расчехляется компилятор, генерится байт-код, загружается, исполняется и выбрасывается.  Приносит ли Кложа что-то принципиально невозможное в Джава-экосистему? Нет. Все это есть и в Джаве, но там это надо настраивать и вызывать. А тут оно всегда под рукой и интегрировано прям в процесс написания кода. Именно то, что вся тяжелая машинерия происходит незаметно для программиста, и является той самой добавленной стоимостью. И это качественно другой опыт!  Так что не забывайте удобно упаковывать то, что делаете. От этого может случиться не только количественный, но и качественный переход.",290
"Еще к вопросу о важности упаковки. Несколько контр-примеров.  У Clojure получилось отлично, а вот у него последователя ClojureScript (Clojure to JS compiler) уже нет. Компиляцию надо настраивать (фи), она долгая, неудобная и лайв релоад умеет только при определенных условиях. РЕПЛ тоже не задался.  Хотя казалось бы — JS язык очень динамический, куда динамичнее Java, а вот построенный поверх него диалект Clojure оказался динамическим менее.  Про то, как фронтендеры взяли идеально динамическую среду разработки (JS) и сделали из нее унылую «профессиональную» разработку с Webpack-ом, который надо неделю настраивать и который компиляет JS в JS (да) по несколько минут, я уже раньше писал в канале.  И вот недавно обсуждали в VS Code. Знакомый думал, что это такой Емакс, только на JS, то есть — бомба в квадрате. Каково же было его удивление, когда он узнал, как сложно, долго и нединамично разрабатываются расширения под «современный емакс». Что нельзя открыть условный «init.js» и похакать свой собственный редактор. Очень грустил, удивлялся, как они смогли «вырвать поражение из цепких лап победы».  Так что если вам кажется, что есть все предпосылки, то получится хорошо, то это вообще не факт. Кажется, чаще всего хорошо наоборот, не получается. Так что не забудьте не только выбрать правильную платформу, но еще и двигаться в правильном направлении.",291
"А расскажите мне, в чем проблема сделать динамический язык, близкий к железу?  С одной стороны чтобы можно было без проблем докидывать новый код: скомпилял функцию, добавил/заменил существующую без рестарта программы.  И одновременно чтобы можно было байтоебством заниматься: объекты плотно упаковывать, value типы там, structure of arrays.  Насколько я понимаю, все «быстрые» языки выбирают трейдофф перформанса за счет медленной компиляции, closed world assumption и whole program optimization. «Программист подождет».  Допустим это дает ну там 30% производительности, и допустим я готов этим пожертвовать, но чтобы компиляция была моментальная и модульная.   Возможно? Или есть ли какое-то принципиальное ограничение? Или никто не пробовал просто? А если пробовал, почему не получилось? Только давайте конкретные причины.",292
"Посрались вчера немножко под постом, является ли бан в личных соцсетях ограничением свободы слова.  Вообще свобода слова имеет вполне конкретное значение: государство не может преследовать тебя за твое мнение. Только за действия.  Некоторые странные люди, впрочем, поступают интересно: они берут этот существующий термин, придумывают ему другое значение и начинают до всех доебываться, что старый термин не соответствует их новому придуманному смыслу. Люди — удивительные создания.  Так вот, в данном случае они решили, что если я кого-то забанил, я тем самым ограничил его свободу слова. Хотя я не государство и никому его мнение выражать не запрещал.  Мне говорили, что определение про государство некрасивое, потому что несимметричное и у государства там выделенная роль. Можете расширить его на кого угодно, но поскольку ни у кого нет права преследовать, кроме государства, получится то же самое.  Мне говорили, что мол свобода слова это свобода быть услышанным. Это очевидно полный бред — по такой схеме, любой бомж с теорией заговора может присесть вам на уши и вы обязаны будете слушать его всю жизнь, пока ему самому не надоест. Это полный бред. Мне страшно представить человека, который на самом деле хотел бы этого.  Мне говорили, что моя страница это публичная площадка и мне не принадлежит. Это неправда, мне принадлежит внимание читателей, которых я тут собрал. Если бы это было не так, забаненный человек мог бы спокойно выражать свое мнение на своей собственной странице, но он этого почему-то не делает.  Короче, выражайте мнение кто сколько хочет, но я вас слушать не обязан. А вы, в свою очередь, меня. Такая вот свобода слова. Красивая, симметричная, простая и понятная.",293
"Я тут поиграл в Старый круг и хочу про него рассказать. Будет пять частей, потому что игра не маленькая. Готовьтесь.  Часть 1 из 5. Что понравилось  Во-первых, кажется, соулсы я себе немного неправильно представлял. Я думал это такое испытание на управление гневом и мазохизм. Типа, садишься и умираешь от босса три дня подряд, и твоя задача как игрока научиться видеть в этом кайф.  Оказалось — нет, вовсе нет. Это в целом обычная такая экшн эрпэгэ – бегаешь, мочишь монстров, качаешься, собираешь лут, выбираешь костюмчики и пушки, исследуешь карту. 90% времени — именно это, а не пытка сложностью.  Во-вторых, геймплей. Он тут есть. Я вообще плохо воспринимаю игры, в которых не во что играть: не нужно принимать решений или от них ничего не зависит. Для меня игра это задача: вот проблема, вот инструменты, решай. И ты можешь решить правильно, а можешь и провалиться. Тогда интересно. Для всего остального есть кино, и в сюжетном плане играм до него как до Луны пешком.   И вот тут этот самый геймплей есть. Монстров убивать сложно, то есть — легко провалиться, то есть — от твоих решений действительно что-то зависит, надо включать голову, то есть — есть во что играть!  Причем монстры разные, в разных конфигурациях, ведут себя по-разному, подход нужен разный. Каждая игровая ситуация как пазл, который с тобой коммуницирует: показывает тебе входные данные, которые еще надо расшифровать, попробовать, как оно работает, что бывает, и в конечном итоге найти к нему подход.  К чести игры, на пятидесятом часу она все еще не успела надоесть или даже начать повторяться.  Про сложность. Удивительно, но она не сложная! Включаешь и играешь, все проходится, прогресс постоянный, наслаждаешься сменой декораций, следишь за сюжетом, как и в любой другой игре. Никакого особенного опыта не нужно. Ни в какие соулсы я до этого никогда не играл.  То есть она может быть более сложная, если сравнивать с условной диаблой/убисофтом/гта. Но это нормальная, средняя сложность. И эта сложность essential, в ее разнообразии и преодолении и состоит процесс игры. Если ее убрать, получится интерактивное кино, в котором мозг не нужно включать вообще.  В этом смысле нужен ли ей изи режим — конечно же нет. Но, еще раз повторю, она не сложная. Это просто другие игры совсем забили на игроков и ничего от них уже не ждут.  Отдельно я, кстати, кайфую, что тут сто процентов геймплея и ноль процентов диалогов/сюжета. В лучшем случае по обстановке понятно, что произошло. Игры обычно пишут довольно плохо, прям до фейспалма, так что здорово, что тут не стали делать сюжет «для галочки», а сосредоточились на том, что у них хорошо получается — геймплее.  Ну и в-третьих — дизайн. Охуенный. Биомы — шикарные, сетписы — отвал башки, инвайроментал сторителлинг на всю катушку, монстры по-хорошему ебанутые, фантазия прямо из дурдома (мой фаворит — орлы, у которых в каждой лапе по здоровому ножу!). Драки со шкафами размером с дом — визитная карточка серии — впечатляют каждый раз, что уж там. Драконы хорошие и производят ровно то впечатление, какое должны производить драконы — еб твою мать! Щас экран треснет! Ну где такое еще бывает?  При этом акт-дирекшн тут проделывает довольно тонкую штуку. Эпичность вообще вещь занудная, если за ней ничего не стоит, а просто хочется «быстрее, выше, сильнее». Тут же такого нет совсем, потому что гигантские размеры выполняют конкретную художественную задачу: показать разбалансированный, тревожный, неспокойный мир. Мир, где вещи не тех размеров, которых они обычно должны быть, потому что «что-то пошло не так» и эта неправильность прекрасно считывается и работает.  Я даже на цветовую гамму бочку гнать не хочу, хотя обычно люблю, когда в играх цвет все-таки используется. Но золотой с серым классическое сочетание и работает на атмосферу, так что простим.",294
"Часть 2 из 5. Теперь о печальном  Я всецело рекомендую игру, без всяких сомнений, но это не значит что в ней все идеально.  Начнем с важного. Об этом не пишут, но ваш главный противник в Ринге пенсионеров — камера и управление. С камерой есть два стула — или ты крутишь сам (и тогда тупо промахиваешься в 80% случаев), или лочишь ее на противника, и тогда начинается дискотека. Управление ведь относительно текущего ракурса, противник скачет вокруг тебя с адской скоростью, а иногда и вовсе над тобой взлетает, в итоге ты жмешь одно, а бежишь практически в рандомную сторону.  Второй момент про управление — полная его непредсказуемость. Знаете, сколько раз я подходил к ничего не подозревающему противнику со спины, жал «смертельный удар в спину» и вместо него получал «аккуратное поглаживание мечом»? Десятки! Сколько раз получал из-за этой ошибки пизды? Ну каждый первый. Почему это работает через раз — хз.  Другой нерешенный вопрос — просто по противнику попасть. Я понимаю когда ты неправильно там оценил расстояние. Или враг отскочил. Но нет ведь: вот он, стоит, ждет, вот я, жму «тяжелый удар», мой герой замахивается, замахивается, замахивается (да, это долго), наконец разрождается ударом, который приходится... в пяти сантиметрах сбоку! И наносит ровно ноль урона. Надо ли говорить, что после этого тебе вломят с вероятностью выше ста процентов? Потому что после такого унизительного удара меч поднимается еще секунд сто.  В итоге бои выглядят не как высокотехничная схватка двух профессионалов, а как бой слепых инвалидов сломанными костылями: нелепо и унизительно. Периодически еще кто-нибудь в пропасть падает, потому что камера смотрела в другую сторону.  Вот это противоречие — с одной стороны игра вроде как просит тебя четко и технично действовать в схватке, а с другой — делает все, чтобы этому помешать, оно немножко убивает впечатление, конечно. Может быть, в будущих играх пофиксят. Man can only dream.  Следующая претензия — мазохизм. Я был все-таки не донца честен, когда говорил, что его тут нет. К сожалению, есть. Ситуация, когда ты встречаешь сложного босса, тебе интересно с ним разобраться, изучить, попробовать разные подходы, ну вы поняли, собственно, поиграть в игру. Но чтобы просто начать бой, тебе нужно сначала бежать до него три минуты и убить пяток врагов по пути. ЗАЧЕМ??? Это какое-то упражнение на смирение и буддизм, честное слово — тратить три минуты впустую каждый раз, чтобы тебя за 30 секунд размотали и ты мог попробовать снова. Такое, к сожалению, встречается, хотя, мне говорили, в старых играх было еще хуже.  К мазохизму же относятся jump scares. Это когда ты ничего не подозреваешь, а на тебя из-за угла выпрыгивает бабайка и убивает с одного удара. Или с неба. Или со спины. Или просто, блять, из воздуха материализуется. И снова пять минут бежать до того же самого места. Гыгыгы, шутка уровня «выдерну компьютер из розетки, пока ты играешь». Зачем? Because fuck you, that’s why. Монстры, сносящие 100% здоровья одним ударом — сюда же. Я до сих пор хз, что с такими делать.  Ну и еще про тренировку терпимости и поиск внутреннего спокойствия. Каждый раз, когда ты приходишь к купцу что-то купить, он читает тебе лекцию. Иногда это две фразы, иногда — четыре. ЧЕТЫРЕ РАЗА НАДО НАЖАТЬ ПРОПУСТИТЬ чтобы просто попасть в меню «купи-продай». ЗА? ЧЕМ?  Ну и эта беготня постоянная, когда уровень можно поднять в одном месте, руны на него — в другом, материалы разбросаны по нескольким купцам, одни из которых только продают, а другие покупают. Просто — зачем? В чем глубокое дизайнерское предназначение этой бюрократии? Чтобы ты заебался?  Справедливости ради — и да, я воюю за обе стороны сегодня — спасибо техническому прогрессу, загрузка после смерти занимает очень разумное время. Порядка трех секунд, плюс пять-семь на всякие затемнения. Это ОЧЕНЬ по-божески. Не знаю, что бы я делал, если бы загрузки были как в Ведьмаке, по паре минут. Давно бы диск в блендере смолол бы уже, наверное. Но — терпимо.",295
"Часть 3 из 5. Интерфейс  Это полная капитуляция, ребят. Начну с банального — нельзя сравнить статы того, что на тебе сейчас, с тем, что ты покупаешь в магазине. Фотай, блин, на телефон, и сравнивай потом с фоткой. Да, блин, серьезно.  Вызов коня обычно делается одной кнопкой, но если коня убили, появляется менюшка с двумя вариантами. Все управление перестает работать, пока не выберешь «да, блять, если я нажал хочу коня, я наверное хочу ебаного коня, ебись он конем». И нет, бой не останавливается, пока ты тупишь. Надо ли говорить, что в пылу битвы этот нежданчик это почти верная смерть?  Кстати, паузы тоже нет. Да, в 100% сингловой игре нельзя поставить на паузу и пойти открыть курьеру дверь или снять молоко с плиты. Никакие меню не ставят игру на паузу. Отвлекся — тебя выебут, высушат и еще раз выебут. А как вы хотели? Это дарк соулс.  А еще сообщения. Что-то подняли? Сообщение загородит пол-экрана И НЕ ИСЧЕЗНЕТ САМО. Произошло какое-то событие? Маленькая надпись появится с краю экрана и ПОЛНОСТЬЮ ЗАБЛОКИРУЕТ ВСЕ КНОПКИ пока ты не догадаешься, почему все перестало работать.  Нажал кнопку действия и слегка повернул джойстик в процессе? Посморти нашу пятнадцатисекундную анимацию указывания пальцем, замыкания рук в кольцо или покачивания головы. Как раз пока дракон жарит тебя на гриле без растительного масла.  Другая вещь, которую я никогда не пойму, это зачем разрешать заведомо разрушительные действия? Например, зачем разрешать падать с обрыва там, где очевидно предусмотрена смерть? Какую геймлейную функцию это выполняет? Кроме лулзов на ютубе, конечно.  Или продавать уникальные предметы? Ты можешь носить с собой сколько угодно оружия/брони, но также ее можно и продать, и тогда... ты никогда не увидишь ее снова. А процентов 70% предметов в игре уникальные. Я, пока не разобрался, что происходит, продавал все ненужное, и мне даже в голову не приходило, что оно может мне понадобиться. И когда дошел до респеков и решил попробовать другие билды, очень сильно об этом пожалел. Самое обидное — даже хорошие предметы продаются за копейки.  Так что интерфейс — третий ваш важный противник, наряду с камерой и управлением.  Кстати, я там написал, что игра на 100% сингловая. Это, конечно, так, но к сожалению (и огромному недоумению) играется она в онлайне. То есть буквально ты должен быть подключен к серверу. Зачем? Никто не знает.  Точнее, знают, конечно: чтобы видеть, что другие игроки пишут на заборах. Try finger but hole, в таком духе. Фишка соулсов. Атмосферу убивает ппц, но убирать ее боятся — как же, всегда так было, и вдруг менять?  Самые говнюки пишут «прыгай тут» там, где точно разобъешься, «секретная стена» там, где секрета нет, или оставляют сообщение под лестницей, чтобы ты не мог на нее взобраться (читать и забираться повешены на одну кнопку). Ха-ха-ха, I’d tell you a joke, but you wouldn’t get it.  Еще одна инфарктно-генеративная функция — показать куда побежали другие игроки. Игра время от времени рендерит их белыми светящимися силуэтами, и это похлеще любого фильма ужасов. Сидишь себе, никого не трогаешь, тут бац — из-за угла чел с мечом под два метра и на тебя бежит. Пока меняешь нижнее белье, соображаешь, что это силуэт другого игрока, наверное, был, и повлиять на тебя он никак не мог. Но понимание приходит уже потом, после кондратия. Какая от этого польза, спросите вы? Этого уже точно никто не знает.  Кстати, есть еще настоящие враги, которые выглядят очень похоже. Just because.  Но самая жопа онлайна в том, что от него тебя может отключить. Знаете, что в таком случае происходит? Тебя выкидывает молча в главное меню. Независимо от прогресса. Независимо от того, что ты делал, как далеко зашел, как давно сохранялся, в бою или не в бою. Просто где-то потерялся пакет на подгрузу надписей на заборе, который не очень-то был и нужен, а ты из-за этого иди нахуй. Because fuck you, that’s why. Интернет-соединение тоже твой противник. А как ты хотел? Так выглядит в 2022-м сингл плеер экспириенс.",296
"Часть 4. Геймплей  Ладно, давайте теперь и на геймплей пожалуюсь. Играть в Состарившийся круг без вики и ютуба — нереально. Все так запутано, что даже шансов не оставляет разобраться.  Например, нашел ты заклинание. Как его колдовать? Нужно пойти к костру, конечно. Добавить его в свою книгу. Туда же добавляются другие вещи, но они добавляются просто из меню, ПОТОМУ ЧТО. Но заклинание не колдуется. Почему? Надо, оказывается, взять специальный предмет в руку. Берешь посох. Все еще не колдуется. Это потому что есть два вида заклинаний, абсолютно одинаковых, но на одни нужен посох, а на другие — знак. Потом еще надо по статам пройти, но это хотя бы в интерфейсе показывается. И чтобы FP хватило, что вообще не факт и сиди-гадай дальше, почему ты все сделал, а оно до сих пор серое.  То же самое с великими рунами. Убил босса — пойди к рандомной тетке, она тебя похвалит, потом найди башню в совсем другом конце мира, активируй, добавь через меню, найди айтем, используй. Поздравляю, но шансов, что вы до этого сами догадались — ноль. Я видел как на форумах люди спорили из-за формулировки, как именно работают руны, потому что они и подписаны еще криво.  Или лифт — чтобы его активировать, тебе нужно совершенно случайно найти ДВА! предмета в двух совершенно случайных концах карты.  Самая жопа — что легко пропустить не только опциональные, но и критически важные предметы. Я как-то смотрел случайное видео совсем по-другому поводу и не мог понять, почему у них на костре больше возможностей, чем у меня. Оказалось — я пропустил один очень незаметный подвал, даже после того, как зачистил лагерь. Это буквально неприметная дырка в углу, никак иначе не выделенная и не обозначенная.  Да что там, я даже супербоссов, оказывается, случайно пропускал. Хотя, казалось бы, уж на них-то должны указывать все стрелки. Но нет, пришлось гуглить.  Формулировки в игре тоже от бога. «Этот предмет добавляет новые свойства». Какие, где, что делают — не написано. «Описание предмета» в качестве описания, буквально.  О том, что какие-то предметы одежды ОКАЗЫВАЕТСЯ меняют характеристики, я тоже узнал из случайного видео — просто потому, что это нигде не написано. Можно было заметить, что цифра в меню меняет цвет, но она там, куда ты обычно не смотришь, потому что большинство предметов характеристики таки не меняет.  Ладно, теперь про саму игру. Игра очень длинная. Минимум 50 часов, я целюсь, кажется, примерно на 100, потому что люблю to fuck around. И ее можно проходить по-разному: через силу, через ловкость, через магию (два вида, напоминаю), лучником, самураем. Короче много вариантов.  В самом начале тебе предлагают выбрать класс, который определит начальный эквип и распределение статов. И с этим классом ты более-менее застрял на всю игру. Оружие тоже особо не попробуешь — ты вкладываешься в апгрейд чего-то, а потом находишь может быть пушку получше, но ресурсов на ее апгрейд уже нет, или она по статам не подходит. Если ты методично зачищал каждое подземелье, реально проапгрейдить, может, три-четыре пушки за первые 50 часов. Так себе разнообразие, да?  Статы технически можно перераспределить, но ограниченное число раз (пять?) и далеко не сразу. Часу где-то на тридцатом-сороковом. То есть 40 часов, просто чтобы попробовать и понять, что ошибся с классом и не можешь никуда переключиться. В. ЧЕМ. ПРИКОЛ?  Я конечно понимаю, что это игра для людей, у которых много свободного времени, но не настолько же? Очень жаль, что например я никогда не смогу вкусить эту игру в полной мере, попробовать хотя бы один другой билд, чтобы оценить вариативность и дизайн под разные стили прохождения. Ну нет у меня еще сотни часов, чтобы посмотреть на все то же самое еще раз.",297
"Часть 5 из 5. Вердикт  Ладно, давайте закругляться, а то телеграм не выдержит. Рекомендую ли я Темные души 4? На сто процентов. Дизайн, геймплей, атмосфера — все на высоте. Это уникальный опыт, который нужно обязательно попробовать.  К сожалению, хоть плюсы и перевешивают минусы, минусы тут тоже есть. Они не отменяют моего восторга, но и притворяться, что их нет, глупо. Я бы, наверное, гораздо сильнее кайфанул, если бы From Software были посмелее в плане менять/пробовать новое/чинить то, что явно не работает. Жду их следующей игры, уверен, она будет еще лучше.  Но больше всего я мечтаю, чтобы кто-то взял эту формулу, трезво на нее взглянул и сделал бы «Темные души, только нормальные». Оставил бы то, что работает, и убрал то, что сломано.  В каком-то смысле для меня такая игра это Dead Cells. Она тоже очень сложная, но почти каждый элемент работает на 100%: управление не бесит, все факапы «честные» и виноват только ты сам, огромная вариативность, можно попробовать весь контент за разумное время, а не только десять процентов.  Но пока этого не случилось, играйте в Elden Ring. Оно того стоит.",298
"Когда-то прочитал интересное объяснение, почему программисты так любят переписывать все с нуля. Или начинать новые проекты, не закончив старые.  Дело в том, что когда ты думаешь «вот бы сделать то же самое, но с чистого листа», ты сравниваешь существующую сейчас систему, со всеми ее проблемами, шероховатостями, компромиссами, с системой несуществующей.  Понятно, что у несуществующей будет преимущество: она идеальна. Ты представляешь только ее плюсы, а минусы никто специально не закладывает. Минусы получаются от столкновения с реальностью.  Это очень красивое объяснение, и очень похоже на правду. Полезно держать его в голове постоянно.  Внимательный читатель вроде тебя может заметить, что я и сам люблю многие вещи делать с нуля. У меня свой шрифт, своя цветовая схема, свой плагин для Кложи, своя раскладка, своя БД, своя i18n библиотека, свои скрипты для сборки, свой реакт-фреймворк и скоро будет свой UI-фреймворк. Короче, я только и делаю, что пишу все с нуля.  Нет ли тут противоречия? Мне кажется нет. У меня простое правило: если я что-то делаю, у меня всегда должен быть максимально конкретный ответ на вопрос, чем это будет отличаться от существующего.  Давайте прям по пунктам, чтобы были конкретные примеры:  - Fira Code: лигатуры + Fira Mono в основе - Цветовая схема Alabaster: не подсвечивать все - Плагин для Clojure: инлайн-eval, корректная подсветка, отсутствие paredit, nREPL - Раскладка: пунктуация в Ру/En на одних и тех же местах - Скрипты для сборки: скорость сборки  И так далее. Это единственный рецепт, который я знаю от Not Invented Here синдрома. Всегда знать, что именно ты делаешь и в чем конкретно твой вклад.  Мне всегда было жалко ребят, которые садились с мыслью «сейчас мы напишем новый Notion» или там «свою систему авторизации», а на вопрос «чем это будет отличаться» не могли ничего внятного ответить. Ну как же, это же мы, у нас получится по-другому, вдруг будет лучше. Скорее всего, в такой ситуации никаких реальных предпосылок к тому, что получится лучше, не было и нет. Если бы они были, то мы бы о них точно услышали.  Так что пишите и изобретайте колесо сколько угодно — я только за! Но всегда умейте отвечать на вопрос, чем оно отличается от уже существующих.",299
"Всегда удивляют высказывания вроде «напишу утром, вдруг он уже спит». Коммуникация же асинхронная, какая разница?  Рассудить можно очень просто. Можешь ли ты в момент отправки знать, где находится человек, чем занят, может ли прочитать, удобно ли отвечать? Очевидно, нет.  Поэтому смысл гадать? Отвечает за получение сообщений тот, кто их получает. Удобно — ответит. Неудобно — не ответит. Спит? Уберет телефон. На митинге? Отключит нотификации.  Как вообще может быть иначе?  Кстати, ждать, что вам моментально ответят, тоже не нужно. По той же причине.",300
"Главное качество программиста? Понимание, где провести границу. Какие проблемы решить, а какие оставить пользователю вашей библиотеки/продукта. Да, у пользователей тоже есть руки и они умеют ими пользоваться.  Давайте с примером. Плагины для Clojure REPL, например, могут стартовать REPL за тебя. Но зачем? Я могу это сделать и сам, и я гораздо лучше сделаю это сам.  Плагины же начинают выкатывать требования: файл положи туда, проекты только одного типа, фичи не поддерживаем и т.п.  Причем плагину это не нужно — все, что ему нужно, это номер порта. Мне это не нужно — как я уже сказал, никто лучше меня проект не запустит. Так что это фича ни для кого, а мешается всем.  Почему? Потому что она решена не там, где нужно. Кто-то позаботился о том, что не является его проблемой.  То же самое в каких-нибудь библиотеках. Вроде по логике должна принимать мапу с конфигом на вход — зашибись. Но вместо этого принимает путь до файла, из которого она этот конфиг считает. Чувак, если мне нужно из файла считать, а сам его считаю, распаршу и тебе отдам. Ровно как и из сети, и из памяти, и из пользовательского ввода на форме.  Дайте мне инструменты, а я их скомбинирую. И не надо помогать, все равно вы все неправильно сделаете, а страдать будем вместе. Самый бесячий софт — тот, который пытается помогать там, где это не нужно.",301
"Коллега из кремниевого бангалора написал в твиттере:   > Видит бог я не хотел этого делать, но я расчехлил свой отчёт по коммитам по всем сотрудникам. Трое прямо крепко чиллят. Очень крепко.  И какова же была реакция общественности? Общественность пришла в УЖАС.  > Важно же не сколько количество сколько качество  > А сколько коммитов в день норма?  > Нууу по количеству коммитов судить не стоит  > Ну чиллят и чиллят, тебе то что, больше всех надо людей заебать?  > Может ты сначала процессы наладишь в команде, а потом будешь вопросы задавать?  > Так основная метрика не коммиты, а задачи  > Команда должна хотеть сделать продукт и иметь ограничения по бюджету и времени. А за комитами подглядывать - дело последнее.  > Просмотр комитов и оргвыводы из этого - это, в некотором роде, акция устрашения  > Ну и норм. Нафига им жопу рвать-то собсено ?  > может у них доступа в джиру не было, не могли задачу в работу взять  > Щас эти трое напишут скрипт с автокоммитами и статистика подправится  > Даёшь имитирование бурной деятельности!  > Xsolla 2.0?  > Могу делать 500 коммитов в день. Сколько заплатите?  > насрать, пока команда тащит. А когда не тащит — сама разберётся  > Если бы Маяковскому платили за строчки кода...  > Вот еблан иксольный. Созвоны с контрагентами не в счёт. Чтение и написание документации не в счёт. Ручное тестирование не в счёт. Ожидание доступов не в счёт.  Ожидание решения начальства не в счёт. Нагрузочное тестирование не в счёт. Только количество строчек считается.  Очень поучительное чтение, короче. Как будто люди боятся объективно посмотреть на себя в зеркало. И мысль о том, что их заметят, объективно оценят и спросят с них результат вызывает у них ужас.  На всякий случай, речь была не о «уволить за отсутствие коммитов». А то вы мне тут сейчас накомментируте. Речь была про «использовать отчет, чтобы помочь найти проблемные ситуации и дальше уже разбираться». Некоторые ситуации могут вполне себе иметь объяснение — этого тоже никто не отрицал.  Но если ты инженер, по-моему довольно честно предположить, что у тебя должен быть какой-то результат. Может быть не каждый день, иногда даже не раз в неделю. Может быть, это даже не код. Но результат должен быть! А как иначе-то?  А если результата нет, то наверное и зарплаты ты не заслуживаешь. Ну или «зарплата пропорциональна результату». А не цвету глаз, количеству митингов или там личным качествам. Господи, такая простая мысль, даже формулировать ее стыдно.  И тем не менее, люди находят мысль «зарплата за результат» вопиющей. По их мнению, видимо, хорошие трудовые отношения — это приятная атмосфера в команде и чувство безопасности, а не продукт. Работодатель должен тебе все, а ты не должен ему ничего. Работа опционально, по настронию. Вот до чего доводят эти ваши софт скиллы!  UPD: Уточняю для тех, кто плохо читает. Речь не о том, что «количество коммитов — крайняя и единственная метрика» и по ней что-то определяется. Это вообще не метрика, перечитайте.  Речь о том, что в большой компании есть люди, которые вообще ничего не делают и получают зарплату. Не коммиты не делают, а вообще ничего.  Если такие люди есть, их можно как-то обнаружить, так? Например, они наверное ничего не коммитят. Тогда можно взять всех людей, кто ничего не коммитил, и с каждым разобраться, бездельник он или коммитов не было, потому что он делал что-то более важное.  Почему плохо попытаться найти бездельников и исправить ситуацию? Никто не предлагает привязывать зп к коммитам, на всякий случай, еще раз для тупых.",302
"Некто protopop поделился в Твиттере, что Эпл собирается удалить его приложение из апстора, потому что он не обновлял его два года.  ДВА ГОДА!  Я телефоны обновляю реже! То есть покупаешь телефон, гоняешь с ним, у него даже батарейка не сильно просела, а приложения уже протухли. Ну, по версии Эпла.  Получается, к каждому приложению должен быть приставлен как минимум один разработчик, чья работа состоит в том, чтобы всегда быть в курсе последних изменений, последних нововведений, покупать новые макбуки, ставить на них последние макоси, качать последний икскод, обновлять библиотеки, собирать и выкладывать.  Если думаете что это тривиальная задача, то вот кейс:  > Boss wants to change our iOS game icon. Changing icon requires a new build. A new build requires iPhone X support. iPhone X build target requires Xcode 9. Xcode 9 requires macOS 10.12. OS update breaks old Unity3D. Upgrading Unity breaks build.  Нужно бежать, чтобы оставаться на месте. Индустрия молодых, блин.   А, еще сто баксов в год платить Эплу (!) просто за необходимость (!!) это делать. Платить Эплу за то, что ты делаешь их телефон хоть сколько-нибудь полезным.  Мотивация Эпла понятна — старые приложения новые телефоны не продадут, потому что они не такие раздутые и не так сильно тормозят.  А пользователи проиграют.  Ну и какое будущее мы таким образом построим? Будущее золотых рыбок, которые не верят, что два года назад люди тоже могли делать что-то полезное.  Представьте, если бы сегодня нельзя было посмотреть, скажем, Паразитов? Или там Avengers: Endgame? А что, три года прошло, фильмы не обновлялись, пора бы уже и римейки снимать.  Мысль о том, что программа может быть закончена, тоже какая-то слишком радикальная. В смысле ты написал код и пошел работать над чем-то другим? А кто будет код ворошить? Байты же гниют снизу! Будь добр, сиди и обслуживай!  Короче, не удивляйтесь, когда я в плотники уйду.",303
"Иногда я жалею, что развитие компьютеров пошло не тем путем, которым могло бы. Одна из таких деталей — различение папок и файлов.  Почему папка не работает как просто еще один тип файла? Казалось бы, программисты должны уметь в абстракции и переиспользование, но вот конкретно здесь почему-то не получилось.  В командной строке чтобы скопировать папку нужно писать дополнительные ключи. Чтобы создать или удалить папку нужны отдельные команды. Приложить папку к письму нельзя. Загрузить папку на сайт нельзя. Удалить или скопировать папку с 100к файлами занимает миллион лет, хотя один файл такого же суммарного размера может скопироваться за полсекунды. Да что там, даже размер папки посмотреть уже нетривиальная какая-то операция.  Все это, конечно, неудобно, поэтому возникла целая индустрия архиваторов: способ взять папку и сделать из нее файл. Множество программ изобретали с нуля способы упаковать в один файл несколько файлов. Условный docx, jar и почти все игры. В исполняемые файлы тоже умеют засовывать другие файлы, нужные во время исполнения. Все это ТОЛЬКО ради того, чтобы на выходе не дай бог не получилась папка.  А ведь насколько круче было бы, если бы вместо доморощенного архива, тупо склеивающего файлы в непрозрачный формат, я мог бы просто зайти внутрь файла файловым менеджером и посмотреть, что там лежит!  Делать с этим, наверное, уже что-то поздно. Но может быть рано или поздно компьютеры переизобретут, и этот человек совершенно случайно прочитает этот пост и сделает все правильно. Пишу это для тебя!",304
"Когда я учился в школе, нам показали Линукс. Объяснили про юзеров, группы, пермишны, и мне тогда показалось это все круто и «по-профессиональному». Вот как работают настоящие программисты! Сам я к тому моменту разве что в Виндоус 95 все что можно было прокликал.  Каждому из нас завели по папке на сетевом сервере, куда мы должны были логиниться. И вот в какой-то момент я захотел передать файл моему другу и крепко задумался: а какие вообще у него должны получиться пермишны? Если я отдам ему с моими, он не сможет его открыть. Если я создам с его, то откуда у меня на это права?  Тогда я в первый раз задумался, что не все с этой идеей гладко. И это еще задолго до интернета и множества девайсов у каждого. У меня тогда еще даже компа своего не было, а проблемы уже начались.  Потом я много раз страдал из-за идиотских проблем с пермишнами. Монтировал сетевые папки — айдишники юзеров брались с удаленной машины, но интерпретировались как локальные юзеры. Офигеть защита, да? Запускал сервисы, которые писали или читали не из-под того пользователя. Копировал по sftp/scp/ansible и получал фигню не там и не так, как нужно. Форматировал флешки под ext3 и копировал туда файлы с правами. Вставлял чужие жесткие диски.  И знаете что я думаю? Думаю, идея, что в одной папке могут лежать файлы с разными правами — довольно бестолковая. Вот просто низачем не нужно, чтобы рядом оказались rw-rw-rw- tonsky и r---w---x transmission.  Права нужно назначать по префиксу пути. Все, что в /home/tonsky имет абсолютно одинаковые права. Включая все подпапки. Пока не указано обратное. И если я изменю права на /home/tonsky, это автоматически применится ко всему, что лежит под ним.  А, и еще, права — история исключительно локальная. Они ни в коем случае не должны быть атрибутом файлов или папок. В этом просто нет смысла.  Ну и Линукс — профессиональная среда только в том смысле, что она де-факто используется для зарабатывания денег программистами. А не в том, что там что-то хорошо или правильно сделано.",305
"Ultimate дед post  Когда я был молодым, компьютеры были совсем не такими, какимы вы знаете их сейчас.  Во-первых, в интернете было очень мало народу и он был никому не нужен. Поэтому его никто не пытался захватить, и строился он по принципу «open protocols/bring your own implmenetation». Запилить RFC считалось почетно, а запилить стартап — тогда и слова-то такого никто не знал.  Сейчас же каждый первый первым делом стремится свои данные спрятать, сторонние клиенты запретить, а свои собственные делать на отъебись, в качестве одолжения.  Во-вторых, приложения можно было купить. Так и сейчас можно, скажете вы! Но сейчас это подписки, вечная кабала, а тогда — разовый платеж за дискету на рынке. Такой вот нюанс.  И вообще программы в коробках рулили — их можно было хотя бы потрогать, на полку поставить. Киоски с дисками манили своим разнообразием. А сейчас киоски исчезли, а на полку что поставишь? Ключ распечатанный?  В-третьих, я мог запускать на своем компьютере что угодно. Хочу — игру, хочу — вирус, хочу — часы с кукушкой, хочу — дефрагментацию. Сейчас на это нужно благословение Эпла или Гугла, например. А они очень не любят, когда люди что-то интересное делают.  В-четвертых, компьютеры с каждым годом становились быстрее. Подождать полтора года было вполне себе реальной стратегией оптимизации. Сейчас за полтора года разве что клавиатуру испорят или тачбар добавят.  В-пятых, интерфейсы оптимизировались под компактность. Места и так было мало (640×480 вполне себе стандартное разрешение), так что приходилось ужиматься. И получалось! В сорок пикселей, которые сейчас тратятся на паддинг вокруг кнопки, в моем детстве умещалось целое диалоговое окно!  В-шестых, спеки! Да, раньше спеки компа что-то реально значили. 386 был совсем не то же, что 486. Riva TNT2 радикально отличалась от GeForce 256. И вот эти подписи на дисках с играми, какой ускоритель им нужен и какой проц — они были реально требованиями. И мегабайты занимаемого места приходилось высчитывать.  Сейчас же сотня-другая свободных гигов подразумевается тупо по дефолту, а требования в Стиме пишут больше тупо по-инерции. 3Гц, они и так везде 3Гц. А с Маками еще удобнее — купил Мак и сразу знаешь, что на нем тупо ни одна игра или не запустится, или не потянет. Удобно!  В-седьмых, компьютеры не использовались, чтобы рекламировать еще больше компьютеров. А сейчас открываешь Пуск или Settings и там реклама — ну что это такое? Телевизор какой-то, ей богу. (В телевизорах, кстати, теперь тоже компьютер, и это еще хуже, чем реклама по первому каналу).  В-восьмых, программы хранили данные в файлах. Эти файлы можно было организовывать, пересылать, удалять, редактировать, открывать другими программами. Даже программы были для этого специальные — файловые менеджеры. А сейчас стартап закрылся — попрощайся со своими данными. Вместо файлов может забрать ветку.  В-девятых, можно было работать оффлайн! Вместо гугла — компакт-диски с MSDN, которые легко можно было взять с собой в поездку куда угодно. Компьютер, правда, взять было сложнее.  В-десятых, я мог писать программы! Казалось бы, ну что плохого в программировании-то может быть? Это не наркотики и не порно (хотя в порно я тоже не понимаю, что плохого). И тем не менее, посчитайте, сколько редакторов кода в Аппсторе. Ноль. Чукча не писатель.  В-одинадцатых, аппов тоже никаких не было. Были про-гра-ммы. Программы. Потому что их программировали программисты. Программировали, понимаете?  А сейчас аппы лепят все кому не лень после двух часов курсов на Ютубе. Даже полная форма слова — аппликейшн — слишком длинная оказалась. В наше время программист легко мог в уме легко 256 символов пути держать, а сегодняшних только на три буквы хватает.  Короче, охуенное было время. А щас противно прям. Митинги, спринты, энгейжмент. Саасы. Тьфу.  Ну хотя бы иконки научились рисовать более-менее, и то хлеб.",306
"— Поймите: стандарт языка — это пустой чердак, куда можно набить все, что угодно. С++ так и делает: тащит туда нужное и ненужное. И наконец наступает момент, когда самую необходимую вещь туда уже не запихнешь. Или она запрятана так далеко, что ее не достанешь. Clojure делает по-другому. В ее чердаке только необходимые инструменты. Их немного, они в идеальном порядке и всегда под рукой. А лишнего хлама там не нужно.  — Move semantics, по-вашему, хлам?!  — Хорошо. Допустим, копировать объекты не всегда эффективно.  — То есть... то есть... как — допустим?  — Копировать объекты не всегда эффективно. Но в Clojure-то это мне не пригодится!   Темы для постов закончились, накидайте хот тейков что ли, чтобы было что разоблачать.",307
"В комментах к предыдущему посту пожаловались на Питон. Причем не на сам язык, а на полузакрутую модель контрибуции: коммитеры работают над чем им хочется, а патчи от коммьюнити могут лежать годами.  Вот пример жалобы (случай из Твиттера):  > [...] what shall I do next after I've submitted a PR to asyncio in CPython? Neither the PR nor BPO has been receiving any feedback for days. It doesn't feel encouraging for a me as a contributer.  На что ему ответили:  > There's well over a 1,000 PRs open now and realistically only around 30 people who actively contribute. As I told you elsewhere, most of them only contribute to their particular area of interest or expertise. Sorry we cannot provide the level of encouragement you expect.  На что автор первого твита предложил контрибуторам пошевелиться:  > I don't understand. 1000 PRs surely means more than 30 contributors. If you mean 30 Core Developers then maybe (I don't know) it would be helpful to encourage CDs to review others' contributions more instead of just having fun with the most popular language's codebase?  Про ситуацию когда-то хорошо высказался Нил Гейман. Там кто-то ныл по поводу того, что Джордж Р. Р. Мартин не пишет продолжение Игры престолов, а вместо этого занимается своими делами. Вот цитата Геймана:  > George R.R. Martin is not your bitch.  Ну и в общем-то этим все сказано. Люди каким-то образом не понимают, что софт, которым они пользуются бесплатно, ничего им не должен, и создатели этого софта тоже им ничего не должны.  Тут можно очень долго и со всех сторон обсасывать ситуацию, но все сводится к очень простой истине: нет, совсем ничего. Вот ни капельки. Да, даже тот факт, что вы сегодня можете Питон скачать, не гарантирует что он завтра не исчезнет. Или не закроется. Или не перестанет развиваться.  Все, что мы имеем сегодня как опен сорс — абсолютный жест доброй воли, удачно сложившиеся обстоятельства, аттракцион невиданной щедрости. И НИЧЕГО КРОМЕ. Пользоваться можно, хотеть чего-то тоже можно, а вот требовать — нет. Совсем нет.  Наверное, людей вводит в заблуждение, что какие-то контрибьюшены таки мержатся, и они чувствуют какую-то несправедливость, что не все. Но никто не обещал, что будут все.  Это как ягода, сорванная с куста — почему именно эта? Что подумают другие ягоды? Да нипочему. Так получилось, что кому-то захотелось сделать патч, и так получилось, что кому-то захотелось посмотреть и замержить именно его. Это цепочка исключительно благоприятных случайностей, и ни в какой момент никто никому ничего не обещал.  Что же касается BDFL (Benevolent dictator for life), когда все решения по языку принимаются одним человеком или узкой группой лиц, то — во-первых — имеют полное право (см. выше).  А во-вторых, ну трудно спорить с результатом. Питон язык #1 в мире, и пришел он туда не потому, что мержил пул-реквесты каждой обиженки из твиттера.  В Кложе похожая ситуация, и я тоже как-то ждал пять лет (не метафора и не преувеличение), чтобы мой тривиальный патч залили в ядро. Все понимаю, никаких претензий.  Людям почему-то кажется, что вот если бы комьюнити больше участвовало, что если бы всех слушали, всем бы жилось лучше. Но по факту контрибьюторы, может быть, чувствовали бы себя лучше, а вот язык вполне вероятно скатился бы в яму.  Вы хотите чувства не задеть или результат хороший получить? Лично я за результат, даже если это значит что на мои пул-реквесты будут класть хуй длиной в пять лет. Мне-то все равно, я Кложей каждый день пользуюсь и нахваливаю. Да и у Питона дела хорошо.  А вот у чувака в твиттере пока никак. Он, кстати, сам себя называет Free/Libre and Open Source Software advocate. Ну, с такими адвокатами и прокурор не нужен, как говорится.",308
"В прошлый раз когда я писал про Database for Life мне скинули видео “RubyConf 2018 - Building a Memex (with Ruby!) by Andrew Louis”. И знаете что? Впервые за долгое время я почувствовал что вот оно, то, что компьютеры должны делать. А не вот это все.  Если коротко, чувак сделал личную базу данных и заимпортил туда все свои потоки информации, какие у него были: сообщения, твиты, фитбит, историю прослушиваний музыки, прочитанные книги, фотки из эппл фото, карты, историю браузера, историю баша даже. Потом накрутил поверх этого поиск и теперь может, во-первых, за миллисекунды найти что угодно, что он когда-либо писал или получал, а во-вторых делать сложные запросы типа «фотки, сделанные 2015-м в поездке на автомобиле, которая была с этим чуваком и с этим». Ну и там всякие ништяки, типа поездки/фотки показываются на карте, к песням подтягиваются обложки, на картинки натравливается нейронка (чтобы можно было искать по содержанию) и т.п.  Клево это по нескольким причинам. Во-первых, это придает какой-то смысл всему тому прогрессу и вещам, которые мы научили компьютеры делать. Сейчас за человеком отслеживается история, позиция, на фотках распознается содержание и текст, голос можно разпознавать, но зачем? Вот тут в этом появляется какой-то смысл.  Во-вторых, очень круто, что все это доступно одному человеку силами опен-сорса. Что это не гигансткий проект бездушной корпорации на миллион человеколет, а буквально энтузиаст взял с полки и сделал. Что такие вещи вообще лежат на полках. Можно год пилить какой-нибудь туду апп, а можно за тот же год всю свою жизнь компьютеризировать. Поражает масштаб.  В-третьих, очень хорошо показывает, на что способны современные компьютеры, если захотят. Он говорит, что импортирует десятки тысяч data points в день. Я не услышал, на сколько его база растет, скажем, за год, но подозреваю, что единицы гигабайт? С современными дисками это ничто. Не нужен никакой гигантский датацентр размером с библиотеку, все это можно делать прямо в кармане.  При этом поиск по этим гигантским массивам, которые, еще раз, всю жизнь человека представляют! занимает секунду-две (насколько я понял, он там графы обходит, для запроса по таблицам непозволительно медленно, конечно. Плюс full text match часто). То есть современный компьютер может открывать пустой текстовый чат несколько секунд, а может сделать сложный иерархический запрос по всей жизни человека в сравнимое время. Заставляет задуматься, да?  А вот что меня в этом всем пугает так это как я представлю, что там под капотом. Насколько это все хрупко. Наверняка львиная доля времени ушла на то, чтобы придумать способы достать данные из самых ебанутых мест, которые усиленно не хотят, чтобы ты их доставал. Да, корпорации не любят, чтобы кто-то еще смотрел на данные, которые они с тебя же и собирают.  А когда ты все сделал и настроил, наверняка придет та же корпорация и что-нибудь переименует или задепрекейтит, чтобы жизнь медом не казалась. Еще и назовет это улучшением, чтобы поиздеваться. Но чаще молча что-то сломает, конечно.  То есть мало такую базу сделать, надо еще и чинить импорт постоянно. Мой внутренний идеалист очень нервничает, когда такое представляет.  Короче, мужику огромный респект, проект вызывает огромную зависть, но делать я ничего подобного не буду, конечно. Но желание что-то запилить пробуждает на раз-два.",309
"Чего я никогда не понимал, так это как работает ипотека. Типа, вот я смотрю квартиру в Берлине, в соседнем доме. €485 000, 75 m², 2 комнаты. И допустим я хочу взять ее в ипотеку. Но даже без всяких процентов, даже на 15 лет это будет €2700 в месяц. Это какие-то безумные цифры, нет?  Средний айтишник тут получает €60000-€70000 в год, это примерно €3000-€4000 на руки в месяц. Как это вообще работает? Я, конечно, побольше получаю, но даже для меня €2700 в месяц это огромная сумма.  Причем за эти деньги ты не получаешь какого-то кратного улучшения жилищных условий. Нет, та же небольшая базовая квартира, только в три раза дороже.  А еще с ипотекой я не смогу ни переехать, ни уйти в отпуск/сабатикал, если задолбаюсь (прецеденты были). Это история на 15 лет, в течение которых ты не можешь пошевелиться. 15 лет для меня более-менее вся оставшаяся активная жизнь. Единственная радость что к пенсии ты сможешь перестать платить за квартиру, ну так я могу просто сейчас еще одну полную арендную плату откладывать и мне потом еще хватит на 15 лет. И даже таким образом я треть стоимости квартиры сэкономлю. Потому что снимаю я, например, такую же площадь но в 3 раза дешевле чем вышло бы по ипотеке.  В России, наверное, попроще, но не понимаю я все равно. В каком-то подкасте Андрей Смирнов, кажется, молодой по сравнению со мной программист рассказывал, что закрыл две ипотеки, на каждую по два года, причем, как я понял, в Москве. Смотрю сейчас Циан, совсем базовые квартиры от 15 миллионов, за два года это по 600к/месяц. Мне в Джетбрейнсе платили 300к с 15 годами опыта, причем это в 2019 уже было, а он еще раньше ипотеку брал, то есть зарплаты тогда были еще меньше, так?  В какой-то момент я думал, что надо просто больше работать и взрослеть, и со временем такая возможность появится. Но вот сейчас я очень стар уже (37 лет), но что-то перспектив или накоплений никаких. На семь метров накопил за всю жизнь, это нормально?  Как люди это делают вообще? Я реально не понимаю, надо либо бизнес на 500 человек иметь, либо наследство, а работяги обычные, они как такое проворачивают? Или я все правильно понял и в ипотеках нет вообще никакого смысла?  UPD: По итогу дискуссии выработался следующий рецепт:  — Начинать желательно 20-летним — Брать сразу на 30-40 лет вперед — Желательно работать в США в ФААНГЕ сразу после выпуска — Иметь стартовую квартиру в наследство от бабушки — Иметь супруга/партнера-айтишника — Купить сначала что-то по-дешевле, выплатить, купить по-дороже — Жить не там где хочется, а там где дешево — Не выплачивать по истечении срока — Система рассчитана на то, что большинство людей не будут покупать  Всем спасибо, действительно, стало понятнее",310
"Коллега altmind удивляется в Твиттере, что так мало людей говорят о проблемах второго Халф-лайфа. Как хвалить так каждый горазд, а как ругать так никого.  Я, как любитель нестандартных мнений, спешу присоединиться. Превосходство первой Халвы над второй я объясняю просто: лазить по секретной научной лаборатории куда интереснее, чем по бедному восточно-европейскому городу.  Тут, правда, может еще бэкграунд сыграть — мы-то в этом выросли. Обшарапанные стены, грязные подъезды, серые дома, выбитые окна это просто наша среда обитания, норма. А для зажиточных американцев это может работать как экзотика — кто их там знает. Но все равно, научная станция >>> жилой квартал, ну как ни крути.  Что касается геймплея, то его там нет. Half-life 2 это так или иначе затяжной туториал, где тебе долго объясняют, что от тебя хотят и как это работает, а как только ты разобрался и вроде бы можешь начать играть, переключаются на что-то другое.  Движок хороший, впрочем: Counter Strike, Garry’s Mod, Team Fortress 2, Portal, Left 4 Dead. И физика, кажется, в HL2 одной из первых появилась (о чем, собственно, почти вся игра, с гравити-то пушкой).  Ждем третью часть.",311
"Самая бестолковая фича в редакторах кода — миникарта (minimap). Выглядит убого, понять ничего не помогает, но все делают.  Да, в коде тяжело ориентироваться, проблема есть. В основном потому что код это более-менее однородная стена текста. Если стену текста уменьшить, полезнее она от этого не станет. Как называется функция — важно. Где начинается или заканчивается объявление класса — важно. А общая форма текстового блока почти всегда одинаковая.  Зато на примере миникарты видно, как делаются современные продукты. Кто-то один ее придумал и тут же растащили все остальные. Причем включили по-умолчанию. Фича есть? Есть. Похвататься надо? Надо. Люди пользуются? Конечно пользуются (потому что не знают, как отключить, но этого статистика же не покажет). Продолжаем пихать ее всем и каждому!",312
"Об интерфейс гита кто только ноги не вытирал, но все-таки каждый раз, когда вбиваю git status и он пишет Your branch is up to date with 'origin/master' меня нехило так корежит.  Корежит, потому что up to date здесь не значит, что у вас самая свежая версия. Up to date значит, что ваша локальная версия совпадает с вашей же локальной версией. Зачем? Почему? Кому это может быть интересно?  Ну и отдельно концепция “remote” бранчей, которые даже называются “origin”, но на самом деле просто еще одна локальная ветка, которая вообще ничего не гарантирует и к ремоуту имеет такое же отношение, как и условный master2.  У меня честно нет версий, в какой ситуации кому-то может быть интересен статус одной локальной ветки относительно другой и неинтересен статус настоящего ремоута.  Но, как я и говорил, ругать git за нелогичность или неудобство — как бить калеку.",313
"У Wayland когда-то прочитал классный слоган: Every frame is perfect. Родился он, кажется, от каких-то древних линуксовых проблем с tearing и flickering, но ничто не мешает нам использовать его в более широком смысле.  Ну, короче, в хорошо сделанной системе разработчик должен отвечать за каждый кадр. Вот буквально за каждый.  Например, у вас есть относительно прямолинейный сценарий, но прощелкивая его вы видите какую-то ерунду. На маке есть панель System Updates, и там можно нажать кнопку Update now.  Как должно быть в идеале? Кнопка блокируется, появляется какой-то прогресс-бар, совершается апдейт (или перезагрузка), появлятся надпись «апдейт выполнен».  Вместо этого в реальности кнопка несколько раз блокируется и разблокируется, появляются и исчезают странные надписи «компьютер будет обновлен сегодня ночью», «апдейтов нет» (до того как апдейт выполнится) и снова есть и т.д.  Что это означает? Что программа победила программиста. Человек, который это писал, завяз в сложности системы, давно потерял контроль над происходящим и чинил в режиме «заплаток», лишь бы отстали.  Что делать? Ну в первую очередь нужен конечно человек, которого это волнует. Если всем пофиг, то программы естественным образом скатываются в режим «делают черт знает что, мы за это не отвечаем». Почему Маки раньше ценили за интерфейс? Да потому что Джобс лично садился, запускал и критиковал все что видел.  Ну а во-вторых, упрощать и переделывать. Часто старая модель не подходит под то, что нужно теперь, и чинить как есть только запутает код больше. А запутанный код — непредсказуемое поведение. Простота — важная характеристика, но она не достигается написанием кода, она достигается скорее удалением и переделыванием.  Это все относится и к паразитным кадрам, и к криво поставленным контролам. Хорошо написанный код и выглядит хорошо, и работает предсказуемо. Сложный и запутанный или выглядит как попало, или развалится при первом случае.",314
"В истории программирования много раз брали на лозунги шаблон Everything is a X:  - Everything is a string (TCL) - Everything is a list (Lisp) - Everything is a file (Unix) - Everything is an object (OOP) - Everything is a function (FP)  И знаете что? Каждый раз эта абстрация протекала сразу с момента ее создания. Медленно/неудобно/все равно нужно различать и т.п.  Когда нам в школе рассказывали про «everything is a file» я очень удивлялся: очевидно же, что, например, с сокетом, или с процессом, или с принтером ты хочешь делать совсем не те операции, что с файлом. Оказалось, что имеелось в виду, что в виде файла доступна какая-то ненужная тривиальщина типа пида процесса, я для нормальной работы есть нормальные специальные методы, которые не притворяются, что «все есть файл». И чего было заморачиваться, спрашивается?  Есть мнение, что и в будущем next big thing которая выберет своим лозунгом Everything is X окажется такой же дырявой еще на этапе создания. Потому что мир разный, работает по-разному и хотят от разных вещей разного. Засовывать круглое в квадратное так же логично, как носить кастрюлю в качестве головного убора. А притворяться, что это еще и удобно — ну это только программисты так могут.  Nothing is everything, короче.",315
"В комменты опять пришел человек, запуганный JavaScript. Я сокрушался, что в JS нет нормального синхронного персистентного хранилища (localStorage маленький, IndexedDB асинхронный), на что мне заметили: но там же большие данные можно хранить, мегабайты.  Целые мегабайты, представляете? В представлениях JavaScript-еров это какие-то особенно большие объемы, потому что в JS все привыкли что все крайне медленно и далеко от реальной производительности компьютера.  Но давайте посчитаем. Macbook SSD показывает 2.8 Гб/с на чтения файла в 4 Mb, ~23 Мб на один 120 Hz кадр. Каждый кадр можно читать с диска 23 Мб новых данных и НИКТО не заметит, можно делать это на UI треде и еще анимации плавные успевать крутить.  А если на количество обращений оптимизировать, то например можно читать по 256 Кб, будет 4000 чтений в секунду, или 33 чтения за кадр. Это очень интерактивные скорости, нафига там асинхронщина?  Да, я тоже помню времена, когда в компьютерах стояли магнитные hdd-диски. Шуршит — значит думает. Взял ноут со стола — все диски запарковались, все встало на паузу. Но даже я, дед, готов уже признать, что эти времена давно прошли.  Но как же, ведь диск может быть занят другими программами — говорят мне. А что, CPU/память занята быть не может?  И смешно, и грустно, как мы страдаем в этой самой песочнице браузерной, решая проблемы производительности, над которыми пятнадцать лет назад уже любой нормальный десктоп-разработчик посмеялся бы и счел тривиальными.  Если для вас компьютеры == то, что может браузер, у меня для вас плохие новости — вы отстали от реальных возможностей ПК лет на десять. Не то чтобы на десктопе все прям выжимают компы на 110%, но по крайней мере тебе ничто там не мешает, если захочется.  А браузер — это непрерывная борьба, потому что без борьбы человек не может. Даже если это борьба с гирями, которые он сам себе к ногам привязал.",316
"В комментариях про git мне заметили, что поскольку git fetch устаревает сразу же после вывода результата на экран (а на самом деле чуть раньше) (и на самом деле все терминальные утилиты так работают, это вообще-то модель терминала), то нет никакого смысла делать его чаще или в фоне: устаревшая на одну миллисекунду информация все равно что устаревшая на три дня. «С точки зрения формальной модели» (не мои слова).  Что конечно же полный бред. Потому что человек не работает по теории. Человеку важна практика. Человек не будет выливать воду из чайника, чтобы «перейти к шагу 1».  Это вообще одно из главных откровений, которые со временем понимаешь про компьютеры. Что они не про красивую математику вообще, а про очень некрасивую и вполне приземленную инженерию. Сто процентов работы программиста — оптимизировать ту самую константу +C, которая в теории никому вообще не интересна.  Начинающие программисты часто не задумываются о стоимости того, что они делают. Научили их делать SQL-запрос? Давайте сделаем по запросу на пост, например, чтобы достать имя автора. Теоретически результат эквивалентен, на практике же страница грузится пять минут вместо одной десятой секунды. Опять же, с точки зрения теории разницы нет, а с точки зрения практики пользователь вас уже давно закрыл. Потому что ну сколько можно?  Про это же все структуры данных, алгоритмы, оптимизации: с точки зрения теории можно не стараться, все хранить в плоском списке, делать четверные вложенные циклы — результат, когда он досчитается, будет точно такой же. Только сильно позже.  К сожалению, в современном мире это уже не так хорошо заметно, и можно написать квадратичной или кубической сложности «теоретически эквивалентный» алгоритм и не заметить этого по началу только потому, что компьютеры уже безумно, идиотски быстры для любых разумных прикладных применений.  И вот эта вот возможность думать, что «я сейчас напишу, что мне нужно, а компьютер/компилятор/база там разберутся, как оно должно работать» — халява исключительно за счет огромного, идиотски большого избытка хардверных ресурсов для тех простых задач, которые программисты сегодня решают. Задачи уже давно не усложняются, снижается только порог входа для программистов.",317
"Когда-то в достаточно позднем возрасте (какой-то там курс универа) на уроке истории наш историк (который вообще был клевый мужик и понимал, что учить истории программистов гиблое дело, поэтому учил нас жизни больше) вскользь сказал «ну вот зима, зиму я не люблю».  И именно эта случайная фраза открыла мне глаза. Дело в том, что до этого мне в голову как-то не приходило, что можно любить или не любить зиму. Что можно вообще иметь по этому поводу собственное мнение. Ну то есть по телевизору обычно все зиме радовались – и в мультиках, и в кино. Вокруг меня тоже как-то никто не обсуждал, что ну да, больше шести месяцев лежит снег и это как бы немножко неудобно. Ну а когда не видишь проблемы, не ищещь и решения.  Вот так вот случайная ситуация (повторюсь, фраза была впроброс и новостью стала только для меня), возможно, заложила фундамент независимого мышления. Что можно любить то, что не любят другие. Что можно не любить то, от чего все в восторге. Что можно слушать что ты чувствуешь и менять ситуацию в сторону того, что больше подходит лично тебе.  Зима, конечно, никуда не денется от того, любишь ты ее или нет. Как и школа, или родной город. Но признаться себе, что –30 на улице это неудобно, что учителя бывают и мудаки, что город может быть уныл и странно любить его только за то, что ты в нем родился, что любая страна, даже родная может оказаться мордором, что родители не самые умные и сильные люди на свете и так далее — первый шаг к исправлению ситуации.",318
"Самая бесполезная фича редакторов — автозакрывание скобок. Это когда ты нажимаешь на клавиатуре [, а услужливый редактор сам за тебя добавляет еще и ]. Нажал одну кнопку, получил две. Ух как бесит. Отключаю первым же делом всегда и везде.  Почему? Если очень поверхносто про это подумать, то кажется как будто логично. Более-менее во всех языках программирования скобки в конечном итоге должны быть сбалансированы: каждой открывающей должна соответствовать такая же закрывающая. Ну и кажется, что если закрывающую скобку тебе рано или поздно все равно ставить, чего бы не помочь тебе сразу?  Но если подумать чуть глубже, получается ерунда. Во-первых, конечно же, есть миллион ситуаций, когда скобки не балансируются. Например :). Или (str ""["" xxx ""]""). Или """""". Или \(. В наспех сделаных редакторах такие ситуации еще и ломают подсветку синтаксиса, кстати.  А во-вторых, и это более фундаментальная проблема, скобки добавляются автоматически, но удалять их нужно вручную. А с кодом же какая проблема? Никто не может сразу написать его правильно. К конечной записи приходишь после нескольких попыток редактирования, в которых скобки и уровни вложенности добавляются, удаляются, меняются местами. И вот тут-то автодобавленные скобки не в тему начинают путаться под ногами.  Ну и наконец третья проблема, более системная. Настроили вы редактор, чтобы он добавлял вам скобки. А потом пошли в браузер-твиттер-почту что-то писать, а там скобки не добавляются. И чего? Приходится переучиваться, держать в голове два режима и владеть обоими. Проблема таких специфичных режимов редактирования в том, что они работают только в одной специальной программе, а текст надо набирать много где. По этой же причине я когда-то ушел с Вима: да, можно неплохо надрочиться писать код в нем, но безумно при этом бесит, что больше нигде после этого ты писать не можешь.  В комментарии обязательно придут фанатики paredit-а, этот абзац про них. Да, есть paredit, я знаю. Нет, не пользуюсь. Смотри выше.",319
"На Leetcode задача 65. Valid Number — провалидировать строковое представление числа с плавающей точкой.  Во-первых, она там идет под сложностью Hard (почему? Наверное, для тех, кто не знает регэкспов), а во-вторых, поразительно мало решений на regexp-ах (ладно-ладно, не буду эту тему поднимать сегодня, вы еще молодые).  Но мое внимание привлекло четвертое по популярности решение, озаглавленное «A clean design solution By using design pattern».  Автор пишет:  > The point here is not how you design a algorithm, it is how you handle all cases well. There is no a clear standard for whether is a number valid, is it .50 , 39. a legal float point number? Are there only valid formats given by the example? Is hex format such as 0x12ab legal?  Условие максимально четкое. Все случаи перечислены. Ничего сверх решать не требуется.  > How about if we need to add another format such as roman number like ""I, II , IV"" as legal format.  О, вот это мое любимое. Когда программисты начинают додумывать требования, потому что просто решить и пойти заниматься своими делами им скучно.  > I found all solution are just plug logic into one function, there are lots of switch case, if else in there. It is problematic, easy for bugs, difficult to add new features, and of course, in-reusable, and here I propose a design to handle this problem easily and nicely.  Опять же, решение в одной функции приводится как недостаток. С чем я решительно несогласен! Одну функцию как раз легче всего читать и модифицировать, потому что все что тебе нужно на одном экране, контракт ограничен передаваемыми аргументами, а внтури полная свобода реализации.  Дальше он предлагает создать interface NumberValidate, реализовать IntegeValidator, FloatValidator, ScienceValidator, использовать «chain of responsibility design patter (from book of GOF)»   Следуя словам автора, это упростит исправление ошибок, потому что каждая проблема будет в одном из трех валидаторов и называет это «encapsulation» (???). Типа, если несешь ахинею, то хоть какая-то внутренняя логика в ней должна быть? В одной функции наверное проще что-то искать, чем в трех классах?  Дальше он говорит, что это «close for modification open for extension», потому что всегда можно добавить новый валидатор. Вот этого я тоже не понимал никогда, а почему в исходную функцию-то нельзя добавить? Какая разница, класс писать или функцию менять?  Все это кульминирует в трехсотстрочной реализации. Для сравнения соседи, которые FSM вручную реализуют, укладывются в 30 с небольшим строчек. В ДЕСЯТЬ РАЗ МЕНЬШЕ!  Ну а решение на регэкспе так вообще одна строчка (ну ладно, две, одна еще на `import re`). В 150 раз меньше!  Короче, главное, что нужно про код понимать: чем его меньше, тем лучше. Количество багов, легкость чтения, отладки, изменения — все это пропорционально количеству кода тоже. Количество кода приоритетнее, чем любые архитектурные изыски, точки расширения, «красота». Если что-то можно написать в одну строчку вместо тридцати — надо писать в одну строчку. Вам и компьютер, и коллеги спасибо скажут.  Ну а второе — не надо планировать наперед. Придет время — перепишете, тоже мне проблема. Новички пытаются думать на расширение, потому что, мне кажется, боятся менять уже существующий код. Ну, 300 строк ООП со случайно торчащими и непонятно кем используемыми методами я бы тоже боялся. Но вообще удалять и переписывать — это нормально и даже хорошо. «Когда меняется ситуация, я меняю свое мнение».  В общем-то я и внимания бы не обратил, если бы не нашел решение в папке Most voted. Чему молодежь учится! Будьте осторожны, не слушайте дядю Боба и его последователей.  А, ну и учите регэкспы 🙂",320
"Хакер ньюз, как и Хабр, конечно уникальный сайт. Где еще выпадет возможность заглянуть в разум «среднего айтишника»? Почувствовать настроения эпохи?  Мои статьи периодически попадают туда, и, в целом, обсуждаются с неплохим коэффициентом полезности.  Но иногда они попадают туда второй, третий раз или просто спустя какое-то время. И вот тут меня больше всего веселит, как люди обсуждают-обсуждают содержание, а потом комментов через тридцать кто-то вдруг находит дату публикации и врывается в дискуссию:  2019! 2019, ребят!  Типа, вы чего? Этому посту уже три года! Он воняет! Не тратьте свое время, мол, эти идеи давно протухли! Человек из 2019-го уж явно не мог ничего дельного сказать! Да какой человек, дед! Натурально, дед уже, если в 2019 уже писать умел! Как он вообще в 2019-м это опубликовал? Через факс? На пергаменте? Пером?  Не, ну правда, где еще можно так полно погрузиться в разум «среднего айтишника»? Взглянуть, чем он живет, какими идеалами, какими переживаниями?  Не то что комментарии в этом паблике. Комментарии тут — самые лучшие, а комментаторы — далеко впереди «среднего айтишника». Ну, как по мне. Люблю вас!",321
"Посмотрел несколько часов суда Джонни Деппа и Амбер Херд. Раньше мое представление о судебной системе США ограничивалось фильмами про адвокатов. Ну там знаете, Вердикт, 12 разгневанных мужчин, Сбежавшее жюри, Филадельфия, Адвокад дьявола, Блондинка в законе, Голиаф, Чикагская семерка. А тут — видеозапись, как оно на самом деле.  Ну и конечно, первое, что бросается в глаза — там никому особо не интересно, что произошло на самом деле, а интересно провести допрос так, чтобы показалось (именно показалось), что он больше перевешивает в твою сторону, независимо от того, что было на самом деле сказано.  Но весь кайф в конкретике. Например, юрист может показать чью-то запись/документ и попросить автора ее прочитать. Автор может начать пытаться объяснять, что же он имел в виду (свои же слова!), или дать контекст, но ему не дают. И вообще говорить и что-то уточнять не приветствуется. Прям могут сказать: пожалуйста, не уточняйте. Почему что-то неидеально сформулированное в один момент в прошлом имеет какие-то преимущества перед более взвешенным взглядом _того же самого человека_ из сегодня, непоятно.  Еще более странно — нельзя пересказывать слова других людей. Можно говорить где ты их видел, что происходило, что они сделали, но что они сказали — нельзя. То есть речь считается каким-то странным действием, неэквивалентным другим действиям. Понятно, что все действия пересказываются с пометкой «по моему мнению», но вот именно речь так почему-то нельзя.  Ну и самое странное — наводящие вопросы. Точнее, я даже не знаю, как это назвать. Вопросы, которые выглядят примерно так (Деппу): «Перед вами газетный заголовок “У Джонни Деппа проблемы с выпивкой”. Я правильно его прочитал?». «Да». «Отлично, следующий вопрос». То есть вопрос в том, правильно ли он прочитал, а что по сути заголовка — отвечать нельзя. И не не хочется, а именно нельзя!  Вот что это было вообще? Какие выводы надо из этого сделать? При всей юркости адвокатов (а они очень, очень не стесняются возражать — objection — по любому поводу) именно этот паттерн почему-то никто не пресекает.  Открытые вопросы бывают, но их как будто меньшинство. Я так понимаю «своя» сторона может этим рискнуть, а оппоненты стараются максимально конкретный и наводящий вопрос задать, типа, когда вы перестали пить коньяк по утрам. При этом «нет» как будто никого не смущает. Не угадал? Пофиг, погнали дальше. Предполагается, что эти вопросы как-то замарают обвиняемого/обвинителя независимо от ответа, или что?  Там есть мужик, которого заставляют пяток заголовков прочитать, не им написанных, просто, вот мол была такая газета, спрашивают: видели? Он на каждый говорит: нет, не видел. И после пяти таких отказов адвокат как ни в чем ни бывало: вот этот кризис в карьере Деппа, о котором вы тут говорите... И опять же — нельзя сказать «я ничего такого не говорил, это вы придумали», потому что надо отвечать на вопрос, а не рассказывать, что ты думаешь или что видел. А вопрос такой тебе, конечно, не зададут, если это невыгодно.  При этом непонятно кем написанные газеты вполне себе цитируются без возражений, а эксперту, сидящему прямо тут прямо в зале, можно легко заткнуть рот. Потому что не документ.  Да, юристы и в культуре обычно рисуются скользкими и аморальными типами, но я не представлял, насколько эти манипуляции плохо спрятаны и очевидны в жизни. Про суды у меня была иллюзия какой-то осмысленности происходящего, но на деле кажется это что-то кафкианское и бессмысленное.  В любом случае было очень любопытно взглянуть на конкретные примеры. Что они там с такими подходами насудят, конечно, вопрос, но, в общем-то понятно, почему в суд никто идти не хочет даже с очень хорошим кейсом. Результат может вполне оказаться рандомом и зависеть, например, от красноречия или плохо сформулированного ответа.  P.S. Для проигрывания видео используется обычный виндовый VLC :) А еще в какой-то момент все ждут пару минут, пока загрузится винда. Не боги горшки обжигают",322
"Больше всего меня бесят непрозрачные АПИ. Возился в пятницу с Файрбейзом, и у них чтобы авторизоваться, нужен обязательно их клиент, которому нужно подложить какой-то json-файл с креденшлами, который нужно где-то еще сгенерить. Гуд лак сделать запрос из скрипта на CI.  Придется расчехлять программирование, причем на одном из языков, которые мне не нравятся, но которые соизволил выбрать за тебя гугл. Открытая, понимаешь, экосистема. Не надо так.  Вторая странность это сам файл с креденшлами. Нормальные люди делают как? Нажал в интерфейсе где-то кнопку, тебе сгенерили ключ символов на 100, ты его скопировал и всю жизнь пользуешься.  А у Гугла как? Скачиваешь JSON-файл. Запускаешь гугл-клиента. Он делает за тебя запрос. Получаешь короткоживущий ключ. И вот им уже можно пользоваться (недолго). А файл таскай с собой.  Зачем? Почему? Концепция короткоживущих временных ключей мне как-то слабо понятна, если честно. На клиенте еще можно как-то объяснить тем, что мол враждебная среда, чужой код вокруг, тыры-пыры, но на сервере-то зачем?  Json-файл тоже смешной, например, там внутри куча полных URL-ссылок на гугл же. Видимо это какой-то «самоописывающий» формат, я помню была мода на такие. Типа, делаешь запрос, а тебе в ответе ссылка «на следующие десять записей» полным урлом, с доменом и всей байдой.   Какая-то на редкость бесполезная фигня, как по мне. Тебе все равно надо уметь делать запрос на любую страницу в любой момент, так что ты все это и так и так уже захардкодил, и в ответе тебе просто придет то, что ты и так уже знаешь. Плюс дублирование, скажем, в документации написано делать example.com/page10, а в ответе приходит www.example.com/page-10. И что, кому верить?  Не делайте так, короче. Делайте REST API, которые не требуют клиента, и простые вечноживущие ключи, которые можно послать в header.",323
"Если вам нужна хорошая метафора веб-разработки, то некто leoeelias в твиттере нашел, что чтобы провалидировать email, можно создать невидимый DOM-элемент input type=email, вставить в него значение и позвать checkValidity().  Мало того что это как вызвать бульдозер, чтобы разгладить складку на брюках, так потом еще и выяснилось, что эта самая валидация проверяет наличие символа @ в строке и всё. Как всегда, хочешь сделать хорошо — доверься веб-стандартам ¹ ²  ¹ Кроме мобильного Сафари ² Сарказм",324
"Давайте регэкспам научу за один пост?  Регэксп описывает шаблон, который вы хотите найти внутри строки.  Самый простой — буквальный. Что написано, то и ищем:   /abcd/ => ✅ ""abcd"", ⛔️ все остальное   Какой-то символ может повторяться. Если сколько угодно раз (1 или больше), то плюсик:   /a+/ => ✅ ""a"", ""aa"", ""aaa""   Если сколько угодно раз или ни разу (0 или больше), то звездочка:   /a*/ => ✅ """", ""a"", ""aa"", ""aaa""   Если один раз или ни разу, то вопрос:   /a?/ => ✅ """", ""a"", ⛔️ ""aa"", ""aaa"", ""aaaaaaa""   Все три применяются только к символу, который идет непосредственно перед:   /https?/ => ✅ ""http"", ""https"", ⛔️ ""htt"", """"   Теперь про сами символы. На одной букве далеко не уедешь, поэтому есть выбор. [abc] значит любой из a, b или c:   /[abc]/ => ✅ ""a"", ""b"", ""c"", ⛔️ ""d""   Внутри квадратных скобок можно писать диапазоны:   /[a-z]+/ => ✅ ""abc"", ⛔️ ""123"", ""ab12"" /[0-9]+/ => ✅ ""123"", ⛔️ ""abc"", ""ab12""   Но в эпоху юникода использовать a-z не рекомендуется. Вместо этого есть Юникодный класс “Letter”:   /\p{L}+/ => ✅ ""abc"", ""абв"", ""åbč"", ⛔️ ""1234""   У квадратных скобок есть еще одна особенность: можно сказать отрицание, то есть «что угодно кроме перечисленного»:   /[^a-z]+/ => ✅ ""123"", ""абв"", ⛔️ ""a"", ""abc""   Полезно, например, чтобы делить строку по разделителю. Можно написать «что угодно кроме двоеточия ноль или более раз»:   /[^:]*/ => ✅ """", ""123"", ""абв"", ⛔️ ""a:b"", "":""   Еще один важный класс: пробел. \s включает все возможные варианты пробелов (неразрывные, em/em spaces, табы и т.п.):   /\s*/ => ✅ """", "" "", ""   "", ⛔️ ""abc""   \s* часто используется при парсинге «человекочитаемых форматов», т.к. люди любят пробельчиками отбивать все, или делать вид, что их не видят.  Точка. Точка значит «что угодно вообще»:   /.*/ => ✅ """", ""123"", ""абв""   Крышечка и доллар — начало и конец строки. Обычно регрексп будет искать вам ПОДстроку. Чтобы проверить всю строку целиком, заверните ее:   /^[a-z]+$/ => ✅ ""abcd"", ⛔️ ""abcd1""   Наконец, «или». Когда нужно выбрать из нескольких сильно разных вариантов — скобки и пайп:   /(http|ssh)/ => ✅ ""http"", ""ssh"", ⛔️ ""htsh""   По использованию. В простейшей версии регэкспом вы просто проверяете, есть ли внутри строки подстрока, соответствующая шаблону:   /[a-z]+/.test(""1abc2"") => true /[a-z]+/.test(""123"") => false   Но иногда строку хочется распарсить. Для этого интересующие вас части заверните в круглые скобки:   ""__abc123__"".match(/([a-z]+)([0-9]+)/) => [""abc123"", ""abc"", ""123""]   Штуки в скобках называются «capturing groups». match вернет вам сматчившуюся подстроку целиком плюс значения всех capturing groups.  Тут проблема, потому что скобки могут быть чисто техническими и использоваться просто для группировки. В этом случае пишут (?:),  «non-capturing group». По сути те же скобки, но в результат match-а они не попадут.   ""__abc123__"".match(/(?:a|b|c)+([0-9]+)/) => [""abc123"", ""123""]   Теперь про недостатки. Самое неудобное — что каждый символ внутри значимый. То есть нельзя разбить регэксп для удобства чтения. Если вставите где-то лишний пробел, регэксп будет искать его в строке:   /( abc | def )/ => ⛔️ ""abc"", ""def"", ✅ "" abc "", "" def ""   Второе — многие нормальные символы имеют специальное значение и их нужно эскейпить. Это очень трудно читать:   /(\(|\))/ => ✅ ""("", "")""   Особенно легко попасть на точке:   /.*.jpg/ => ✅ ""abcjpg"" /.*\.jpg/ => ⛔️ ""abcjpg""   Так что читать регэкспы сильно сложнее, чем писать. Понимать — легко, а вот продраться через мешанину символов, где что начинается или заканчивается — сложно.  Поэтому простых регэкспов не бойтесь — их читать как раз несложно. Сложные иногда можно потерпеть ради компактной записи и перформанса.  Факультативно почитайте про lookahead/lookbehing, quantifier, named groups, greedy/lazy, флаги ignore case, unicode, multiline.  Как-то так.",325
"Вот программисты любят говорить «требования». Реализую требования, спустили требования, код соответствует требованиям.  Причем это звучит так, как будто требования это закон природы, или слово божье, или обстоятельства непреодолимой силы. «Я написал этот код, потому что так было в требованиях» с той же интонацией, что и «я переехал, потому что мой город смыло цунами».  Но штука в том, что требования составляют точно такие же люди, как и ты. Они точно так же могут чего-то не знать, или забыть, или принять плохое решение, или просто плохо работать. То, что какое-то решение принял другой человек, не делает его автоматически правильным или неоспоримым.  Даже если требования это какой-то стандарт, то всегда есть еще решение соответствовать стандарту или нет, расширить его или реализовать неполностью, или вообще договориться о другом стандарте.  Короче, требования — это часть решения, а не часть проблемы. Думать своей головой и договариваться надо, а оправдывать плохо сделанную работу требованиями — нет.",326
"Напоминаю вам, что если вы не знаете, как расшифровывается  XSS, CORS, CSP, CPS, CSS, SVG, GIF, JPG, JPEG, PNG, APNG, BMP, MIDI, HTML, DHTML, SGML, RTF, RDF, ODF, PDF, OWL, JSON, JSONP, JSONB, RSS, MAML, XAML, YAML, VML, XSL, XSLT, XHR, PHP, APL, ML, ML, WHATWG, W3C, IEC, ISO, OSI, OIS, IOS, OASIS, WS-I, TCP, UDP, IP, HTTP, IMAP, SSH, SCP, FTP, SFTP, DHCP, LDAP, MQTT, NTP, POP, RTSP, SIP, SMTP, TLS, SSL, DSA, RSA, ECDSA, XMPP, SCTP, ICMP, PPP, MPLS, LSP, ID, CPP, BSD, GNU, GPL, LGPL, AFL, APSL, CDDL, EPL, MIT, MPL, WTFPL, OSS, FOSS, FLOSS, PDP, SVR, OSF, CSRG, QNX, AIX, POSIX, SFU, WSL, WSLG, NT, CD, VM, VMS, IPC, CPU, RAM, DMA, RDMA, UDMA, CPP, UB, USB, API, DSL, MBR, CLI, GUI, GUID, UEFI, APM, WOL, SDI, RPC, RFC, I/O, PIO, SoC, SSE, ALU, GPU, MMU, MP, MPI, AMP, SISD, MISD, SIMD, MIMD, SPMD, MPMD, SIMT, SMP, UMA, NUMA, COMA, CORBA, CUDA, GCC, LLVM, GPG, PGP, GPGPU, CRDT, LWW, I2P, P2P, VPN, IPFS, APFS, BFS, FAT, HFS, LFS, NTFS, ZFS, NAS, FUSE, SMB, SSHFS, DHT, LSMT, DAG, DNA, DAO, DOM, SOAP, ICO, NFT, SQL, NoSQL, NewSQL, DDL, DML, DFDL, OQL, CQL, SPARQL, LINQ, ACID, SOLID, CAP, CRUD, JDBC, ODBC, J2EE, JSR, JSP, JSF, EJB, JTA, JPA, PIP, CGI, SSI, FCGI, MSE, SSE, IDL, DI, EAP, GA  то вы ненастоящий программист. Идите доучивайтесь!  UPD: Подписчики добавили  RTFM, OMFG, HATEOAS, WYSIWYG, DDOS, MITM, DNS, LAMP, PKI, GOF, DDD, TDD, BDD, DOD, RTCP, RTC, NvME, KISS, DRY, YAGNI, AJAX, NLP, OLE, OLAP, OLTP, SFINAE, FIFO, LIFO, DBMS, RDBMS, JVM, JRE, JDK, REST, AWS, IAM, EC2, RDS, EBS, SQS, I18N, L10N, A11Y, K8S, MVCC, MVC, MVVM, OOP, FP, ASCII, AVX, CQRS  которые, конечно, тоже стыдно не знать!",327
"Обожаю переписывать код. Многие системы развиваются дописыванием — рядом со старым пишется новое. А я люблю наоборот, старое грохнуть и сделать на его месте новое. Раза с третьего где-то уже более-менее нормально получается.  А у вас как?",328
"Есть такое поверье, что статическая типизация очевидно помогает писать код лучше — меньше ошибок и быстрее. Потому что компьютер помогает, типы сами все проверяют, тесты не нужн и т.д.  Казалось бы — логично? Легко можно предствить, как это работает.  Моя проблема в этом утверждении только со словом «очевидно». Смотрите — если бы это действительно было так очевидно, мы были бы завалены примерами как статическая типизация нарезает круги вокруг динамической, да? Я даже не говорю про исследования (хотя и они, наверное, были бы), но просто примеры из жизни. Раз вещь очевидная, значит она подтверждается направо и налево, по многу раз на дню?  И что? Где эти примеры? Где подтверждения? Где статистически значимые проценты компаний, которые завоевали рынок за счет выбора статически типизированного языка? Где те самые супер-надежно работающие на статических языках программы? Где статические программисты, работающие по полтора часа в день, потому что это настолько легче чем у конкурентов?  А нет их. Может быть, не так уж это и «очевидно»?",329
"Ничто так сильно не расстраивает меня в компьютерах, как ресайз окна. Да, когда берешь его за уголок и таскаешь туда-сюда.  Когда компьютеры были медленными, вместо перерисовки содержимого при ресайзе рисовался только контур. При перетаскивании, кстати, тоже.  Потом компьютеры стали побыстрее и появился «живой» ресайз — окно перерисовывалось прям по ходу перетаскивания.  А потом что-то случилось и прогресс пошел вспять. Эпл сделал сплитскрин на айпаде, но если потянуть за серединку между ними, оба окна размывались (блюрились), пока не отпустишь. Очевидно, ресайзить в реальном времени у них почему-то не получалось, и они решили вот так вот спрятать это за градиентами.  Потом на маке сделали «нативный» фулскрин. Понятно, что при переходе из обычного состояния в полный экран окну надо увеличиться — но анимацию этого увеличения почему-то сделали тупым растягиванием текстуры. Если вы откроете, скажем, терминал на четверть экрана, а потом нажмете на зеленую кнопку в светофоре, вы сначала увидите как все буквы вырастают в четыре раза, а потом фейдятся обратно в свой нормальный размер. Очевидно, опять где-то кому-то не хватило производительности.  Сплит скрин, кстати, в маке тоже сделали потом. И ресайз в этом режиме тормозит в два-три раза больше, чем ресайз обычного окна. Хотя, казалось бы, задача ровно та же самая.  И вот наконец вчера анонсировали, что в новой АйпадОС можно управлять окнами! И что бы вы думали? Ресайз там выглядит максимально позорно! Содержимое окна скейлится прям в процессе, буквы прыгают, по бокам появляются черные полосы на месте предыдущего размера. Я кстати не понял, как они умудрились сделать и то, и то одновременно. По идее, ты ЛИБО скейлишь и растягиваешь текстуру (и тогда размеры фиксированных элементов скачут), ЛИБО закрашиваешь пустое место черным. Как можно получить оба эффекта одновременно — загадка. Но для Эпла нет ничего невозможного.  Что меня тут расстраивает так это тривиальность задачи. Мы 100% знаем, что компьютер МОЖЕТ ресайзить окно со скоростью 1000 fps. Скажем, если я напишу программу, которая будет эмулировать оконный менеджер внутри своего окна, там все будет гладко, быстро и надежно. Почему на уровне ОС нельзя также? Даже на самом мощном и свежем железе и софте программисты не могут заставить ОС делать это.  И ладно бы Мак — там, понятно, стопицот слоев совместимости и костылей, как в истории с моргающим Емаксом, — это хотя бы как-то можно понять (хотя все равно обидно).  Но Айпад-то свеженький и там можно было сделать нормально? На маломощность тоже уже списать не получится — там сейчас точно такой же процессор, как и в десктопных маках, и он побыстрее многих ноутбуков.  И это я уже не говорю про то, как это выглядит для программиста. На уровне API (причем как мака, так и винды) создать окно, которое плавно ресайзится — нетривиальная задача, решаемая комбинаторно и такое ощущение что по чистой случайности. Почитайте The smooth resize test Рафа Левина, если не верите.  Такое ощущение, что производители ОС не сильно-то и стараются, хотя должны, казалось бы, помагать прикладным программистам.",330
"Всегда интересно, как в больших компаниях принимают решения. Типа, почему фильм такой тупой, хотя у них было 200 миллионов — неужели нельзя было нанять сценариста хотя бы за миллион, чтобы он указал на идиотизмы?  Или смотришь на дизайн нового macOS — ну наверняка каждый экран десятки людей видели и утверждали, и что, никто не сказал ни в какой момент «говно, переделывайте»?  Причем не по спорным каким-то вещам, не по вкусовщине, а по базовым: affordances, контраст, производительность. Пока в вебе идут бои за контрастность 7:1, в Эпле делают группировку контрастом 1,03:1 (не шучу).  Никогда не думал, что прогресс может идти вспять, но мы это вовсю наблюдаем. Интересно, на самом деле, что там внутри происходит — если даже всем в интернете понятны проблемы, неужели внутри Эпла совсем не осталось людей, которые понимают базовые вещи про экранные интерфейсы? Которые могут сказать, что Welcome Screen или там Security Popups это анти-паттерны? (которые Эпл сам же раньше и высмеивал в рекламе). Наверняка же остались, но почему их не слушают?  И если «делать хорошо» не основной императив, то какой основной? Менять что-нибудь каждый год, неважно что? Хочется просто понять логику, чтобы знать, чего ждать. Кто знает? Есть идеи?",331
"Чего я никак не могу понять так это почему я достаточно регулярно вижу картинки с неправильными пропорциями сторон (aspect ratio). Казалось бы, вот картинка, у нее написано, сколько она по ширине и сколько по высоте. Недвусмысленно написано, в цифрах. Как можно их проигнорировать и нарисовать с какими-то другими?  Я понимаю, что это от невнимательности происходит и от недосмотра, но чего я не понимаю так почему возможность испортить пропорции вообще существует? В жизни нет ни одной ситуации, когда картинку было бы нужно растянуть/сжать только по одному направлению, не изменив так же и другое. Вот ни одной.  Кто написал этот код, который позволяет тянуть/жать картинки только по одному направлению? И почему он так легко доступен?",332
"Слушал сегодня The Talk Show live from WWDC, там интервьюруют управляющих Эпл на сцене типа. Предполагается что будут критиковать, но на самом деле довольно беззубая штука.  Ну и там кто-то из них (не различаю по голосу, сорян) говорит в защиту Catalyst (это такая технология, чтобы iOS приложения под Мак адаптировать и запускать) что мол вот мы выкатили редактирование сообщений в Messages в этом году, и если бы не Catalyst, то на Мак оно бы еще ехало год или два. А так, типа, одновременно.  В связи с чем у меня вопрос: а сколько вообше людей нужно, чтобы писать этот самый Messages, допустим, нативно под Мак? Неужели нельзя посадить одного человека, ну двух-трех ради бас фактора, чтобы они за год сделали редактирование сообщений? Одну-единственную фичу? Причем фронтенд только, бэкенд явно общий с айосом.  Просто вот эта вот логика больших компаний, что чем больше у них людей, тем меньше ресурсов на что угодно как будто. У нас пятьдесят тысяч программистов, поэтому ну никак невозможно найти одного, который бы портировал приложение под Мак. Как, почему? В чем проблема? Чем остальные таким важным заняты? Почему нового не нанять, деньги же есть?",333
"Лет десять назад, когда интернет еще был медленный, а браузеры не до конца дружили с SVG, кому-то пришла в голову идея засунуть иконки в шрифт.  Ну а что — шрифт это векторный формат для миллиона разных картинок в одном файле, как раз то что нужно для иконок. Гитхаб, кажется, очень этим гордился, Font Awesome тогда появился, короче, трендовая тема. С цветами правда была проблема, но ее быстро замяли, сказав, что «такой дизайн» и вообще цвета в иконках отвлекают.  На волне хайпа решил и я сделать также. Засунул, значит, свои иконки в шрифт, поставил на сайт, открываю — говно какое-то. Что такое? Что случилось?  Оказалось, поскольку это теперь шрифт, то Винда начала его аггресивно «оптимизировать» под пиксельную сетку — вершины подвигала, Clear Type сверху наложила и получился какой-то уродец.  Короче, плюнул я на это, сделал обычные то ли PNG, то ли SVG, все сразу заработало, ну я так и оставил. Мир тоже с этой идее соскочил как-то.  Потом уже появились Emoji, которые вообще непонятно какими правдами и неправдами рендерятся, но над которыми у тебя нет контроля — бери те, что есть, и выглядеть они будут «как-то» (как и буквы, впрочем — кто его знает, каким шрифтом их увидит пользователь).  И тут проснулся Эпл, самая прогрессивная и передовая компания на планете, и решила эту технологию возродить. Зачем, почему — никто не знает. Да, у них нет проблемы с Clear Type и хинтингом (потому что его нет на Эпл-устройствах в принципе), но все равно ощущение что сову натягивают на глобус осталось.  Нигде кроме Маков эти символы не увидишь, с цветами проблемы, размер точно хрен подгадаешь, да еще и в пиксели не попадают примерно никогда. А самое главное — шрифт зависит от версии ОС. Извините, вы не можете скачать это приложение, потому что иконка листа появилась только в нашей последней ОС.  Короче, по-моему это тупиковая ветвь. Чем SVG не угодил (или PDF, который так любят в Эпле), я так и не понял. Есть вариативность, но зачем она нужна я, если честно, хз. Часто вы вес своим иконкам меняете?",334
"Давайте я вас таймзонам научу? А то бытует мнение, что это что-то сложное, но на самом деле там все просто, если разобраться.  Самое простое, что нужно понять — Unix timestamp. Формально это количество миллисекунд, которые прошли с момента, когда 1 января 1970-го года в Гринвиче часы показывали 00:00:00. Узнать его можно, например, так:   >>> new Date().getTime() 1655208767805    Кайф в том, что unix time одинаково по всей земле. То есть любой человек где угодно на планете, если запустит эту вот строчку кода одновременно со мной (в ту же миллисекунду) получит то же самое число. Где бы он ни находился.  И это очень удобно. Unix time не зависит от часового пояса, летнего времени и прочей чепухи. Каждую секунду он увеличивается на 1000 по всей Земле одновременно. Любое число это какой-то момент времени, и любому моменту времени соответствует какое-то число, без пропусков.  Да, когда мы полетим на Марс, станет сложнее (из-за релятивистских эффектов), но пока это очень удобная точка, от которой можно плясать.  Дальше. Понятно, что считать время таким образом не очень удобно. Люди привыкли общаться в терминах «четыре утра» или «семь тридцать вечера». Это называется Wall clock time, то есть время, которое будут показывать часы на стене в данном месте в этот конкретный момент времени.  В чем подвох? В один и тот же момент времени в разных точках земли часы на стенах показывают разное время. У меня 14:19, в Москве 15:19, а в Нью-Йорке 8:19. Это называется «часовые пояса».  То есть чтобы получить wall clock time, надо знать Unix timestamp и место. Это преобразование тотально (то есть работает всегда) — в любой unix timestamp в любом месте часы будут показывать _что-то_.  Обратное преобразование тоже возможно, но уже не всегда определено. Связано это с летним временем — когда часы переводят вперед, возникают цифры, которые часы не показывают никогда. Скажем, если часы перевели с 2 ночи на 3 ночи, ни в какой момент времени они не покажут 2:30. То есть перевести 2:30 в Unix timestamp не получится — в этом нет смысла.  Хуже того, если часы переводят назад (с 3 часов на 2), то 2:30 возникнет на них дважды в день, то есть из 2:30 можно получить аж два разных (с интервалом в 3600000 мс) Unix timestamp-а — преобразование неоднозначно.  Именно из-за этих неопределенностей Unix timestamp первичен, а wall clock time вторичен. Если вы храните Wall clock time (даже с часовым поясом), вы теряете информацию.  Теперь про часовые пояса. В простейшем случае это просто число минут, на которое время отличается от UTC — скажем, у меня сейчас UTC+0200, то есть на два часа больше, чем UTC. UTC это типа wall clock в Лондоне без летнего времени (на самом деле, атомные часы, но про это позже). Есть вроде таймзоны, отличающиеся кратно на 30 и на 15 минут, но более идиотских нет (хотя раньше были).  Однако простого UTC+0200 недостаточно, потому что есть еще два фактора — летнее время и история. Летнее время это собственно два раза в год переход от одного UTC-смещения к другому и обратно. Скажем, у меня в Германии летом UTC+2 (CEST), а зимой UTC+1 (CET). Поэтому когда вы выбираете часовой пояс, вы выбираете Europe/Berlin, а не UTC+2 — смещение плавает.  Плавает оно и из-за исторических прецедентов. Скажем, мой родной Новосибирск несколько раз только на моей памяти менял часовой пояс между UTC+6 и UTC+7. Это никак, разумеется, нельзя предсказать или предвидеть — правительства разных стран могут менять эти вещи произвольно, иногда объявляя об этом за пару недель и только в местных газетах.  Это была часть 1/3, продолжение ниже!",335
"Работа со временем, часть 2/3  Вся информация об исторических переменах собирается в tz database. Это такой public domain файлик, где для каждого города написано, какой у него UTC offset, как и когда он переходит на летнее время и как это менялось с 1970-го года. Он используется для всех преобразований между wall clock и unix time.  Написано в нем примерно следущее:   # From Paul Eggert (2016-03-18): # Asia/Novosibirsk covers: # 54  RU-NVS  Novosibirsk Oblast  # From Stepan Golosunov (2016-05-30): # http://asozd2.duma.gov.ru/main.nsf/(Spravka)?OpenAgent&RN=1085784-6 # moves Novosibirsk oblast from UTC+6 to UTC+7. # From Stepan Golosunov (2016-07-04): # The law was signed yesterday and published today on # http://publication.pravo.gov.ru/Document/View/0001201607040064  Zone Asia/Novosibirsk  5:31:40 -  LMT 1919 Dec 14  6:00        6:00 - +06 1930 Jun 21        7:00 Russia  +07/+08 1991 Mar 31  2:00s        6:00 Russia  +06/+07 1992 Jan 19  2:00s        7:00 Russia  +07/+08 1993 May 23 # say Shanks & P.        6:00 Russia  +06/+07 2011 Mar 27  2:00s        7:00 - +07 2014 Oct 26  2:00s        6:00 - +06 2016 Jul 24  2:00s        7:00 - +07   TZ database изначально собирается волонтерами (да, блин!), затем компилируется и поставляется операционными системами и некоторыми платформами (в JDK, например, есть копия). Помню, как несколько лет страдал со своим Андроидом, на который не выходили обновления, а Новосибирск поменял часовой пояс и Asia/Novosibirsk показывало неправильное местное время.  Теперь про сложности. Главная сложность заключается в том, что время идет по Unix time и работать с ним легче тоже в Unix time, но люди хотят иметь дело с Wall clock time. И вот тут, ну, нужно быть внимательным, и все будет хорошо.  Пример — скольчо часов в сутках? 24, правильно? Кроме дней перевода часов, тогда там будет или 23, или 25, потому что для человека сутки — это интервал между 9 утра на часах сегодня и 9 утра на часах завтра, а сколько на самом деле времени прошло — не так уж важно. Важно, во сколько вставать на работу.  Или другая ситуация — я поставил будильник на завтра на 9 утра. И потом перелетел из Берлина в Москву. Во сколько должен зазвонить будильник? В 9 утра, но уже по Москве, да? То есть Unix timestamp будильника должен поменяться в момент смены часового пояса.  А вот для календаря это уже неверно — событие на 9 утра по Берлину должно превратиться в 10 утра по Москве, где бы я ни находился.  Из-за всего этого возникает концепция «местного», или «символического» времени. Скажем, вам надо посчитать, какое число будет через пять дней после 5 июня. Можно взять 5 июня, какой-то часовой пояс (например, текущий), перевести в Unix timestamp, прибавить 5 * 24 * 3600 * 1000, и перевести обратно в wall clock той же таймзоной и посмотреть на дату.  Но это бред — как мы видели, не в каждых сутках 24 часа, таймзону приходится брать с потолка, и вообще вопрос не об этом был. Как люди мы понимаем, что через пять дней после 5 июня будет 10 июня, где бы мы ни находились и сколько бы между ними реально часов не прошло. Поэтому такие вычисления лучше делать без Unix time вообще, а чисто на символическом календаре, в котором 5 и 10 июня не соответствуют какому-то конкретному моменту времени.  Но на этом сложности более-менее заканчиваются. Если хорошо понимать, о чем каждый раз идет речь — о конкретном _физическом_ моменте времени (unix time), о времени на часах в комнате (wall clock) или о символических вычислениях (даты, обычно, но и время тоже) — то почти всегда достаточно легко сделать то что нужно и получить правильный ответ. Главное не спутать одно с другим, потому что на словах все это — время, часы, а смысл сильно разный.",336
"Работа со временем, часть 3/3  Тут уже будет про всякие курьезы. Во-первых, сильно не завидую составителям tz database, потому что им приходится иметь дело со сложностью человеческого мира и неточностью «обыденных» определений. Скажем, были города, в которых половина жила по одному времени, а половина — по другому. Какие-то города, например, Берлин, находились вообще в двух странах.  Другая штука — путешествие в прошлое. Как вы видели, Unix timestamp начинается с 1970-го, но можно ли продолжить его в прошлое? Немножко можно, насколько позволяет tz database, но там уже начинается неполнота данных о часовых поясах и прочий разброд. Если совсем сильно продолжать, то начинаются вопросы, скажем, переход между Юлианским календарем и Грегорианским был довольно долгим и хаотичным географически и зафиксирован не очень точно.  Сколько дней в феврале? 28-29, да? Часов в сутках? 23-25, как мы определили выше. А вот сколько секунд в часе? 3600, да? Не всегда 🙂 Про високосный год все знают, а как вам високосная секунда?  Но давайте по порядку. В 1972 запустили атомные часы, которые без остановки и прочего булшита отсчитывали по одной секунде каждую секунду 🙂 Их время называется International Atomic Time (TAI) и является, наверное, самой базовой величиной которая у нас есть (да, я говорил, что unix timestamp, но нет). С момента запуска они обогнали UTC на 37 секунд.  Далее есть UT1. Это время, основанное на вращении Земли, в предположении, что каждый новый год наступает ровно в 00:00:00 по UT1. Но! Штука в том, что вращение Земли, во-первых, замедляется, а во-вторых неравномерно и непредсказуемо (!! да, блин! Потому что по ней всякий хлам типа морей, магмы и материков болтается) и в итоге каждый год (по астрономическим наблюдениям вращения Земли) имеет слегка разную продолжительность в секундах.  UTC это компромисс для удобства обычных людей: это тот же TAI (т.е. атомные стабильные секунды), к которому иногда добавляют или отнимают по одной секунде в год, чтобы Новый год наступал как можно ближе к 00:00:00 по UT1 (астономическому).  Пока секунды только добавляли, обычно это делают как 23:59:60 31 декабря или 30 июня. Это происходит нерегулярно, основано на астрономических измерениях и никто заранее не может сказать, когда и сколько их в будущем будет добавлено. Последнюю добавляли в 2016-м.  Как это все переносится на Unix time? А никак 🙂 В Unix time такое понятие не заложено. Если число делится на 3600000, значит это граница часа. Удобно — но также и слегка неправда.  Что же делают компьютеры? Вариантов немного — можно либо повторить 23:59:59 два раза (перевести на секунду назад), либо заморозить часы, либо размазывать эту секунду тонким слоем на целые сутки (вроде Гугл этим хвастался, но не подскажу где).  Именно поэтому Unix time это очень удобная точка отсчета в практическом смысле, но немножко неправда до самого конца. Но на деле — скорее всего, о високосной секунде вам париться не придется. Правда в JVM был какой-то баг на эту тему (скорее всего, что-то про немонотонность часов), и я лично вроде как в 2012-м что-то там из-за этого у нас перезапускал.  Но это слишком редко, чтобы на самом деле имело смысл париться. А немонотонность часов — ну, из-за синхронизации времени они точно так же могут скакнуть назад, так что доверять нельзя никому.  Такие дела. Практически про работу со временем — как только понимашь, что происходит, сразу перестает быть сложно. Надеюсь, гайд вам чем-то поможет. Распространяйте, это может спасти чью-нибудь жизнь 🙂",337
"Интересна психология эпигонства (подражания то есть) в айтишечке.  Например, недавно кто-то показал скриншот Аутлука, и у него там точно такая же настройка внешнего вида, как и у Гмейла — Default, Comfortable, Compact. Как будто успех Гмейла сделал его дефакто стандартом в почтостроении и представить себе почту без этой фичи невозможно. Хотя, конечно, любой сколь-нибудь видевший мир человек легко может себе почту без этой настройки представить, и любому понятно, что она не ключевая для успеха продукта, а более-менее произвольная и вообще связана скорее с историей Гмейла, чем с доменом доставки емейлов.  Roam Research тоже когда выстрелил породил волну клонов. Самое интересное, что они копировали и интерфейс, и реализацию — как и Roam, и Athens Research, и Logseq тоже были написаны на Clojure и использовали DataScript. Хотя казалось бы, как технологии влияют на успех продукта? Правильно, никак — лучший язык тот, который ты уже знаешь. Учить Clojure только ради того, что ее использует твой конкурент? Ну такое. А Athens Research вообще даже структуру названия скопировали. Ну и граф узлов, который никому в здравом уме не нужен, все PKM себе пихают, потому что он в Роме был.  Что я хочу всем этим сказать? Бездумное копирование передает некомпетентность — принимающие решения люди просто расписываются в том, что понятия не имеют, что именно сработало в оригинале и почему. Не будьте такими же, экспериментируйте, меняйте и делайте лучше. Ну или нет, я блогер в конце концов, а не закон.",338
"Купил умный телевизор, подключил к нему плейстейшн, чтобы играть в Dead Cells. Захожу в настройки, а там — хотите «умное соединение» (или как-то так)? Допустим, хочу. В плейстейшне то же самое. Допустим тоже хочу.  Догадываетесь, что из этого получилось, да? Не, о каком-то режиме экрана они там договорились (вроде). Но теперь если включить плейстейшн, включается телевизор. Но плейстейшн включается не мнгновенно, поэтому сигнала нет, и телевизор успевает выключиться. Ну и при выключении выключает плейстейшн. Короче, хуйня.  В обратную сторону, кстати, работает получше — включаешь телек, он включает плейстейшн. Правда, если ты хотел например Ютуб посмотреть (там есть свой андроид какой-то) (UPD: не андроид, webos), то все равно сначала проснется приставка, ты этого подождешь и только потом сможешь в меню уже телевизора перейти. А если еще Эпл ТВ подключить вторым устройством, то вообще не угадаешь, кого телек будет будить в первую очередь.   Интересно, кстати, поэтому ни PS, ни яблочная приставка не выключаются по-настоящему, а всегда в полусне? Потому что с телевизорами не смогли нормально договориться?  Мораль простая. Сложные схемы не работают. Два умных устройства вместе тупее, чем одно. Да, даже в 2022 и даже в топовом ценовом сегменте. Компьютеры были ошибкой, сингулярность наступила и она мне не нравится. Но зато рано или поздно мы все умрем. Хорошего дня!",339
"Не могу с истории с Эплом и Stage Manager на айпаде. Если коротко — Stage Manager это возможность открыть до восьми приложений в трех группах и переключаться между ними. Ну а драма в том, что Эпл сделал эту возможность только для самых новых айпадов на M1, а всех остальных побрил. Да, такие условия, надеемся на понимание.  Скандал, собственно, в том, что какие-то люди пытаются найти этому рациональное объяснение. И у них не получается. А не получается потому, что это очевидно произвольно искуственно введенное ограничение, противоречащее любому здравому смыслу.  «На всех других айпадах эта фича тормозит» — да, но с чего бы? Айпад и мобилки вообще уже давно не сильно ограниченные компьютеры, мой айфон помощнее многих ноутов будет. «У старых айпадов меньше оперативки» — ну да, ну для этого своп и придумали. «Своп не везде есть» — но все-таки на старых айпадах он есть, а stage менеджера — нет (UPD: третье, пятое поколения и Эйр это все самые последние, оказывается. Драма в том, что на M1 не везде есть своп! Ну и еще в том, что почему он, собственно, не везде есть?) Плюс, ну не каждое же приложение по 4 гига отжирает, может я календарь с почтой хочу рядом запускать? Ну и опять же — если они у вас по 4 гига отжирают, то может их починить надо?  Все эти споры упускают главное — открыть несколько приложений рядом и моментально переключаться между ними компьютеры умеют уже лет 30 как. То, что это невозможно на айпаде — позор и стыд, и очевидно не техническое ограничение, а чисто идеологическое. Если айпад был бы компьютером, люди перестали покупать бы макбуки, а Эпл этого, очевидно, не хочет.  Поэтому и вводятся странные «ограничения» — только последний айпад (так и быть, разрешим вам его купить вместо такого же прекрасного и дорогого, но прошлогоднего), только 8 приложений. Откуда эта цифра вообще? Почему 8? Восемь CAD-ов и Фотошопов и восемь чат-клиентов и календарей это две огромные разницы по ресурсам. Если ты можешь восемь CAD-ов, то наверное ты можешь сто приложений погоды?  Это я все к тому, что если вам казалось, что в компьютерах есть какой-то прогресс, что мы все куда-то движемся, то нет, мы изобретаем возможности, которые компьютеры умели 30 лет назад, искуственно ограничиваем их доступность и продаем как «продвинутые» фичи каждый год заново. В железе прогресс да, огромный. А вот в софте какой-то день сурка.",340
"Обожаю, когда в компьютере появляются сообщения со словами «кажется» или «возможно». «Возможно, нужно будет перезагрузиться». «Кажется, что-то пошло не так». «Где-то произошла ошибка».  Это компьютер, алло, на 100% детерменистичная машина. Наверное, можно разобраться и узнать точно, да?   Причем этим грешат не только разработчики, которые вынуждены работать в обход, допустим, кривых или неполных АПИ. Этим грешат и вендоры: Майкрософт, Эпл в собственных операционках, которые они на 100% контролируют. Я установил ваш апдейт с вашего же сайта на вашу же операционку, надо перезагружаться или нет? «Возможно».  Все это в тему того, что мы давно живем на руинах куда более могущественной цивилизации, знания которой безвозвратно утеряны и все что нам остается это может быть где-то красочку подновить.",341
"Почему, кстати, на маках (да и вообще нигде на десктопах) до сих пор нет пуш-нотификаций? Офигенная же идея — приложение не запущено, а новости приходят. Вместо этого в Notification Center складываются оповещения от приложений, которые и так запущены и сами могут их показать. Мне, например, в Слаке пишут раз в месяц, не держать же его открытым ради этого каждый день.  И как раз тот самый случай, когда централизация Эпла была бы уместна — делать такое самому бессмысленно, потому что Эпл тут же украдет идею и отожмет рынок, да и интегрироваться с чем-то стандартным для ОС будут куда охотнее, потому что на это можно будет рассчитывать.",342
"В универе нас сначала учили C++, а когда перешли на Java, мне казалось, что она какая-то ненастоящая: многие вопросы уже решены, сложности упрощены, в чем прикол, в чем состоит работа тогда, если не надо помнить пять видов наследования и шесть видов конструкторов? Любой дурак так может! Потом, конечно, устроился я именно на Java и простоту эту научился ценить.  И вот как-то собеседовали мы чувака, лайв кодинг на языке по его выбору, и он выбрал C++. Надо сказать, что к тому времени у меня уже сложился образ гиперсложности и низкоуровневости вокруг системных языков, который подтверждался и кандидатами, выбиравшими C. Говоришь им — напишите функцию, которая переворачивает строку, а они «а кто ее выделяет, а кто освобождает, а что такое строка» и думаешь ну все, началось.  Так вот, пришел чувак с С++, я уже готов к этим всем вопросам из мира байтоебства, а он вместо этого хоп, хоп, в пять строчек все написал, да еще у него все там автоматически выделяется, копируется и освобождается, все на STL да без единого указателя. Фига себе! — подумал я, но брать мы его конечно не стали. Может и взяли, конечно, я не помню уже, это и не релевантно. Релевантно то, что у меня промелькнула тогда мысль — а может, там в С++ все не так уж и плохо, как об этом рассказывают? Может, жить можно? Вот вроде все симпатичненько и высокоуровнево.  Промотайте еще лет пять, и вот я наконец добрался до С++ сам. Сел писать обертку вокруг Skia, заодно и код самой Skia почитал, и сам для JNI пописал. И вот что имею сказать:  Да, язык C++ поганый, ничего хорошего там нет. Но вот что интересно — это не сразу бросается в глаза. Издалека он создает иллюзию неплохого инструмента, вроде бы все на месте и жить можно. Сложность, да, конечно, но ты всегда думаешь — не буду писать сложно, буду только простые части использовать. Ага, щас.  Так вот, проблема в С++ в том, что он генерирует стабильный и неиссякаемый поток мелких неожиданных проблем. Вроде садишься и думаешь — ну понятно, тут сделаю так и так, вроде все просто, цель видна, дорога прямая. Начинаешь — и тут же спотыкаешься и ломаешь себе ногу.  Причем, что интересно, эти проблемы всегда разные и всегда в неожиданных местах. То бинарную совместимость сломают. То линковка от порядка зависит. То шаблон не работает. То память прозевал. То система сборки. То Виндоус. Все время что-то разное, и все время непредвиденное, и все время вроде и не сломанное прям совсем, а где-то процентов на 20%, так, чтобы опытные говорили «чинить не стоит», а новички где-нибудь да и споткнулись. Ну как новички — Гугл тоже не блещет, а у них эта кодбаза на полмира раскатана.  Как пистолет в штанах, короче. Вроде и носить можно, но чисто статистичкески каждый рано или поздно яйца себе отстрелит.",343
"В прошлом посте я наехал на С++, но на самом деле почти то же самое могу и про JS рассказать. Вот ровно та же ситуация: вроде бы язык развивается, толпы народу на нем пишут, и каждый раз думаешь: ну что такого может случиться? Напишу пару экранов кода, поди не сломается.  Конечно, сломается. То array-like объект подсунут вместо массива и он печально далеко пройдет от места создания, то массивы сравнить нельзя, то мап нормальных нет и люди складывают в объекты, забывая, что там уже лежат дефолтные поля, то нормальные мапы добавят, но теперь они не сериализуются, то переменная в лямбду по ссылке захватывается, то for итерирует по индексам вместо значений, то сортировка переводит каждый int в строку, то DOM.  Все это мелочи, конечно, но из мелочей и складывается впечатление. Садишься программировать, а в итоге едешь как на велосипеде с квадратными колесами — тук-тук-тук, тук-тук-тук. А что вы хотели от языка, где даже стандарты не смогли нормально назвать и каждого двойное название, отличающаеся на единицу (ES2015 == ES6, ES2016 == ES7 и т.д.). Ой, в примере в скобках надо было тройное равно, ну вы поняли.  Как говорил Конфуций: если тебя просят писать на JavaScript — отруби себе пальцы.",344
"Смотрел сейчас интервью, где «директор Яндекса по взаимодействию с разработчиками» закапывает компанию еще глубже, и там промелькнуло — совсем не по основной теме — забавное наблюдение.  Он говорит: «хуже всего менеджеры, которые когда-то давно были программистами и которые считают оценки текущих программистов завышенными. “Да я это на ПХП за два часа в свое время сделал бы”, “компилировать джаваскрипт — зачем, это же интерпретируемый язык” и т.п. Такие менеджеры не понимают, что ситуация изменилась, что технологии изменились».  Все так. Технологии изменились, и изменились в худшую сторону. То, что раньше было просто, теперь сложно. То, что раньше работало просто так прямо из блокнота, теперь требует «инфраструктуры».  И никто об этом не говорит. Вообще удивительно даже, как при всей предполагаемой склонности программистов к «точным наукам» и «инженерному подходу» никому в голову не приходит замерять какие-то объективные показатели типа скорости работы команды или там приложения и задуматься: а че все так плохо-то стало? Куда мы свернули?",345
"Решил на днях потестить ClojureScript компилятор. А ему нужен какой-то JS движок. Ну, думаю, возьму JavaScript Core, его вроде даже ставить особо не надо (хрома у меня нет).  Гуглю, мне говорят: поищи в /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc  Ну я ищу. И что? Нету. А где есть? А вот тут рядом: /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Helpers/jsc  И из вот этого и состоит работа программиста. Да, я могу крутить в голове сложные многомерные концепции, могу заставить компьютер переваривать гигабайты данных, могу решить двадцать бизнес-задач в день, но вместо этого сижу и гуглю, куда в очередной раз очередная компания в очередной раз что-то переложила.  Как по-вашему, стало лучше? Логичнее? Стоило изменение всех тех человеко-лет, которые программисты по всему миру потратят, чтобы продраться через устаревшие только в этом году ответы и либо догадаться, либо найти новые?  Другой случай — homebrew. У меня там лежит Fira Code, но не в самом репоизтории, а в некотором соседнем, называемом cask. И раз в год мне кто-то приходит в issues, чтобы сообщить, что «концепция опять поменялась» и старая shell-команда не работает и писать теперь надо по-новому.  Показательнее всего, конечно, пример Майкрософта, которые перекладывали Visual Studio в разные папки столько раз, что в конце концов им пришлось написать утилиту, которая знает как ее правильно искать.  Никто не умеет в обратную совместимость, а между тем это страшная сила. Потому что подобные изменения в 99% случаев — мелкая вкусовщина, которая и секунды замешательства не стоит.",346
"Про деврела Яндекса Сергея Бережного и его интервью в Мы обречены, на случай, если кому-то что-то все еще неоднозначно, надо, я считаю, проговорить.  Яндекс это по определению компания, бизнес которой строится на слежке за пользователями. Так же как и Гугл, они продают рекламу, и чем больше ты следишь за людьми, тем реклама точнее попадает в пользователя, а значит дороже продается.  Этично ли работать в такой компании, когда правительство твоей страны все туже затягивает гайки? Это вопрос из заголовка видео, если что («Этично ли теперь работать в Яндексе?»). Ответ — нет. Не этично.  «Но если мы просто делаем свою работу и не думаем, как она будет использоваться?» «Что если террористы возьмут Fira Code?» На это хорошо ответил Лев Валкин:  > Про «разработчики ни при чём». Если ты — мастер, делаешь крафтовые ножики, и один из них купил бандит, ты ок. Если твоя лавка в бандитском районе, чёткий customer liaison на зарплате, и в Джире отдельная категория для бандитских хотелок — ты моральный урод, мастер.  В интервью Сергей еще говорит, что у них внутри особая атмосфера, пузырь, оберегающий сотрудников от внешнего мира. Он, кажется, говорит про это как что-то хорошее, но это же очевидно очень плохо? Это розовые очки, иллюзия и инфантильность, делать и не думать, зачем, для кого и что из этого получится. Это то, что надо исправлять, а не хвастаться.  Еще он много говорит про цели, принципы и задачи, но не ведитесь — это чистое словоблудие. Мало ли какую ты себе когда-то задачу поставил, если ситуация изменилась, надо ее пересмотреть, а не долбиться в стену, следуя неактуальным принципам. Другими словами, надо говорить не про то, что принципы есть, а про то, какие это за принципы и адекватны ли они сейчас.  Что делать сотрудникам Яндекса? Увольняться, епта. Я понимаю, допустим там, хирургу или пилоту может быть нетривиально найти новую работу. Но для программиста-то это тривиально! Понятно, что скажем остановить Яндекс может быть сложно, но это на уровне целой компании. А на уровне индивидуального сотрудника, особенно если саботировать работу слишком большой риск, достаточно просто не помогать, не участвовать в этом — это уже огромный вклад. Ну а если уволятся все, то и Яндекса не станет.  «Если это не сделаем мы, то сделает кто-нибудь другой». Никогда не понимал этой логики. Может быть сделают хуже, может быть дольше, может дороже, а может и вообще не сделают. В любом случае этот шанс лучше, чем если ты сделаешь сам, быстро, качественно и наверняка.  Сергей утверждал, что Яндекс пытается предотвратить использование его технологий во зло. Это интересная мантра для самоуспокоения, конечно, но пока что действительность противоречит этой желаемой картине мира. Яндекс.Новости все еще путают граждан на главной, создавая необъективную картину конфликта. С перспективой продать их новому, более беспринципному владельцу, то есть буквально — передать злодеям технологию военной пропаганды. Хз что у них там за принципы такие, но действия говорят сами за себя.  Потом Сергей пришел ко мне в реплаи и показал, как Яндекс.Браузер внедрил цифровые сертификаты правительства РФ. Якобы, это тоже демонстрация нейтральности Яндекса и их политики «невмешательства». Не знаю, только мне кажется, что это идеальная заготовка для отключения интернета? Без Яндекса внтури страны перестал бы работать HTTPS, а с Яндексом не перестанет, а значит, мы еще на один шаг ближе к чебурнету.  Но самое веселое, что когда ему на все эти примеры указали, он сказал что нечестно судить компанию по результатам, а судить надо по намерениям. Например, если я убил человека, чтобы накормить собачку, то я в общем-то и не виноват? В общем, какой-то совсем просветленный человек.  У Яндекса цель сохранить Яндекс. Но как насчет мысли, что именно это и может быть аморально само по себе?  UPD: Кстати, этот человек в интервью сказал, что повсеместная слежка, как в Китае, это благо для общества. И что Яндекс сделает ее даже лучше. Я не передергиваю, реально так сказал. Ну чтоб вы понимали.  UPD2: Не слежка, а социальный рейтинг, если быть более точным",347
"Многие пришли в программирование, потому что хотели делать игры.  Я и сам такой. На самом первом моем в жизни собеседовании меня спросили про опыт, я сказал «ну вот пару игр написал», а мне «зачем?». И я впал в ступор. Потому что объяснить это нормально довольно трудно. То есть сейчас я бы конечно что-то остроумное ответил, типа «а что мне еще писать в 15 лет, систему покупки жд билетов что ли?», но тогда я был по-скромнее.  Ну в общем. Наверняка у вас была/есть идея игры, которую вы хотели сделать. Вот расскажите эту идею в комментариях в двух словах.",348
"Когда-то давно компьютеры были большими и неудобными, программировались отверткой (неточно) и перфокартами и вообще быстрее было на линейке все посчитать, чем просить компьютер.  Естественным следствием такого подхода стала оптимизация: раз места мало, надо экономить. И когда люди придумали языки высокого уровня, то есть просить компьютер что-то сделать на буквально человеческом языке (ну как человеческом — на английском), программы все равно компилировались, то есть очищались от всего человеческого, слишком человеческого и превращались в машинный код.  И в результате как-то так повелось, что каждая программа существует в двух видах — удобном человеку для чтения и удобном машине для исполнения. Это все прекрасно, а вот ужасно то, что во времена маленьких и экономных компьютеров эти два представления устаканились как некое фундаментальное свойство (котором оно, конечно, не является) и возникла идея их распространять эти части независимо друг от друга. Код — на sourceforge, бинарник — на ftp.  Ну а когда возникло разделение, в нем, как и в любом нетривиальном месте, начала копиться сложность. Скачал исходники? Бинарь получить не так-то и тривиально. Скачал бинарь и что-то пошло не так? Извини, все названия вычищены, как насчет a12.b778(c213)? Что значит непонятно? (Утрирую, конечно. В реальности названия ЕЩЕ ХУЖЕ)  Короче, мысль. Компьютеры уже давным давно могут хранить и обрабатывать не то что код всех ваших программ, а вообще всю сумму накопленных человечеством знаний и при этом помещаться в кармане.  И вот эта идея разделения, что исходники — отдельно, а бинарники — отдельно, и между ними есть нетривиальный шаг трансляции с потерей информации, она на самом только делает очень неудобно всем участникам, причем в обе стороны. Более того, она уже давно ничем вообще не обусловлена, кроме привычки.  Программы на языках будущего будут распространяться только в исходниках. Вот как JavaScript. В смысле компилируется и минифицируется? Опять джаваскриптеры пошли против прогресса и добровольно делают себе больно.  UPD: Если что я нигде не топлю за отказ от компиляции и интерпретацию. Почему-то многие так этот пост поняли. Я только говорю, что отрезать от программы исходники — неудобно, глупо и не нужно",349
"К предыдущему посту было много критики, так что давайте отвечу.  Многие решили из поста, что я предлагаю отказаться от компиляции вообще. Не предлагаю, но возможно недостаточно ясно это сформулировал. Я предлагал при компиляции не удалять исходники и прочую полезную для дебага информацию типа имен переменных и функций.  Было много передергиваний типа «тупо компилировать хром при каждом запуске». Ну да, но я же не предлагаю этого делать. Можно компилировать один раз при запуске или вообще один раз при сборке. И я уж точно не предлагаю это делать для C++. Надеюсь, в светлое будущее его не возьмут, а возьмут только языки с быстрой компиляцией.  Было мнение, что люди не готовы тратить место под дебаг информацию и что компиляция это такой способ компрессии. Ребят, люди готовы качать по триста мегабайт электрона только ради того, чтобы у них в доке появилась иконка. А могли бы получить точно такой же слак или спотифай в браузере за ноль мегабайт. Место давно никого не парит, очнитесь.  Также высказывались опасения, что поставка с исходниками осложняет обфускацию. Но дело в том что обфускация — только случайный побочный эффект компиляции. Это как говорить, что автоматическое оружие хуже револьвера потому что на нем нельзя играть в русскую рулетку. Плюс многие языки уже работают по модели поставки в исходниках, и ничего, коммерчески вполне успешны. Просто обфускация станет явным шагом.  Что еще было? Что исходников недостаточно? Ну так и я не полную картину будущего рисую, а только один аспект.  Было также мнение, что мои посты поверхностны и не анализируют проблемы глубоко. При этом люди спорили не с тем, что предлагал я, а с какой-то своей формулировкой, с которой им было удобно спорить и передергивать. Ну что ж, могу сказать одно. Мне приятно, что вы все еще меня читаете",350
"Ну а вообще я уже второй день угораю с сервиса, который по текстовому описанию нейронкой генерирует регэкспы. Естественно, неправильные. Причем ребятам настолько пофиг, что они прям на сайт прям самым первым примером неправильный ответ написали. Но твиттер бегает весь и восторгается.  Это примерно как с копилотом, который я тоже кстати недавно попробовал. Код это область где надо быть предельно точным, а нейронки это инструмент, который делает все примерно и на отъебись. Самая суть программирования как раз в переводе с неточного человеческого языка на точный машинный. «Отец избил сына, потому что он был пьян». Кто должен эту двусмысленность разрешить? Уж точно не компьютер. Зачем в этой цепочке дополнительный глухой телефон посередине — фиг его знает.  Но, если подумать, я много чего в современном мире не понимаю. И не то чтобы я прям не видел неправильного кода в продакшне. Так что если программистов заменят, всегда останется работа корректором",351
"Решил посмотреть, что там у гейм девелоперов, насколько отличается от нашего «взрослого» программирования.  ООП не работает. То есть работает, конечно, но скорее на вспомогательных ролях.  Что вместо ООП? Entity Component System — это когда к сущности ты можешь прикрепить сколько угодно «состояний» и они все будут одновременно работать. Допустим, делаешь противника — дал ему спрайт, чтобы рисовался, коллижн бокс, чтобы толкался, скрипт чтобы решения принимал. У стены, например, в другой комбинации — спрайт с коллижном, но без скрипта. А у камеры скрипт, но нет спрайта. Короче, тут нужна гибкость, а иерархии — вещь совсем не гибкая.  Глобальное состояние хорошо. Наверное, можно передавать параметрами «игру», «игрока», «камеру» только в те методы, где они нужны, чистое ядро и мутабельную оболочку, но... зачем? Ты заранее знаешь, что это все будет в одном-единственном экземпляре, так что выделываться тут не перед кем, а глобальные переменные все еще чертовски удобны. Ну да, будет каша, но это одна-единственная каша, которая никуда за пределы этой игры не убежит. Почему нет?  Вспоминается эксперимент с Eve, как они опрашивали обычных людей и оказалось, что параметры функций люди понимают плохо, потому что абстракция, а вот конкретные значения, лежащие по конкретному глобально доступному адресу — хорошо. Ну типа как в Экселе, ты пишешь =SUM(A2:A10) и тут вполне конкретные индексы, а не x и y. А почему, собственно, и нет? Особенно когда платят за результат, а не за абстракции.  Вообще не только глобальное состояние, но и конкретика тоже. Игры максимально конкретны — скорость игрока, дальность прыжка, урон меча — все это загружается не из конфига или БД, и писать код под то, что эти значения вдруг могут оказаться любыми — ну, нет смысла. const speed = 100 и вперед. Просто == хорошо. Конкретное >>> абстрактное.  Во многом игры это про организацию информации. В жизни программы бывают разные, но сложность часто либо в алгоритме, либо в том, чтобы сделать красиво. А вот в игре, даже самой тривиальной — тонны информации. Позиция, размеры, параметры, связи, уровни, акторы, пули — все это объекты, причем довольно жирные. Оптимизировать, конечно, это все тоже иногда надо, но по ощущениям просто все это завести, организовать и менеджить уже нормальная такая работа.  Объекты отвечают сами за себя. Игрок ударил монстра — где должна быть прописана эта логика? На монстре — потому что монстров много, а игрок один. Свои скрипты есть у оружия, камеры, врагов, пуль, стен, короче, у всего на свете. Пуля сама знает, как себя двигать, а когда прилетит — сама себя удалит. С одной стороны не по-функциональному, а с другой удобно — код размазывается по маленьким изолированным кучкам.  Мутабельное состояние. Очевидно, без него никуда. Быстро и просто — если делать «правильно», то замаешься искать и передавать все зависимости. Все (потенциально) влияют на всех, так что единственный разумный интерфейс — update(world: World) -> World. Кошмар юнит-тестера, но что поделать.  Технологии, внезапно, выглядят очень солидно. Например, в Юнити есть live editor/debugger — запускаешь игру и в редакторе видишь все объекты, которые сейчас созданы на сцене, со всеми их внутренними свойствами, обновляющимися в реальном времени. Можно даже их менять, и это отразится на игре. Это все на запущенной программе, если что. Даже live reload какой-то есть, как будто.  Визуальная сторона тоже на высоте. В коде игру не напишешь, поэтому редактор кода в движках занимает одно из последних мест. Юнити вообще без текстового редактора идет! Зато визуальных редакторов полно на любой вкус — тайлы, анимации, сцены, и все это не в json-е, а визуально, наглядно.  Вообще есть в этом что-то освобождающее. Когда тебе не надо никого впечатлять кодом и можно писать максимально просто и тупо, потому что впечатление должен производить результат. music.play(). if (left) x -= 1. Как будто снова в школе, а программирование снова fun.",352
Съел ОЧЕНЬ сладкий арбуз. А как у вас дела?,353
"Времени мало, поэтому на бегу. Поучаствовал в GMTK Game Jam и даже доделал игру в этот раз. Но пост не об этом. После того, как все закончили, начинается неделя голосования, где тебе нужно ходить и оценивать игры других (шутка ли — 20000 участников, 6000 игр!). Собственно, хожу и оцениваю.  И вот что я думаю. Игра это приложение. Выложить ее можно в виде сборки под Windows, Linux, macOS или в виде iframe-а для веба. В последнем случае ты просто заходишь на страницу игры на itch.io и играешь. Большинство готовых движков умеют паковать все четыре варианта. Понятно, что для формата геймджема идеальный вариант это веб — нажал на ссылку, поиграл, закрыл и забыл.  В противном случае (на маке) ты качаешь zip, разархивируешь, запускаешь app, видишь предупреждение gatekeeper, запускаешь system preferences, находишь security, нажимаешь allow, видишь еще одно предупреждение, нажимаешь open и наконец-то попадаешь в игру. Идиотизм? Идиотизм. Более того, не у всех есть мак, соответственно не все под него собирают и во многие игры я тупо не могу поиграть вообще никак.  Ну а теперь собственно вопрос: а нафига нужны три остальных варианта, которые не веб? Зачем мучаться со сборкой под винду, линукс и мак, если тот же результат можно получить тупо на веб-странице?  Но еще более интересный вопрос — почему, собственно, все эти четыре способа так сильно друг от друга отличаются? Ведь по сути ты получаешь ИДЕНТИЧНЫЙ результат во всех четырех случаях — прямоугольное окошко, в котором с попиксельной идентичностью на всех четырех платформах выводится одно и то же.  Более того, это происходит на одних и тех же процессорах и одних и тех же видеокартах. Просто именно тут бессмысленность процесса «сборки под платформу» показала себя наиболее ярко. А когда вспоминаешь, что какие-то игры работают там, но не работают тут, еще больше расстраиваешься — никаких принципиальных препятствий нет, просто кто-то не упаковал бинарник как надо. Там даже переделывать особо ничего не пришлось бы, это просто другие соглашения об одном и том же.  Вы мне скажете — ну да, поэтому мы веб и любим. Для тебя же, Козлов, веб ассемблер сделали. С одной стороны ну да — WA и WebGL/WebGPU это как раз те абстракции, которые должны были бы предоставлять нам операционные системы, но НЕ ДОГОВОРИЛИСЬ.  Но печалит меня не это. Мне решительно непонятно, а почему бы, собственно, что-то типа web assembly не использовать для распространения нативных приложений? Формат универсального бинарника, который работает одинаково на всех платформах as is. Почему я не могу в условном маке открывать нативные приложения из стора так же легко, как веб-сайты? Зачем вообще этот процесс «установки»?  Я понимаю, что WA это оно примерно и есть, и единственное, что мне тут не нравится — это браузер. WA круто, но вот браузер там нафиг не нужен.",354
"И еще по поводу гейм джема. В 100% юнити игр, которые не осилили выложить как веб, но у которых есть мак-версия, люди паковали вместе с игрой папку “DO_NOT_SHIP“. Да, Юнити ее зачем-то создает и очевидно люди складывали ее в дистрибутив слишком часто и вот так вот ее пришлось назвать. Но не все поняли намек и продолжают ее шиппить.  Вы скажете — ха-ха, тупые. Ну, знаете, как профессиональные программисты смотрят свысока на «юзеров» и тайно (а иногда и явно) презирают их.  И вот этот элитизм я очень не люблю. То, что человек не готов треть своей жизни отдать сидению за компьютером и ковырянии в больном сознании людей, которые их делают, не делает его автоматически тупым. Вы вот не сможете, скажем, пломбу поставить или авиалайнер посадить, но это же не делает вас тупым, да? Недавно в чате был пример, что Svelte в новой версии переименовал svelte.head в sveltekit.head, а get в GET и это нужно чинить. Как знание этого идиотского факта связано вообще с когнитивной функцией? Это просто рандомный факт, придуманный пяткой правой ноги от скуки и экспертиза в нем не сделает из вас Каспарова или Энштейна.  А айти процентов на девяносто ровно из таких фактов и состоит. Да, есть процентов 10 каких-то фундаментальных принципов, а все остальное — у кого-то когда-то закончилось место на дискете и он завел новую папку /usr или назвал вызов creat вместо create, а мы до сих пор с этим живем и даже пытаемся на это какие-то смыслы натягивать. Жопа лошади, определяющая размер космического корабля (погуглите).  Ну и возвращаясь к примеру — в данном случае проблема явно у Юнити, а не у людей. Штука еще в чем — ты можешь, конечно, мечтать о умных, тонко чувствующих, никуда не спешащих пользователях, у которых первый приоритет — разобраться с тем инструментом, который ты для них делаешь.  Но люди, очевидно, не такие, и других людей нет. Так что в конечном итоге ты работаешь не для людей, которых тебе хотелось бы видеть, а для самых настоящих, занятых, невнимательных, с другими интересами, конечным количеством времени и нормальной человеческой, а не программистской, логикой.  Поэтому если кому-то что-то непонятно — поменять этого пользователя на другого, увы, не выйдет, и надо чинить продукт. Если совсем наглядно — проблема с папкой DO_NOT_SHIP есть только у Unity, а все остальные движки как-то ее решили и не мучают своих клиентов этим идиотизмом.  Это иллюстрирует, что все возможно, стоит только этого захотеть. Но не все могут захотеть.  UPD: Оказывается, CEO Unity _буквально_ назвал some game developers «biggest fucking idiots». Я этого не знал, когда писал пост, но как же это гладко ложится, даже жутко",355
"Кстати, при всех триллионах долларов, которые Юнити зарабатывает, у них стабильно хреновый экспортер в html. То шрифт не увеличивается, то ретина не учитывается, то в экран не влазит, то кропается по краям. Хотя засунуть прямоугольник в прямоугольник — то, что компьютеры умеют лучше всего вообще не напрягась.  Очередное доказательство, что чем больше денег, тем хуже продукт, т.к. меньше мотивации стараться",356
"А давайте познакомимся? Чем занимаетесь, где живете, на чем программируете (если программируете), как давно?",357
"Знаете вот эту вот «инсталляцию» софта? Типа мы такие вот сложные вещи делаем, что просто скопировать бинарник нам недостаточно.  Какое-то время я тоже верил, что это знак «навороченности». Но на самом деле это признак лени и слабости.  Когда я игрался с движками, первым делом скачал Юнити. Это приключение на полчаса: найти на сайте, зарегистрироваться, получить ссылку, скачать лаунчер, запустить лаунчер, он установит сам Юнити и еще какие-то компоненты, запустить Юнити из лаунчера и только тогда уже можно что-то начинать делать. И да, все это время у вас будет запущено два приложения.  А потом решил попробовать Годо и удивился: заходишь на сайт, жмешь «скачать», запускаешь и работаешь. А что, так можно было?  Сегодня попался на глаза мой старый пост про Syncthing. Тогда он тоже меня поразил после Дропбокса: в первом надо штук двенадцать окон пройти, включая создание аккаунта, чтобы он просто начал работать. А Syncthing просто ставится и запускается одной командой без какого-либо геморроя вообще. То есть он НИЧЕГО не спрашивает, даже, блин, аккаунт создавать не надо.  Похожая философия у Zig: один бинарник, который может скомпилировать и собрать что угодно куда угодно откуда угодно. В отличие от, скажем, Питона, который полсистемы тебе засрет, что-то куда-то пропишет, залинкует, свяжет, положит, попросит и потом сам не сможет найти.  Короче, мораль: любую задачу можно решить нормально и удобно для пользователя. Но если станешь сильно популярным, придут менеджеры, насуют фич и энгейжмента, сделают инсталлятор и аккаунты и будут усложнять до тех пор, пока даже самые непривередливые пользователи не сбегут, плюясь.  Помните: для нормальной работы ничего, кроме одного-единственного бинарника, не нужно. Для любой задачи. Все, что сложнее — от лукавого и делается не в ваших интересах.",358
"Я помню, как начинался твиттер: с сообщений на 140 символов. Нужно ссылку? Ее длина считается в эти 140. Картинку? Ссылкой. Ретвит? Нету их. Как и лайков. Даже реплаев, кажется, не было. Можно было поставить ссылку на чужой твит или просто тегнуть кого-то. Кстати, длина ника тоже считалась в лимит символов, так что отвечать людям с короткими никами было проще.  И вот люди начали этим пользоваться. Им понравилось. Кажется, твиттер «открыл» некую неудовлетворенную потребность.  Но были и неудобства. Например, длинные сслыки ограничивали длину самого сообщения. Так появились сокращатели ссылок типа bit.ly. Да, именно для твиттера, причем как сторонние сервисы, никакого отношения к компании Твиттер не имеющие.  Потом людям захотелось делиться контентом. Появилась идея ретвитов: ты как бы «вставляешь» в свою ленту твит другого человека с указанием авторства. Выглядело так: «RT @nikitonsky <контент оригинального твита>».  Кстати, я до сих пор считаю это самой удобной, честной, понятной и естественной моделью распространения в соцсетях: ты сам явно и недвусмысленно решаешь, что увидят твои читатели, сохраняя полный контроль над своим фидом. То, как работает discovery в других соцсетях и почему оно не везде сделано точно так же я до сих пор не понимаю.  Но самое главное — эту модель открыли пользователи! Формат с буквами RT и ником придумали не в компании Твиттер, ее придумали те, кто соцсетью пользовался.  К чести компании, первое время они наблюдали естественное поведение пользователей и только потом добавляли его поддержку. Как дать людям сначала протоптать тропинки, а потом проложить тротуар. Реплаи и ретвиты стали функцией платформы, потом встроили сокращение ссылок, ники в реплаях перестали считать в лимит символов, добавили треды, стали показывать картинки инлайн. Это было круто, потому что люди делали это и так, сами собой.  Где-то тут закончилась золотая эра. Переломным моментом стало переименование звездочек в сердечки. Звездочки де факто использовались как закладки — что-то, что ты хочешь посмотреть позже. И вот руководство твиттера решило, что это неправильно, и переименовало их в сердечки. Почему? Да хз. Работали они точно так же, только выглядели по-другому.  Но беда не пришла одна — одновременно с переименованием лайки стали появляться в ленте. То есть мне (лично мне) что-то понравилось и это вдруг видят мои подписчики. Но не со 100% вероятностью, а с какой-то рандомной. Может кто-то увидит, а может и нет. Был небольшой скандал, но пришлось смириться. По сути из лайков сделали ненадежно работающий ретвит, причем ретвит тоже оставили. Зачем? Почему? Где логика? Зачем повторение функций? Да хз.  Дальше сделали алгоритмическую ленту, т.е. ты видишь рандомные твиты в рандомном порядке вместо линейной ленты. Тут лайки конечно пригодились чтобы совать тебе «популярный» контент, но изначальную идею «подписываюсь на людей» это убило. Теперь ты заходил в твиттер, чтобы почитать «что-то», причем «что» решал за тебя алгоритм компании. Мы знаем лучше, потому что у нас машин лернинг.  Потом пошел совсем уж треш — nft-аватарки, какие-то списки, подкасты, короче, идея платформы совсем размылась. И вот сегодня я увидел в своих нотификациях (святое место, куда я захожу узнать, ответил ли мне кто-то) уведомление о ретвите. То есть то, что я и так уже вижу в ленте, я увидел еще и в нотификациях. Зачем? Почему?  Видимо, это как-то повышает engagement или какие-то другие KPI. Но я как-то скучаю по соцсетям, где сам решал, что мне читать, и если решил, хочу получать 100% контента в предсказуемом порядке. Это было управляемо, и это было понятно, и это делалось вслед за тем, чего на самом деле хотели пользователи.  Теперь же, когда Твиттер.ком взялся изобретать модели потребления сам, а не помогать тому, что люди и так делают, получается гораздо хуже — фигня, паразитирующая на базовых инстинктах людей и искуственно завышающая привязанность. Открывать продукты хороошо, а манипулировать — ну такое.  UPD: Хэштеги тоже пользователи придумали",359
"Чем дальше, тем меньше понимаю компьютеры. Становлюсь дедом, да. Айфон-виджет, который показывает события календаря на неделю, до сих пор не может найти событие, которое я добавил сегодня утром. В календаре даже есть. В виджете — нет.  И ладно, что нотификации прячутся я еще кое-как смирился, они, наверное, для людей, для которых нотификации это белый шум от миллиона приложений, а не тщательно фильтруемый белый список того, что мне действительно интересно, туду-лист, с которым действительно нужно работать. Просто фича делалась не для меня, я это могу понять.  Но календарь??? Это же всякие бизнес-чуваки должны прям серьезно на это полагаться, как он может не работать? Прикинь пропустить встречу, потому что посмотрел в виджет и там было пусто?  Например, я могу попросить жену, чтобы она напомнила через неделю, что я записан к врачу, и если она вспомнит и будет рядом, это, в принципе, немного увеличит мои шансы не забыть. Но не доведет их до 100%. Поэтому, блин, мы и пользуемся внешними инструментами! Потому что они что-то нам там гарантируют, потому что на них можно положиться.  А компьютеры все больше идут в сторону каких-то вероятностных моделей: может напомнят, может покажут, может не забудут. Положил файл в iCloud, он с 50% вероятностью удалится с локального диска. Открыл вкладку на мобиле? Она с какой-то вероятностью засинкается на комп. Настроил нотификацию по месту, она может выскочит, а может и нет. Я уж не говорю про всякие фотки, которые придут хрен знает когда и хорошо если вообще придут. В чем прикол?  Качественный скачок полезности начинается именно там, когда на вещь можно положиться и выкинуть ее из головы на 100%. Я чем дальше, тем больше начинаю скучать не по умным, а по тупым инструментам, модель работы которых я могу себе представить и которые работают как часы за секунды. Положил файл — через три секунды он есть на всех твоих синхронизируемых серверах. А не вот это вот «ждал полдня, пока облака договорятся». У компьютера не должно быть дел более важных, чем то, о чем я его явно попросил. Eventual Consistency хорошо только для данных, которые никто не видит, а то, что я ввожу руками, должно быть immediately consistent.",360
"У мака есть очень удобная встроенная запись экрана — и скриншоты, и видео. Настолько удобная, что я никогда даже и не искал альтернатив, всегда ее хватало.  И что вы думаете? В одном из последних апдейтов ее испортили так, что она теперь начинает писать через три-четыре секунды после нажатия кнопки.  То есть понимаете, да? Есть функция, которая прекрасно работала. Мы знаем, что она может работать мнгновенно, потому что она всегда работала мнгновенно в тех же условиях с той же функциональностью.  И вот выходит апдейт и теперь чтобы раздуплиться ей нужно три секунды. Бесполезно спрашивать зачем, потому что ответ очевидно «незачем», мы знаем, что это тупая бессмысленная работа, возможно, результат ошибки.  Но сколько еще таких примеров вокруг нас, сколько программ, которые работают медленно или запускаются долго, про которые мы не знаем, как они _могли бы_ на самом деле работать? Наверняка миллионы.  Джонатан Блоу недавно ругался на нотификации в Стиме и сказал такую фразу «если Valve хочет, чтобы Стим мне нравился, пусть они починят нотификации, а не заставляют это делать вручную меня. Но это при условии, что они все еще сохранили достаточно контроля над ситуацией, чтобы это сделать».  Так вот, мы как раз и вошли в мир, где у больших компаний пропал контроль над собственными продуктами — они могут делать инкрементальные изменения поверх, но не могут всерьез чинить или передылвать то, на чем они стали популярными. Просто отсутствует экспертиза, а сложность выросла настолько, что никакими вменяемыми путями этот корабль уже не повернуть. Никто не в состоянии всерьез написать новый браузер или переписать старые панели управления под новый дизайн. Работает — не трогай, но беда в том, что трогать не получается, даже если от этого зависела бы судьба компании.",361
"Не перестаю поражаться современным технологиям. Вот Вотсапп пришел на смену СМС-кам, да? Казалось бы, что-то должно было стать лучше? Должно, но раньше было как? Встретил кого-то, решил обменяться телефонами, продиктовал номер, получил сообщение и готово.  А с вотсаппом как? Встретил кого-то. Стоите оба с телефонами. Открыли вотсапп. Тупите. Что дальше? А ничего.  Открывай телефонную книгу (что это вообще? я туда раз в год может быть захожу, вообще в душе не знаю, что там и где). Вбивай номер. Указывай имя (какое?) Потом иди в вотсапп. Пытайся создать чат. Не нашел? Может, опечатался. А может номер как-то не так вбил. Не в том формате. Или код страны забыл. Но проверить-то нельзя, он или появился, или нет. Может быть книга не засинхронизировалась. Может быть вотсапп на другой номер привязан. Не хочешь палить свой номер? Сорян, придется.  Короче, идиотизм, натуральное шаманство — пошевели в одном месте и надейся (!) что боги окажутся милостивы и в другом произойдет то, что тебе нужно. Опять же, никаких гарантий, но, может быть, повезет.  А поменять номер? Если меняешь сотовый, то все, у кого он был записан, тебя потеряют — это понятно хотя бы, с технической точки зрения. Но все, кто писал тебе в вотсапп, тоже тебя потеряют! Почему? А просто because fuck you, that’s why. Никакой другой причины тут нет.  Понятно, зачем это нужно фейсбуку — чтобы подглядывать в твою телефонную книгу регулярно и заводить твой профиль на фейсбуке без твоего ведома. Но люди-то как это терпят? Невозможно же вообще, в 21-м-то веке!  То ли дело ICQ! Девять цифр — все, что тебе нужно. Прям в заголовке окна написаны. Ты всегда их знаешь. Ни к чему не привязаны, кроме самого ICQ. Никакой магии. Вот это был прогресс. А телефоны — шаг назад какой-то.",362
"Прочитал классный рассказ Леонида Каганова «Когда меня отпустит». По сюжету двум студентам дают экспериментальный «анти-наркотик». Если наркотики меняют восприятие, но не трогают реальность, этот препарат наоборот — восприятие не трогает, а реальность меняет.  Ну и вокруг них начинает все более дикая дичь происходить: сначала окна в больнице оказываются странно заколочены, потом доктор болгаркой выпиливает окна у автобуса, больница внезапно называется НИИ ЦКВГФСБСВП, на рекламных щитах написано «НЕ ХОЧЕШЬ ТАКОГО СОСЕДА?» и «ЖДЕТ РЫБА», по дороге мужик катит матрас, в маршрутке все пассажиры оказываются такжиками с черенками от лопат, водитель использует кочан капусты как оберег. Классная филипдиковщина, короче, мой люблимый жанр.  Это я к чему? Рассказ как нельзя точно передает ощущения от мира в послендее время. Например, я недавно в первый раз в жизни посмотрел кино с блюрей-диска. И что вы думаете? Непропускаемый трейлер в начале. Как в кино — пришел, смотри рекламу. На диске, который я сам же и купил! Ну или вот заголовок, сравните с безумием в рассказе: «Google Meet meets Duo Meet, with Meet in Duo but Duo isn’t going into Meet». По-моему, очень похоже. Только это не фантастика, это все происходит на той же планете, где и мы с вами, прямо сейчас.  Потом я решил полистать, собственно, ленту твиттера. Нашлось: Ford патентует устройство, предупреждающее пешеходов, что их самоходная машина собирается их переехать; Медведев обещает отомстить за блокировку YouTube-канала Гоблина; драйвер клавиатуры требует аккаунта; Эпл внедряет принудительную секундную анимацию перелистывания в Books; Gitlab собирается удалить все старые бесплатные репозитории; компания катится в трубу, но продолжает упорно внедрять только изменения с положительными А/Б тестами; NPM пакет, который грузит главную гугла и переводит через нее валюту; Windows открывает локальные папки по несколько секунд; компания покупает успешный сервис с командой, увольняет их и заменяет джунами-индусами, виджет часов показывает неправильное время, а Андроид может заснуть и пропустить будильник. Я уж не говорю про количество NaN и Undefined в ленте. И это только за три дня! Психбольные захватили руководство больницей и делают что хотят, а все вокруг ходят, занимаются своими делами и делают вид, что так и надо и никакого безумства не происходит.   Когда уже отпустит, а?",363
"Я все никак не смирюсь, насколько сложно современное программирование.  Я вот о чем. Представьте, что вам надо написать, например, туду-лист (избито, а что делать). Если посмотреть чисто по-человечески, важная часть, бизнес-логика, так сказать, состоит из:  - List::append - List::delete - List::filter - not (менять статус выполненности)  И штука в чем: мы очень хорошо понимаем, как эти операции реализовывать. Более того, почти 100% языков реализуют их прямо в стандартной библиотеке, их можно, так сказать, взять с полки, легко понять и не надо программировать от слова вообще.  И тут заковырка: вроде бы самые важные операции для туду-листа вот они, принципиальная проблема решена, остались несущественные детали. И вот детали как раз и делают программирование сложным: а как показать эти элементы? А где хранить статус? А как синхронизировать? Как и куда деплоить? Все это требует в 100-1000 раз больше кода (ничего себе пропорция, да?) и той самой настоящей экспертизы, благодоря которой айтишники все еще востребованы и получают свои сотни тысяч долларов.  Но (кажется) очевидно, что так быть не должно? Наверняка несущественные детали можно как-то порешать, причем скорее всего все равно как. На то они и несущественные. Вам же все равно, каким именно алгоритмом выполняется List::sort, например? Ну вот и рисованием, и с деплоем, и с синхронизацией скорее всего будет все равно до тех пор, пока оно выполняется хоть как-то.  Короче, я мечтаю о мире, в котором, скажем, если мне понадобился список покупок, я вбил «куда-то» 10 строчек, состоящих из list.append и item.status = not(item.status) и получил туду-список под мои нужды. А не собирал команду на полгода. Туду список мне, конечно, не нужен, но теоретически можно много таких вот мелких и супер-специфичных задач напридумывать, которые я бы потенциально хотел иметь возможность запрогать, но не настолько сильно чтобы платить в 100-1000 раз больший оверхед за accidental complexity.  Как такое светлое будущее называется? No code? Darklang? Excel? IFFFT? Потому что я готов на него посмотреть.",364
"Ладно, впервые в истории канала, признаю, что был неправ. Комментаторы меня переубедили. Программирование не должно быть простым и легким ни для кого. Программирование должно быть сложным, чтобы кровь, кишки, расчлененка, чтобы даже простейший туду лист делался минимум командой из десяти человек и за полгода времени.  Потому что если оно будет простым — ну куда это годится? Это что же получается, кто угодно сможет им заниматься? Это как же продавать людям простые утилиты, если они смогут сами для себя их написать? Как работать программистом, если бизнес без тебя может сделать то, что ему нужно?  А экспертизу куда девать? Весь этот скилл по настройке вебпака и кубернетеса? Выбору между MySQL, PostgreSQL и NoSQL? Документация на Simple Storage Service занимает 1104 страницы и 50,000 строк SDK. Simple! Конечно это все существенные детали. Конечно, если выберешь не ту базу, это критически повлияет на опыт конечного пользователя.  И конечно, если программирование простых вещей было бы простым, оно бы безбожно тормозило. Хорошо что сейчас это не так! Потому что сейчас-то оно сложное и только благодаря этому не тормозит, мы прям живем в мире летающего, парящего софта, который открывается за миллисекунды, а сайты грузятся со скоростью, ограниченной только скоростью света. Как здорово, что мы променяли простоту хотя бы на производительность! Как было бы тупо не иметь ни того, ни другого.  Слава богу, что вы, дорогие мои читатели, вовремя меня поправили. Спасибо, что показали, каким я был наивным и глупым, и что по-другому и быть не может, даже теоретически, что законы вселенной запрещают программированию быть простым даже в простых случаях.  А то не дай бог я бы пошел искать решения, или, еще хуже, начал думать в этом направлении и подвергать сомнению статус кво. Как здорово, что можно на вас положиться.",365
"Я кстати поставил себе вторую бету macOS Ventura. Это новая макось, которая выходит осенью.  И знаете что? Знаете, конечно. Вы у меня сообразительные 🙂 Я разочарован.  Ну то есть не чтобы она совсем не работает. Работает, конечно. Про редизайн System Preferences не буду — в отличие от многих, мне кажется направление верным. Давно уже было пора все эти настройки в плоский список организовать. Да, можно улучшать, но направление правильное.  Но вот вам тревожный звоночек. Они каким-то образом умудрились написать всплывающие окна так, что их контент распидорашивает (это проф термин, если что) и кнопки типа Ок/Отмена перестают влезать в видимую область. Не скролл появляется, а именно часть кнопки выходит за границы окна. То есть очевидно баг, а не «недостаток полировки».  А теперь внимание вопрос. Вы делаете одну из ключевых фич новой системы. Вице-президенты хвастаются ей на презентации. То есть явно не какой-то обскурный уголок системы, а ее продающая фича.  Дальше, чтобы упростить задачу, все ваши popup-окна фиксированного размера. Это стремно, и System Preferences за это справедливо критикуют, но вот так вот они решили. Важно, что это сильно упрощает задачу. Вам нужно запихнуть не-динамический контент в окно фиксированного размераю  Макось на английском, то есть дефолтном же языке жителей США, если что. Все настройки более-менее дефолтные, я уже забил настраивать что-то сильно под себя, потому что это постоянно ломают. Макбук тоже свежий.  Так вот, вопрос. Какой глубины должен быть стек и насколько тяжело его контролировать, если такую тривиальную задачу как нарисовать два комбо-бокса, кнопку и заголовок в окне фиксированного размера — это нетривиальная задача для компании с бесконечными деньгами и годом времени?  I mean, даже дельфи с таким справлялась, да и в вебе, если честно, я давненько такого позора не видел.  Я уж не говорю о видимой задержке при переключениями между панелями, про отсутствие клавиатурной навигации, про race conditions, которые видно невооруженным взглядом, про спорные дизайн-решения, про идиотские контролы. Но блин, фиксированный лайаут в окне фиксированного размера!!!  Первому, кто напишет «ну это же бета, к релизу поправят» — бан. Вопрос не в том, что это можно починить, вопрос в том, как можно было вообще обосраться на такой тривиальной задаче??? И что это говорит нам об уровне сложности стека, глубине понимания и о том, насколько программисты на самом деле in control над тем, с чем они работают.  Если это то самое будущее, которое ждет нас с Swift UI, то я туда не хочу, спасибо большое.",366
"По каналу может показаться, что я все критикую и мне все не нравится. Конечно же это не так, если бы это было так, я бы давно уже спился.  Про Dash я писал в канале раньше. Шутка ли — приложение, которое железно заняло место в регулярном ежедневном использовании. Привычки меняются не так часто, так что было приятно видеть.  С большими корпоративными продуктами может возникнуть ощущение варящейся на медленном огне лягушки — кажется, что вот есть Dropbox, и то, как он сделан, просто необходимость и по-другому быть не может. Syncthing напоминает, что может — ни одного окна, даже аккаунт заводить не надо. Поставил и он сразу работает. Настроил один раз и не заглядываешь в него примерно никогда, а он и не напоминает о своем существовании. Когда у ребят нет цели поднять бабла и вообще они не торгруют своими пользователями, все оказывается может быть легко, приятно, просто и спокойно.  Sublime Text мой любимый редактор. Помимо скорости привлекает также минимум фич. VS Code хорошо начинался, но если открыть его сейчас, там миллион каких-то подсветок, свистелок и перделок соревнуются за твое внимание. А Sublime не особо меняется и это дает ощущение стабильности, ощущение, что можно никуда не бежать и не следить за «развитием» редакторов кода.  Sublime Merge заменил мне GitKraken, хотя концепция последнего мне нравилась чуть больше. Но SM собран так качественно и аккуратно, ничего не болтается и не люфтит, все просто, минималистично и быстро, конечно. Это заставило меня поверить, что можно кайфануть не только от функциональности, но и от качества сборки.  Когда началась война, я поспешил сделать родителям VPN и взял Mullvad. Восхитило, что они тоже не особо торгуют юзерами и не слушают маркетологов, а сосредоточены на своей основной задаче. Поэтому аккаунтов у них нет, а путь оплаты максимально минималистичный — они генерят тебе число и это и твой логин, и пароль, и платежный токен, короче, максимум анонимности и одновременно простоты. Проще уже нельзя, сложнее не нужно, как бы ни убеждали нас другие сайты, что им ну прям в лепешку разбейся нужен ваш емейл, фамилия, имя, адрес, имя домашнего питомца и доступ к телефонной книге.  Из игровых движков мне понравился Godot именно тем, что его просто скачал и работаешь. Как может быть по-другому? Вот я тоже удивлялся, но Unity даже эту часть умудрились переусложнить — регистрация, лаунчеры, «пакет» продуктов, доскачивание после установки... Энтерпрайз всегда был ярым противником здравого смысла.  Descript редко нужная штука, но где-то раз в год доводится воспользоваться, и каждый раз как магия. Пример кардинально нового продукта, меняющего сам процесс работы с аудио — речь можно редактировать, напрямую меняя ее текстовую расшифровку. Хотя по части установки у них конечно немножечно VC головного мозга.  Infuse тоже недавно порадовал — я им пользовался на Apple TV и там давно был настроен мой удаленный медиа-сервер. Проблема была в том, что я забыл уже все настройки, пароли и явки, и из-за этого никак не мог смотреть те же видосы с ноутбука — лень было настраивать заново. Каково же было мое удивление, когда я поставил Infuse на мак и он сам каким-то образом подсосал мои же настройки через, видимо, iCloud, без единого действия и даже запроса с моей стороны. Приятно. Особенно приятно в сравнении с TV.app на Маке.  Посмотрел еще хорошее интервью с Кармарком у Лекса Фридмана. Классный мужик, тоже любит смотреть на вещи с точки зрения «что физически возможно», а не «так получилось, лучше никто пока не умеет».  Так что я тоже неспроста на вещи жалуюсь. Я жалуюсь, потому что вижу, как можно лучше. На конкретных примерах. И я не хочу, чтобы подход «так делает Гугл» или «лучше никто не умеет» каким-то образом нормализовал посредственность, лень и накопленную сложность. Разобрать завалы и сделать прямо и просто это на самом деле очень достойная цель и путь к успеху, путь, на котором очень мало конкурентов. Вот его-то я и пытаюсь нащупать.",367
"Посмотрел интервью Андрея Руденко про Кложу (хорошее), но не мог не заметить, что тему с гомоиконичностью они на пару с интервьюером слили. Давайте попробую объяснить, что это такое.  Вот представьте JSON. JSON — подмножество синтаксиса JavaScript, т.е. любой JSON-файл можно буквально скопировать в программу и присвоить, например, переменной:   let json = <literally any JSON>;   Представили? Теперь подумайте, в чем кайф JSON-а? Это одновременно и формат сериализации, и нотация для записи данных, часть синтаксиса языка. Это означает, что есть однозначное двухстороннее соответствие между структурами данных в памяти и их записью: JSON.stringify и JSON.parse его прекрасно иллюстрируют. Объект Array можно превратить в строку, а строку можно превратить в другой, но точно такой же Array. В том числе и строку кода (вы ведь пишете в текстовом файле, да?).  Может показаться, что такое соотвествие обязательно или тривиально, но не всегда: например, в Java нет своего аналога JSON, потому что нет синтаксиса для записи массивов и словарей.  Окей. Дальше. Скажем, у строки кода [1, 2, 3] понятно какое представление в памяти. А у let json = [1, 2, 3];? Непонятно, да? На самом деле ответа нет, потому что представление зависит от парсера, и оно, скорее всего, будет из каких-то сложных местечковых объектов состоять. Что-нибудь типа   {""type"": ""VariableDeclaration"",  ""kind"": ""let""  ""declarations"": [  {""type"": ""VariableDeclarator"",   ""id"": {     ""type"": ""Identifier"",     ""name"": ""json""   },   ...   Жить можно, не смертельно, но не очень удобно, да? А теперь представьте, что всю программу можно было бы записать в JSON-е. Прям все if-ы, for-ы, function и так далее. Как? Ну например можно сказать, что первое значение в массиве это символ, который определяет смысл того, что идет дальше. Скажем,   if (a > 0) {   <then> } else {   <else> }   превратится в:   [if, [>, a, 0],   <then>,   <else>]   Не очень привычно, но чисто в рамках мысленного эксперимента, представили, да? Заметье, что a > 0 из специального маленького синтаксиса (оператор между аргументов) превратилась в обычный вызов функции:   f(arg1, arg2, ...) → [f, arg1, arg2, ...] a > 0 → >(a, 0) → [>, a, 0]   Весь смысл этого эксперимента в том, чтобы никогда не выходить за пределы известно-как-сериализуемого формата данных, в нашем случае JSON-а.  Можно ли так построить весь язык? Оказывается, можно. Лисп, собственно, так и появился: хотели сначала придумать формат для записи данных (S-expressions, прото-аналог JSON-а), а потом доделать сверху «нормальный» синтаксис, чтобы программировать (M-expressions). Но оказалось, что S-expressions достаточно, более того, появляется одно интересное качество, которое при выходе за пределы S-выражений бы потерялось: очень легко генерить или модифицировать код.  Ну смотрите. У вас в языке есть куча всего для работы с массивами и словарями: всякие reverse, count, partition, filter, map, fold, splice. И тут выясняется, что ваш код это точно такой же массив. Ну вот как, например, поменять then и else вот в таком коде?   [if, [>, a, 0],   <then>,   <else>]   Да легко:   function swap(form) {   const [_, cond, then, else] = form;   return [if, cond, else, then]; }   А как поменять их в AST-дереве? Чуть более сложно, да? Надо смотреть, как там че хранится, парсер какой-то тащить, сериализатор. Не то чтобы совсем невозможно, но затратно, да? You’d stop and think for a second.  Ну вот в этом-то собственно гомоиконичность и состоит. Что преобразования кода становятся тривиальными, потому что структура кода записана только в терминах базовых примитивов данных: списков, словарей и массивов, их структура очевидна, а в языке полно средств работы с ними и они вам уже хорошо знакомы.  И это не то чтобы принципиально невозможно в других языках. Возможно, конечно, тоже. Просто с гомоиконичностью гораздо удобнее: написать макрос на три строчки не сложнее, чем написать функцию на три строчки. Это к важности упаковки.",368
"Про редизайн настроек в грядущем макОСе. Не потому, что мне так нравится бить лежачего, а потому что это красивая история про потерю ориентиров.  Когда делали первый айфон, пришлось решить много задач в первый раз. Шутка ли — абсолютно новое, нигде не виданое устройство, форм-фактор, способ ввода. Это сейчас кажется, что тач-интерфейсы были всегда, но вот всего лишь 15 лет назад ни одного не было и решения приходилось искать, а не копировать.  Например, как вводить текст? Пришлось пробовать варианты, тестировать и придумывать. Придумали в итоге клавиатуру, у которой кнопки становятся тем крупнее, чем более вероятно увидеть данную букву следующей. Нажал, например, C – вырастут, наверное, H, A, I, U, а уменьшатся, например, T или P.  И так со всеми проблемами. Одна из них — настройки. А точнее, чекбоксы. Вот хочешь ты, например, включить-выключить вайфай. Или блютус.  Как эта проблема решалась раньше? Правильно, чекбоксом. Это такая галочка, а справа от нее текст. Простое и понятное соглашение, сто лет использовалось к тому времени, еще из бумажных форм пришло. Чем не устроило?  На айфоне у чекбокса, очевидно, было бы две проблемы. Так как он от текста слева, а рука, как правило, все-таки справа, до него пришлось бы сильно тянуться. А вторая — в этом жесте ты своим пальцем всю подпись и загородил бы.  Окей. Решения. Перенести чекбокс направо, а подпись оставить слева? Но это ломает все соглашения, весь формат. Чекбокс — это именно галочка с подписью, а не просто галочка. Если где-то в десктопном интерфейсе вы видите свободно плавающий чекбокс — знайте, это зашквар.  Так что пришлось придумывать целый новый контрол. Придумали тоггл. Он свободен от соглашений чекбокса, находится справа, здоровый (как раз под палец размером), да еще и привносит элемент тактильности — его можно свайпать туда-сюда, а не просто тапать.  Да, мои юные читатели, вам может быть трудно это представить, но тогглов до первого айфона в интерфейсах не существовало в принципе, и это один из single-digit случаев на моей памяти, когда придумали новый интерфейсный контрол и он прижился.  Короче. Итог. Тоггл решал вполне конкретную проблему — перенести чекбокс направо, чтобы удобнее было тянуться и чтобы не загораживать подпись. Чувствуете, да: входные данные, синтез, решение — все вытекает друг из друга, все имеет смысл и причину.  А теперь берем макОС. Десктопная операционная система. С десятилетиями истории. С устоявшимися соглашениями. С гораздо более точным устройством ввода, чем палец. Эппл посмотрел на это и думает: да не, хуйня какая-то. Давайте как на айфоне сделаем.  И сделали. В новых системных настройках теперь тоже тогглы. Почему? А нипочему. Выглядит максимально ублюдски, как в книжках оглавление:  Wifi .......................................................... [ON]  У чекбоксов же еще какой плюс? Они находятся максимально близко к своей подписи. Экран телефона маленький, и там все находится рядом со всем в любом случае. А экран макбука огромен, и уносить контрол так далеко от, собственно, элемента, который он контролирует — просто зачем? Чтобы что?  Другая проблема — рука, перекрывающая надпись — на десктопе тоже отсутствует. Получается, что мотивации для тогглов ноль и смотрятся они тут как вечернее платье на обезьяне — вызывает больше вопросов, чем ответов.  Вот так вот учитывание контекста привело к красивому и элегантному решению на телефоне, а НЕ учитывание привело к бессмысленному и беспощадному решению на десктопе.  Всегда, слышите? Всегда спрашивайте: зачем? Зачем мы это делаем? Почему? И фильтруйте плохие ответы.",369
"Поскольку я теперь игродел (в одном геймджеме поучаствовал, хаха), мне стало немножко интересно, как вообще компьютерная графика устроена.  И вот смотрю я геймплей какой-то стратегии, а там поле с пшеницей, и посередине домик. Ну, думаю, наверняка какой-то хитрый хак есть, типа рисуют внешний объем (условно параллелипипед) и как-то по поверхности шейдером отдельные колоски, что-нибудь такое. Ну потому что камера далеко, колоски меньше пикселя, все дела.  Потом присмотрелся по краям, а они торчат так хаотично. И на дом в центре залазят. И более того, тень от дома тоже как будто каждый колосок отдельно затеняет.  Ну, думаю, тут тоже наверняка какой-то умный трюк, но сам я уже до такого не додумаюсь.  Пошел гуглить. Нагуглил видос «как в играх делают траву». И знаете что там? Каждая травинка это 3Д модель, GPU инстанциирует два миллиона полигонов, а дальше все это рендерится обычными средствами. Со скоростью 500 кадров в секунду (т.е. примерно в 10 раз быстрее, чем нужно для обычного 60Гц монитора).  Два миллиона! Если что, на 1080p экране пикселей всего два миллиона (1920 * 1080 = 2 073 600), то есть можно по полигону на пиксель и еще куча времени останется.  Это напоминание о том, что компьютеры, сука, уже давно ОЧЕНЬ быстрые. А то что панели в настройках за секунду реального времени переключаются или блокнот две секунды открывается — ну, так получилось. Могли бы и за миллисекунду, если захотеть",370
"Про мотивацию пишет Colin Cornaby:  > Modern software is bad because we stopped charging for upgrades so vendors have no investment in making sure new versions still have a good user experience because you're locked in anyway and it won't affect their profits [...]  > Like remember when each version of Adobe Creative Suite had to be better because if it wasn't you could just sit on your existing version and Adobe wouldn't see a dime from you until they fixed their mess  Такие дела, ребятки. Стараться больше не нужно, поэтому мы там, где мы.  Когда вы последний раз покупали апдейт программы потому что в ней была какая-то очень нужная вам фича?",371
"Илья Бирман нашел в Эпл картах кнопку погоды, которая раскрывается в попап, и пока раскрывается, два раза ресайзится. Нехорошо, говорит. Если все размеры заранее известны, ну нарисуй ты сразу окно нужного размера, а потом грузи свои данные в фоне потихоньку, и показывай по мере загрузки их сразу в том месте, где они в итоге окажутся.  Я тоже считаю, что нехорошо. Раньше нативные приложения отличались от веба именно тем, что ничего не дергалось и не прыгало при загрузке. Данные все локально, лайаут известен — чему там дергаться? Даже курсор поверх кнопок не менялся на руку, чтобы не дребезжало.  Однако веб с его релайаутом раз в секунду, картинками неизвестного до загрузки размера и CSS-ом, который может не успеть, сделал дребезжание вариантом нормы. И теперь мы видим это и в нативных приложениях, потому что — ну а что такого? Все так делают.  А какие-нибудь основанные на Электроне вообще показывают белый экран пару секунд, пока грузятся. И это тоже как бы нормально. Хотя — опять же — раньше такого никто себе не позволял. Если что-то загружалось две секунды, это считалось позором и хотя бы сплеш-скрин рисовали на это время.  Я все хочу снять как-нибудь видос, как я работаю на компьютере и открываю всякие повседневные штуки типа Идеи/Фигмы/Фотошопа, только вырезать все моменты ожидания загрузки. Ну или сократить до, скажем, 100 мс. Наглядно проиллюстрировать, как мы могли бы жить при сегоняшнем-то уровне развития железа. Потому что мы как-то привыкли, что вот ты вбиваешь адрес и секунду-две ждешь, прежде чем что-то появится. А ВЕДЬ ТАК БЫТЬ НЕ ДОЛЖНО.  Технически ничего вообще не мешает ни одной программе открыться за 16 миллисекунд, диски позволяют за это время сколько, мегабайт 50 прочитать? Но это надо программировать аккуратно, конечно. Если неаккуратно, то я на 100 мс согласен.",372
"Как и любой программист, я одновременно и мечтаю, и страшно боюсь момента, когда начну писать свой язык программирования. Но язык — не библиотека, спешки не любит, поэтому идеи для него я собираю неспеша. Вот некоторые из них.  Во-первых, это явно будет не язык, а полный стек разработки. Сборка, управление зависимостями, деплой, мониторинг — все будет встроено сразу. Чтобы можно было написать десять сточек бизнес-логики, нажать кнопку и получить работающее приложение сразу, а не нанимать на месяц девопса. Просто потому что по-другому мы уже пробовали и по-другому не работает.  Почти наверняка этот язык не будет соревноваться с C или Rust, потому что — а смысл? Эти языки уже есть и задачи свои решают. Хочется пробовать то, чего еще нет.  Во-вторых, он будет интернет-ready. То есть каждая функция будет иметь уникальный во всем мире идентификатор и зависимости будут тоже per function. Как js-пакет из одной функции типа is-color-red, только без вот этого вот кошмарного оверхеда на деплой и обслуживание. Написал import tonsky/str-concat; и у тебя сразу эта функция доступна.  Ну и иммутабельно это все будет, конечно. Нужно что-то поправить — выпускай новую функцию. Иначе не взлетит.  В-третьих, понятно, свой редактор. С одной стороны «код — это текст» я конечно уважаю и понимаю, что еще ни один язык с кастомным редактором не взлетел. Но с другой стороны, столько вещей, которые тупо нельзя сделать, если жить в предположении, что кто угодно может как угодно в любой момент изменить ваш исходник внешними средствами.  Самое простое — CRDT-based версионирование. На плоских файлах тупо не делается, а выгоды сулит огромные. Посимвольный blame, например, гарантированный автоматический мерж (и анмерж), ну и понятно Google Docs-лайк коллаборация.  Другая моя давняя мечта — картинки в комментариях. Многие вещи ГОРАЗДО проще нарисовать, чем описать словами, однако текстовость файлов мешает. Как минимум редактор диаграмм надо будет точно встроить. Прикиньте — рисовать нормально, а не ASCII-графикой?  Разные шрифты, чтобы можно было, например, выделить болдом что-то важное. Но тут надо будет подумать, как не дать слишком много контроля программистам, потому что с визуальным вкусом могут быть вопросики.  Ну и наконец можно будет сделать красиво. Нормальные юникодные операторы (π, ≠, ¬, ∧, ∨) вместо этой дурацкой псевдографики >>=, типографские кавычки для строк (да, открывающая и закрывающая кавычки будут разными!). Табы, опять же, убрать. Как и пробелы 🙂 Выравнивание сделать семантическим, а не захардкоженным десятью нажатиями на самую длинную клавишу на клавиатуре.  Возможно, социальные фичи типа комментариев от других людей и таск трекинга прям в коде. А почему нет? У писателей это все есть, у дизайнеров есть, причем для них это сделали программисты. А сами себе мы почему не можем сделать то же самое?  В-четвертых, мнгновенная реакция. На все — изменения, импорт зависимостей, сборку, деплой. Никакого ожидания «пока скомпилируется». Да, возможно, какая-то часть перформанса останется на полу, но оставшейся, я уверен, хватит с головой.  Ну и REPL, конечно, куда без него. «Редактирование наживую». Перезапускать программу, чтобы тупо посмотреть, правильно ли ты там что-то поменял — ну, такое. Удовольствие для терпеливых.  В-пятых, база данных будет прямо в стандартной библиотеке. Потому что она ну все равно нужна всем, а настраивать, подключать, сериализовывать-десериализовывать, конвертировать между реляционным и объектным представлением... Я лично устал. Не вижу смысла.  Представляете, в каком светлом мире мы бы жили, если бы в линуксе каждый сервис не хранил свой конфиг в уникальном как снежинка текстовом формате, а пользовался бы единой SQL-базой? Углеродный след раза в три бы уменьшился по всей планете, а освободившиеся админы связали бы каждому живущему человеку по два шарфика за это время.  А, ну и массивы будут индексироваться с единицы, конечно же. Или нет. Пока не решил.  Короче, как видите, работы много, так что я пойду и дальше мечтать. Привет.",373
"Короче. История.  У меня в веб-клиенте твиттера перестали работать видео. Ну то есть не совсем перестали, но включаются со второго раза, а при малейшем скролле ставится на паузу. Продолжить можно, но мышкой лучше не шевелить.  Первая мысль, конечно — ха! Опять эти хипстеры из Долины перепили сельдереевого латте, перегрелись на горячей йоге и все сломали. Жду день, неделю, месяц. Ну не может быть так долго сломано, даже по стандартам силиконовой долины это чересчур!  Вторая — может, адблок? И действительно, захожу в консоль, вижу заблокированный client_event.json, отключаю адблок и все снова работает. Сам себе злобный папа Карло, получается? Почему загрузка какого-то там JSON-а блокирует видео — ну, видимо, фронтенд фреймворк так сделан, нельзя требовать, чтобы они еще и с адблоком работу сайта проверяли.  Ладно. А почему видео ставится на паузу при скролле? Так вот потому что этот client_event.json при каждом скролле и отправляется. При каждом, Карл! Даже на миллиметр. Более того, он еще отправляется при каждом ховере. То есть навел на любую кнопку (не нажал!) — получи двадцать килобайт исходящего трафика. Ага, двадцать.  Что такого важного он там отправляет, что видео не может продолжить играть? Ну, например строчку ""debug"": ""true"" (да, значение тоже именно строкой), или ""element"": ""users_liked_mention_of_you"", ""client_event_sequence_start_timestamp"":1661273470663, ""client_event_sequence_number"": 152 (уверен, названия специально выбраны самые короткие чтобы экономить ваш и без того нерезиновый трафик), или 800 байт непрозрачной метадаты, которая, кажется, закодирована в base64 и декодируется примерно в то же самое (!!) сообщение. Или высоту вашего экрана ""percent_screen_height_100k"": 15936 (а вдруг при ховере поменяется?), или вот этот вот супер-важный бит информации: ""video_type"":""video"", или id видео, повторенное пять раз (да, пять).  В общем, сломал ли я сам себе Твиттер и теперь на него жалуюсь? В известном смысле — да. Но с другой, разве не нужно быть сумасшедшим, чтобы позволить такой вот ерунде есть вашу батарейку, трафик, CPU и нервные клетки? Разве не большее безумие НЕ блокировать client_event.json? Разве не безумно следить за каждым вздохом, пуком и размером зрачка каждого человека, зашедшего на твой сайт?  Сколько вообще Твиттеру нужно знать, вот на самом деле? Каждый шорох мышки, каждый ховер, каждый скролл, размер экрана, устройство, браузер, время суток. Когда им окажется достаточно? Где эта черта? Неужели с этой информацией можно сделать что-то осмысленное, даже если в гиганстских масштабах загрузить ее всю в машин лернинг?  Ну построил ты датаценр и прогнал через него триллион двадцатикилобайтных событий в день, в итоге получил информацию типа 35% пользователей сидят на десктопе, 65% на мобиле. И ЧО? Кто-то наверху посмотрел на эти цифры и такой: нормально, ничего не меняем, работаем дальше. Причем не каждый день даже смотрел, а там раз в месяц. Или в год даже. Неужели оно того стоит? Ну то есть понятно, что пять тысяч программистов надо чем-то загрузить, строительство дата центров надо чем-то оправдывать, а тут как раз такая мощная задача.  Но какой во всем этом СМЫСЛ?",374
"Кстати, в посте про дергающуюся погоду на Яндекс^W Эпл Картах был еще один показательный момент. Чтобы эту погоду посмотреть, надо нажать на иконку и ПОДЕРЖАТЬ. При том, что все остальные кнопки работают от обычного тапа. Собственно, изначально это штука и разлетелась как открытие — смотрите, как, оказывается, можно.  И вот это вымораживает меня в мобильных интерфейсах больше всего. Что многие взаимодействия тупо спрятаны и передаются фольклором: смотри, знал, что так можно? А догадаться самому практически нереально: где можно подержать, где свайпнуть, где потянуть до определенного предела или, наоборот, сверх предела. Ничего же не нарисовано, даже малюсенького намека нет.  Показывал жене недавно, как вызвать поиск приложений на айфоне: это свайп вниз с середины экрана. На что она справедливо заметила: погоди, но свайп вниз же вызывает нотификации! Да, результат зависит от того, в каком примерном, никак не обозначенном месте экрана ты начал жест.  Чемпион в этом виде спорта — приложение Procreate. Даже мне, видевшему многое, пришлось-таки гуглить, как делаются некоторые вещи (свайп тремя пальцами, перетаскивание какого-нибудь индикатора куда-нибудь, ожидание после начала рисования). Особенно кайфово было, когда они в какой-то версии поменяли один невидимый жест на другой и пришлось гуглить снова! Это при том, что у них на панели большая часть места пустует.  Вроде бы очевидно, что в интерфейсостроении спрятанная, скрытая функциональность — зло. Что если человеку не подсказать, то он про функцию, может, никогда и не узнает. Но почему-то мобильные дизайнеры решили, что им можно. И мы оказались в мире, где новые функции открываются случайно, а Ютуб заполнен видео «20 функций вашего телефона, о которых вы не знали».  Не надо так.",375
"Вдогонку: у невидимых контролов есть большая проблема: их очень сложно критиковать.  Ты говоришь разработчикам «у вас нельзя сделать то-то», а они тебе «так можно же, вот тут отодвинь и семь секунд подержи». Вроде бы и проблему твою решили, и функция присутствует, и ты про нее теперь знаешь — на что жаловаться?  Получается, что не на что. Да, все остальные точно так же, как и ты, не смогут ее найти, но каждый раз, когда кто-то будет поднимать бучу, ему покажут, бага не заведут, исправлять мотивации не будет. Все, у кого была проблема, сами себя затыкают, а зачем шевелиться, если никто не жалуется?  Так и живем.",376
"Твит Кена Кочиенды, одного из ключевых разработчиков оригинального айФона, заставил задуматься:  Things I need to develop apps:  - view system - imperative layout - pixel & vector graphics - animations - gestures - colors - text & fonts - events - timers - sound - settings - files - networking - a few data structures & algos  Things I don’t need:  - new language - declarative layout - strong types - generics  А именно часть про declarative layout. Если кто не знает, это парадигма, которую придумали в Реакте 9 лет назад и которая с тех пор крепко захватила умы всего UI сообщества. По ее шаблону сделаны Флаттер, Компоуз, Свифт ЮАй, ну и, конечно, все возможные формы Реакта — веб, натив, ви ар, натив веб и т.п.  Парадигма обещает немыслимое: достаточно написать «чистую» функцию из модели данных в состояние UI, а все переходы возьмет на себя библиотека. То есть мы рендерим каждое состояние как будто «с нуля», что сильно проще, а изменения интерфейса вычисляются как дельты полностью автоматически.  И это правда очень удобно, очень надежно и очень упрощает код, тут не обманули. С архитектурной точки зрения тоже красиво, потому что позволяет данные почти полностью отцепить от интерфейса и менять модель как угодно в любой момент. Интерфейсу все равно, пользователь дописал одну букву в тексте или бекенд внезапно переименовал вообще все категории в дропдауне.  Ну а теперь меня терзают сомнения — а так ли уж это хорошо на самом деле? То есть с одной стороны мы экономим, да. А с другой?  Во-первых, performance impact. Да, diff по всему дереву в большинстве случаев дается почти бесплатно, то сам рендеринг может стоить довольно дорого. Скажем, если в каких-то компонентах, чтобы сгенерить VDom, вы ходите в базу, то вы будете ходить в базу по всему дереву на каждый чих и пук даже при изменении где-то в глубине глубин какого-нибудь чекбокса.  Значит, наверное, надо кешировать? Вот уже ваша «чистая» функция рендеринга превратилась в обычный такой мутабельный объект, да?  Во-вторых, сама декларативность. Ее красота в том, что описывать простые вещи легко и приятно, а вот сложные совсем нет. Потому что нет доступа к рантайм-состоянию, когда оно нужно.   Как декларативно описать подстраивающуюся под объем текста текстарию? Или двухпанельный редактор маркдаун-превью, в котором обе панели должны скроллиться синхронно? Или ряд кнопок, скажем, “Ok”, “Preview”, “Cancel”, чтобы они все были одной ширины, причем ширина выбирается по самой длинной надписи?  Ну нельзя их описать декларативно. То есть можно, конечно, если конкретно эти случаи поддержать в системе лайаута. Но поддержать можно конечное количество вещей, а случаев выходит бесконечное. Ну и неохота учить специально какой-нибудь flex-basis: max-content, когда я могу нужную мне ситуацию запрограммировать в сто раз быстрее и понятнее на нормальном языке программирования.  Плюс вопросы качества. Редизайн System Settings на маке и уродливая погода в Maps (а до них — Shortcuts, Podcasts, Books) заставили усомниться в подходе. Они не особо быстры (хотя казалось бы, вы мучаете себя статически типизированным компилируемым языком, ну это ради чего-то должно быть, хотя бы ради перформанса?) и не блещут «качеством». Особенно на фоне классических альтернатив, написаных по-старинке.  Плюс сам подход декларативного интерфейса идет против реальности — мутабельной и персистентной, а не чистой и эфемерной. И есть ощущение, что да, мы что-то выиграли в красоте кода, но мы примерно столько же потеряли на том, что теперь боремся с чисто функциональным представлением мутабельного, по сути, домена.  Этот трюк хорошо прошел бы на бэкенде, где никто не увидит, какую дичь творит ваша программа. Но в UI, к сожалению, все видно глазами, и притвориться, что анимаций нет или что что-то не перестраивается на каждый чих, когда оно перестраивается, уже сложнее.  Может быть, и правда, по-старому писать интерфейсы тоже не так уж и плохо? Как минимум результат, как будто, чуть лучше получался?",377
"На днях пришла знакомая и попросила файлик открыть на айпаде. Где исходник, говорю? Да вот, на моем планшете. Планшет Самсунг.  Почесал я репу и говорю: легко. Скопировали по шнуру с Самсунга на ее виндовый ноут. С ее ноута на мою флешку. Через переходник на USB-C вставил флешку в Макбук. Ну и с макбука уже эйрдропом на айпад. Там поставили приложение и вуаля, файл открылся.  Как здорово, что есть современные технологии и такая простая задача решается всего лишь с помощью пятью устройств (если переходник не считать). А могла ведь и о чем-нибудь сложном попросить, например что-нибудь распечатать.",378
"Послушал подкаст The Talk Show про историю мужика, который сфотал сыпь на гениталиях своего ребенка по просьбе его доктора, а Гугл ему за это аккаунт закрыл. История дошла до Нью-Йорк Таймса быстрее, чем до Гугл саппорта (до которого она, кажется, вообще не дошла, да его может и не существует вовсе).  Подкаст хороший, но я всю дорогу переживал, что они несколько мыслей так и не озвучили.  Во-первых, перестаньте связывать свою интернет-жизнь с гуглом. Не храните почту на Гмейле, не входите в сайты через Гугл-логин, не пользуйтесь Гугл-аутентификатором.  Гугл это компания, известная своими поспешными решениями и абсолютной глухотой к какому-либо фидбеку и аппеляциям. Это просто бессмысленный низачем не нужный риск, доверять им хоть что-нибудь важное, что вы не готовы навсегда потерять в любой произвольный день без какого-либо повода и предупреждения. Ну и вдвойне бредово завязывать несколько разных сервисов на волю одного дурного демиурга. Храните яйца в разных корзинах, епта!  Во-вторых, не очень понятен глубокий смысл блокировки аккаунта в этом случае. Типа, то, что у чувака теперь нет почты, как-то сделает его менее педофилом по мнению гугла? Конечно нет. Смысл блокировки только один — прикрыть свою задницу. Гугл от закрытия аккаунта ничего не потерял, а собственные репутационные риски занизил. Вы уверены, что хотите доверить свою жизнь такой бездушной машине?  Ну и в-третьих, эта греющая душу мысль, что из всех фотографий, сделанных на ваш Андроид, именно фотки ваших обнаженных детей, те, которые вы меньше всего хотели бы показывать кому-то постороннему, именно на них с наибольшей вероятностью будет смотреть потный бородатый мужик в темном подвале Гугла. Именно потому, что именно так работает Гугловая система ревью подозрительного контента.  Да здравствует конец приватности, добро пожаловать в дивный новый мир дефолтной паранойи. Чуваки в подкасте, обсуждая, могли бы они сами попасть в такую ловушку, пришли к выводу, что с высокой вероятностью у них что-то бы екнуло перед фотографированием. То есть они уже живут в предположении, что все, что они делают, говорят и фотографируют, независимо от их собственных целей и намерений, увидит и будет судить кто-то посторонний. Это их дефолтный модус мышления, и они даже не замечают, что возможно это довольно хуево, жить в таком постоянном страхе и оглядываться на неизвестного дядю перед каждым действием. И что вообще-то могло бы быть и иначе.",379
"Есть такой классный сериал, Атланта. Он в целом очень милый, но иногда там такую философию выдают, что грузит похлеще Сартра. В одной серии один из персонажей выходит из кухни с кружкой, из которой ест сендвич. «Breakfast cup», — говорит. Ему: «You made that up», типа, нет такого понятия. На что он справедливо замечает: «Everything is made up, nigga. Stay woke».  Я это к чему. Я уже давно перестал пытаться как-то осмысленно употреблять хоть какие-то термины в нашей области. Потому что бардак, термины используют кто как хочет, и означают они как правило то, что удобно собеседнику.  Например, недавно в комментариях разразился срач, является ли функция, выводящая в лог, чистой. Может является, а может и не является — потому что никто не знает, что такое чистая функция. Точнее как: этот термин может означать то, что тебе нужно, и в зависимости от этого она либо будет чистой, либо не будет.  Сложно? Вот и я о том же. В конечном итоге важно то, что функция выводит в лог. А считать ее чистой или нет — абсолютно бесполезный спор, который НИЧЕГО не добавляет и НИЧЕГО не проясняет.  Является ли выделение памяти сайд эффектом? В каком-то смысле да, но обычно удобнее считать, что нет (пока память не кончится). Важно в конечном итоге то, что память выделяется, и то, какими свойствами это выделение обладает, а не то, как мы это назовем. Какая разница?  Другой спор был про то, является ли CRDT алгоритмом консенсуса. Один из оппонентов считал, что да, потому что его определение алгоритма консенсуса включало CRDT. А другой считал, что нет, потому что его определение его не включало. О чем был спор? Поменялись ли свойства CRDT от этого хоть на йоту? Нет, CRDT что делал, ровно это и продолжает делать. Спор даже не притронулся к сути вопроса.  И так в нашей области постоянно. Особенно я люблю, когда удобные термины присваивают и переназначают им смысл. Например, до недавнего времени признаком функционального языка являлась строгая статическая типизация, но сейчас это уже не так. Или Алан Кей, который придумал ООП как объекты и передачу сообщений в первую очередь, но индустрии термин понравился и они взяли его для процедурно-классового программирования. А единственный ООП-язык теперь это Эрленг и он даже не пытается таковым себя называть, потому что не поймут.  Если совсем уж ударяться в философию, то так-то и вещей в природе не существует. В природе нет конкретно собаки или там яблока, есть просто набор атомов, которые в какой-то момент оказались «рядом». Это просто нам удобно эту совокупность атомов как-то покороче обозвать, но, опять же, к происходящему на самом деле это отношения не имеет. Мир прекрасно существовал до того, как человек придумал для него слова, а парадокс корабля Тесея не существует в природе, он есть только в голове человека.  Смотрите на суть, а не на терминологию, короче. Потому что терминологию со временем меняют, а суть остается. Stay woke.",380
"Идеей CRDT я загорелся, когда прочитал фразу «мерж изменений текста становится тривиальным, если каждой букве присвоить уникальный id». Обожаю, когда глубокие идеи с далеко идущими следствиями укладываются в одно предложение!  Но давайте по порядку. Что такое CRDT? Это семейство структур данных, обладающих интересным свойством: их очень удобно мержить. То есть бесконфликтный мерж прям гарантируется: я что-то поменял, ты поменял что-то другое, Вася у себя вообще все переделал, и независимо от того, кто, что, где, как и когда, все эти изменения можно слить в общую кучу полностью автоматически в любом порядке и получить идентичный результат.  Звучит как магия? Почему все этим не пользуются? Подвох вот в чем. Не для всего есть CRDT 🙂 То есть там, где такой алгоритм получилось придумать, CRDT есть и им можно пользоваться. А где не получилось — ну сорян, ничем не можем помочь.  Простейший пример CRDT — счетчик. Каждой операции присваивается уникальный id, грубо говоря, <id, delta>, и потом множества таких операций только объединяются. Я добавил 1? Кинь <X, +1>. Вася добавил 2? Добавь <Y, +2>. Обменялись ченжами? У обоих получился сет {<X, +1>, <Y, +2>}, который дает сумму 3 у нас обоих. Вообще объединение множеств это чуть ли не главный CRDT-прием, так что привыкайте.  А, забыл сказать. Удалять из этого множества никак нельзя. Потому что вдруг придет какой-нибудь Валера, который снял снепшот в 2007-м году, отключился от интернета, добавил единичку и потом пришел синкаться обратно только в 2022-м. То есть CRDT даже для одного числа это по сути неограничено растущее множество. Это еще одна причина, почему CRDT до сих пор не в каждой дырке.  Кстати, множество без удаления это тоже CRDT, очевидно. Тут любят приводить в пример корзину на Амазоне (а то, что из такой корзины нельзя удалять, так бизнес даже не против).  Еще один дегенератский вид CRDT это Last Write Wins. К каждому значению прикрепляем таймстемп и при мерже оставляем только то значение, у которого таймстемп больше. Ходит как CRDT, крякает как CRDT, значит может им называться. Полезность такого CRDT под большим вопросом, как осмысленно определять время между распределенными узлами не знает никто, но как escape hatch, когда ничего стоящего придумать не получается, а гарантий _хоть чего-нибудь_ хочется, сойдет. В конце концов, большинство систем сегодня так и так это Last Write Wins, только тут он математически формализован, получается.  Из полезного, для чего нет осмысленного CRDT (насколько я знаю) это линейный список. Например слайды в презентации, сделать так, чтобы их можно было переупорядочивать-удалять-добавлять вроде как на CRDT хорошо нельзя.  Но самое практичное это, конечно, текст. Как это ни странно, но для редактируемого текста есть хороший CRDT, и не один. И да, он обеспечивает бесконфликтный мерж любых изменений. Но на практике, при всех концептуальных плюсах, как-то не особо видно продуктов, основанных на CRDT. Может что-то с ним и не так, хотя я сходу не отвечу, что именно. Даже готовые библиотеки уже есть, а продуктов все никто не строит!  Еще мы как-то прикидывали, получится ли сделать на CRDT систему контроля версий. Из интересных свойств — CRDT отслеживает авторство каждой буквы в тексте. Побуквенный blame!  Кроме того, любой снепшот хранит всю историю редактирования, включая ответвления. То есть можно брать изменения Васяна и галочкой включать-выключать их прямо по ходу разработки. Или отматывать назад историю прям побуквенно, по ходу набора текста. Все это получается считай бесплатно.  Ну и отсутствие конфликтов. Кто не хотел бы Git без конфликтов? Я бы хотел.  Засада только, что для CRDT нужен специальный редактор. Нельзя поредактировать текстовый файлик в Vim-е и потом засунуть его в CRDT. Все это довольно плохо встраивается в сегодняшнюю plain text-ориентированную инфраструктуру.  Так что будущее конечно светлое, ждем, когда же наконец наступит. Может найдут применение когда Линукс завоюет десктопы.",381
"Мой любимый голливудский троп — что армия на тысячу человек может ВНЕЗАПНО так выйти из-за угла. Или спрятаться в пещере. Или что путешественники могут ВНЕЗАПНО увидеть замок, к которому подошли почти вплотную.  Интересно, что на площадке всегда есть continuity expert, который следит, чтобы кружки стояли в нужных местах, шапки висели там, куда их повесили, и так далее, когда снимают несколько дублей.  Но почему-то нет эксперта по здравому смыслу. Который бы подсказал, что полностью маскировать целое поселение маскхалатами, включая дома, когда кто-то проходит мимо — ну, кхм, не очень реалистично.  Тяжело смотреть кино, когда ты взрослый, короче. Особенно плохое.",382
"Ладно, еще один момент из серии здравого смысла — почему хоббиты в новом сериале все поголовно грязные, как будто только что в лужу упали? Не в поизносившейся одежде, а именно куски грязи на лице, и ходят целый день так по своим делам.  Я понимаю что пытались показать некий намек на «деревенскость», и, допустим, укладку волос не стоило им делать. Но в деревне люди так-то не ходят с грязными рожами вообще-то. Это просто неприятно. Вспомните оригинальных Властелинов Колец — вполне себе деревеская жизнь и атмосфера, но без размазанной грязи по лицу, с достоинством и уважением к себе.  Вспоминается возмущение авторов оригинальных Фоллаутов тем, что из них сделала Бесезда. В оригинале общество после ядерной войны, да, у них конечно поменьше ресурсов и жизнь проще и сложнее, чем до, но на улицах не валяется мусор, а внутри помещений чисто и обустроено, в меру возможностей, потому что люди там ЖИВУТ. Война это конечно катастрофа, но это не значит, что жизнь остановилась, она стала просто другая, какие-то социальные структуры поменялись, но она идет, и в любой ситуации человек будет в первую очередь обустраивать свой быт тем, что у него есть под рукой.  А в третьем-четрвертом этого как-то не поняли, и вместо сути сосредоточились на внешней составляющей: все раздолбано-развалено-проржавело, причем даже в тех местах, где люди активно якобы живут, все выглядит так, как будто война там прошла только вчера: кафе завалены мусором, в домах дыры и т.п.  Внешне все выглядит почти так же, но смысл улетучился. Люди так себя не ведут, они так не живут. Пропало ощущение настоящести, которое укореняло оригинальный фоллаут в быту и отчего он бил еще сильнее.  Короче, если делаешь environmental storytelling, убедись, что не рассказываешь полную чепуху.",383
"В соседнем Grumpy Chat (кстати, подписывайтесь, если любите псить на интерфейсы) Сергей Трофимов нашел очень сомнительное явление: бейджик для репозиториев «Maintained/Not maintained», который надо каждый год обновлять. То есть ты ставишь его себе, например, в 1997-м году, и первого января 1998-го он начинает показывать «Not maintained». Будь добр обнови, если проект все еще жив.  Почему меня это стриггерило? Ну, во-первых, это абсолютный шум, а не сигнал. То, что человек нашел раз в год время поправить какую-то цифру, не говорит о реальном статусе проекта ВООБЩЕ ничего. Блин, да он может вообще скрипт написал. В этом смысле тупо посмотреть на дату последнего коммита и то полезнее. Сюда же относятся любители находить в подвалах «© 2017-2019» и «контрибьютить» пулреквесты, меняющие цифру на 2020.  Ну а второе это конечно мысль о том, что если что-то давно не обновлялось, то с этим что-то не так. И сопутствующая ей мысль «если есть свежие коммиты, то все ок».  На самом деле должно-то быть наоборот: если есть свежие коммиты, значит что-то НЕ окей. Значит софт нестабилен, значит что-то ломается, меняется, значит клиенты им не до конца довольны, и хорошо бы подождать, а то проблем не оберешься. Вспоминаю историю, когда чуваки померяли количество инцидентов на продакшне и оказалось, что самые стабильные периоды — когда они ничего не релизили. Прям на порядки стабильнее, чем в рабочие периоды.  Ну и как бы если программе пять лет, то что, она от этого менее полезной становится? Да нет же! qsort-у в glibc сколько, лет 30? И ничего, работает, кушать не просит. Мысль о том, что что-то можно закончить и оно будет нормальное и не будет портиться — она какая-то слишком радикальная в мире, где каждую неделю выходит горячий новый js-фреймворк. Я уже, кажется, писал, как люди любят на Hacker News к статье дописывать год: мол, ах, 2018-ый, читайте с отсторожностью, какими же наивными были эти древние римляне!  Хотя к публикациям, как и к коду, как и к идеям, у меня отношение простое: важно то, ЧТО сказано, написано, сделано, и НЕважно, кем, как и когда. У меня нет проблем украсть идею из 70-х годов, если это хорошая идея: почему нет? Многим людям мысль, что люди тогда тоже кое-что соображали, кажется почему-то слишком возмутительной. Хотя люди, в общем-то, точно такие же жили, для эволюционных изменений слишком мало времени прошло, чтобы сегодняшние 16-летние фронтендеры приобрели сверхинтеллект.  Я даже как-то подумывал убрать все даты постов со своего сайта: вот идеи, нравятся — берите, нет — уходите, только пожалуйста, не начинайте обсуждать, КОГДА это написано. Потому что — ну какая разница? Может, еще уберу.  С кодом это делать сложнее, потому что гит как раз слишком хорошо отслеживает даты любого пука. Так что тут только надеяться на здравый смысл и на то, что люди окажутся разумными и посмотрят чуть глубже, чем на дату последнего коммита, прежде чем решить, что им подходит.  Спойлер: не окажутся. Но других людей у меня, конечно, нет.",384
"Про ICFPC кратко:  - Участвовали вдвоем с Павлом - Опять был микс Кложи и Раста - Раст обогнал Кложу в 7 раз на переборе, но писать на нем без опыта тяжеловато. Пока вызывали функцию устали - Кложа зарешала просто опытом. Все-таки не стоит недооценивать владение инструментом, а не только сам инструмент - Zig потенциально рассматривался, но я загнал себя в угол тем, что поставил бету macOS, а он на бете не работает. Почему? Потому что все проклято в этих ваших компьютерах, вот почему. Откатить бету, как понимаете, еще большая боль, чем писать на Расте - Опять едва дошли до этапа «вся инфраструктура понятна, давай придумывать алгоритмы», который, теоретически, должен быть самым интересным - В итоге написали алгоритм, который разбивает картинку полностью случайно и пробует покрасить. Без всяких оптимизаций, поисков локальных минимумов и т.п. Каждый раз новый абсолютно случайный вариант. И даже такое неплохо зарешало - Спецификация в этом году была жесть. Много ошибок и неясностей, как в тексте, так и в playground-е. Но ничего, разобрались потихоньку - Задача в принципе интересная. После соревнования я не удержался и сделал еще несколько заходов, что явно хороший знак. Визуализации, опять же, милые получаются - Humble UI рабоатет, но только в моих руках и не без проблем. Кому-то другому я его, пожалуй, пока давать бы не стал, слишком много нюансов. А так — прекрасная штука чтобы быстро накидать UI и визуализации, кажется потенциал есть - Это мой четвертый ICFPC, и судя по прогрессу, надо что-то менять, потому что прогресса не очень много 🙂 Может быть в следующий раз стоит присоединиться к реально большой команде, посмотреть, как оно вообще бывает. Хочется вот этого духа, когда на стене дашборд с отстванием от лидера по каждой задаче, в комнате восемьнадцать компьютеров, а в облаке еще десять 48xlarge загружены под 4800%. Самое обидное, это когда ты идешь спать, а алгоритма, которым ты мог бы загрузить даже простаивающий ноут на ночь, у тебя нет  Как всегда, горячо рекомендую, отличный опыт",385
"Конечно, смеяться над USB-комитетом легко. Это люди, которые сначала выпустили USB 3.0, а потом переименовали его в USB 3.1 Gen 1 (что? да!), когда пришла пора выпускать USB 3.1 Gen 2. Потом вышел USB 3.2, и, что вы думаете? 3.0, который стал 3.1 Gen 2, теперь стал USB 3.2 Gen 1 (да!), 3.1 Gen 2 стал 3.2 Gen 2, ну и наконец новый 3.2, ради которого все затевалось, стал... нет, конечно же не Gen 3, это было бы слишком просто. Он стал USB 3.2 Gen 2×2.  Потом вышел USB4, и проверенную временем схему решили не менять, то есть назвали все опять хуй знает как. Оригинальная спека называлась USB4 Version 1.0, новая: USB4 Version 2.0. Очень удобно, спасибо.  Но вообще версионирование дело сложное. В HDMI есть очень большая разница между, скажем, HDMI 2.0, 2.0a и 2.0b. Не говоря уж о том, что 2.1 это огромный шаг вперед по сравнению с любыми 2.0*. Удачи не упустить эти тонкости в магазине.  Я все это к чему? Есть одна очень простая схема версионирования: число. Да, одно-единственное натуральное число, которое монотонно растет. Как у Хрома — 69, 70, 71. Всем понятно, легко запоминается, легко коммуницировать, ни к чему не обязывает, позволяет легко прикинуть, как сильно ты отстал. Единственный минус — не получится через пять лет выпустить красивый «Продукт 2.0», но это, конечно, мелочи и всего лишь амбиции.  Но как же семантическое версионирование, скажете вы? А никак. Красивая идея, которая тупо не работает на практике. Потому что людям нравится приписывать числам какие-то свои «правильные» смыслы, а не то, что они должны на самом деле отражать.  Скажем, большинство продуктов/библиотек застревают в 1.*.* и никогда не меняют MAJOR версию, хотя, по логике, она должна меняться КАЖДЫЙ раз, когда API меняется несовместимым образом. Какая-то функция принимала NULL, а теперь перестала? Все, бампай мажорную версию.  Не хочется? Кажется пустяком? Может как-нибудь обойдется? Ну вот так мы и приходим к ситуации, что цифры в semver не значат ни-че-го. То есть они означают какую-то субъективную для мейнтейнера «важность», но что это такое никто кроме него не знает и, в общем, не интересуется. Линус, например, вообще произвольно бампает мажор, когда ему надоедает до двадцати считать. Почему? А нипочему.  Идея указывать ranges с семвером меня вообще забавит больше всего на свете. Ребята, версию можно только зафиксировать, заморозить полностью. Вещь либо в точности такая же, как когда ты ее скачал, либо уже совсем другая. И даже если она перескочила всего лишь с 1.4.11 на 1.4.12, никто никаких гарантий вам не даст и что-нибудь у вас обязательно сломается. Просто потому что семвер — это идеализированное представление разработчика о мире, а не какая-то математическая нотация.  Есть еще CalVer, но он тоже особой радости не приносит: много цифр, а толку мало. Ну окей, у вас 16.04 или 2021.12.17, мне-то от этого чего? Она или больше того, что мне нужно, или меньше, какое мне дело, в какой день какого календаря вы собрали свой сатанинский ритуал, чтобы ее выпустить? Особенно люблю моего бывшего работодателя, который выпустил IntelliJ Idea 2020.3.3 когда? Правильно, в марте 2021-го.  Короче, нет ни одного случая, когда КалВер был бы лучше одного натурального числа. IntelliJ Idea 25 — почему нет? Можно даже юбилей справить. Или на 69 🙂  Вот Майкрософт классно делает — 3, 95, 98, 2000, XP, Vista, 7, 8, 10, 11. Или Xbox, 360, One, One X, One S, Series X, Series S. Все просто и понятно, всем бы так!",386
"Такая история произошла вчера. Сижу, значит, работаю, никого не трогаю. Программировываю. Сделал даже что-то, думаю, щас закоммичу и спать. Открываю мой любимый Sublime Merge, смотрю изменения, стейжу первый файл, второй, третий, все нормально. Стейжу четвертый и оба-на: «You have not agreed to the Xcode license agreements, please run 'sudo xcodebuild -license' from within a Terminal window to review and agree to the Xcode license agreements.» Что-то вообще невиданное и неслыханное. Прям посреди работы.  Long story short, ровно в три часа ночи, видимо, Xcode решил обновиться. Обновленный XCode инвалидировал предыдущее согласие на whatever они хотят там чтобы я согласился. Ну а в Xcode Command-line tools входят всякие си-компиляторы, мейки, пипы и, внимание, git. Вот он-то и сломался. То есть гит сам по себе не сломался, но какая-то Эпловская хуйня решила запретить мне им пользоваться.  Дальше начались приключения. Команда, которую он просил выполнить, не работала. Зато оно пошло скачивать эти CLI tools по новой. Но и они тоже не работали. В итоге через час ебли я скачал их сам с найденной в интернете ссылки на раздел сайта Эпл, который еще и дев аккаунта требует. Ну и попутно удалил Xcode и переписал пути, куда этот CLI Tools смотрит (внезапно, в XCode тоже есть их копия, и они-то и не работали).  В общем-то, я компьютерами давно занимаюсь, и уже привык их причуды смотреть отдаленно, со стороны. Если все это близко к сердцу воспринимать, никакого сердца не хватит. Но тут у меня прям подгорело знатно, настолько это вопиющий идиотизм произошел.  Во-первых, ну какого черта это произошло в тот момент, когда я работал? Сколько машин лернинга и искуственного интеллекта нужно, чтобы определить, что отправляемые каждую секунду события mouse move и key pressed означают, что, возможно, ВОЗМОЖНО! человек сейчас за компьютером и неплохо бы ему не мешать? А, Сири?  Да, я работал в три часа ночи, НУ И ЧТО? Имею право. Не знаю, если у вас мак, вы наверное видели эти сообщения «There is software update, it will be installed tonight». Я видел их раз тысячу к этому моменту, наверное. Знаете сколько раз оно сработало? Правильно, ноль. НОЛЬ, блин. Ни разу я не видел, чтобы оно без моего участия действительно что-то там поставило, пока я спал. Каждое утро после такого я вижу «простите, что-то пошло не так, не шмогла». И вот я в кои-то веки решил посидеть ночью, и оно даже этот опыт умудрилось мне испортить!  Во-вторых, ну какого хера вообще git хоть как-то связан с xcode license? Это не ваша программа, вы ее не писали (как и большую часть xcode CLI tools), почему я должен просить у Тима Кука разрешения пользоваться тем, чем я могу пользоваться и без него? Xcode — ладно, допустим. Но Git??? У меня нет Xcode, он мне нафиг не нужен и я знать не хочу, что он такое и зачем он нужен.  Мне советовали поставить git из brew, но эти советчики забывают, что brew сам по себе работает на git и gcc/clang из xcode cli tools. И при первом использовании brew тебе нужно пройти через точно такую же процедуру скачивания и принятия какой-то там лицензии. Проклятый круг, ага.  Ну и в третьих, сама абсурдность ситуации. Сижу я, никого не трогаю, полностью счастлив, доволен ситуацией. И тут компьютер решает подкинуть мне проблем! На ровном месте. Просто потому что может. Я ебусь с проблемами компьютера (не моими!) добрый час, а в конечном итоге мое вознаграждение это точно то же состояние, которое было ДО апдейта. У меня тот же git, он точно так же работает и я наконец могу продолжать делать то, что я делал, только вот час времени я потерял непонятно на что.  Офигенное будущее! Скорее бы компьютеры в каждый дом.",387
"Вот кстати чего я не понимаю в почте, так это почему почти везде так хреново сделаны фильтры. Я пользовался Gmail с 2010-го, и, кажется, там ни разу даже редизайна фильтров не сделали. Сейчас зашел и они выглядят так же колхозно, как и в 2010-м.  Потом я перешел на Fastmail и там та же проблема: фильтры первичны, папки вторичны. То есть ты говоришь: если тема письма содержит слово «Receipt», положи его в папку «Receipts».  А хотелось бы наоборот: вот папка «Receipts», а вот набор критериев, по которым письма в нее попадают. Потому что в конечном итоге меня волнует именно папка, а не набор абстрактных «правил». Ну и думать в терминах объектов легче, чем в терминах действий.  Плюс когда тебе нужно наконец в существующих фильтрах разобраться и что-то там поправить, плоский список просто всех фильтров вообще это та еще помойка.  Понятно, что фильтры потенциально могут делать гораздо более сложные штуки, но сортировка по папкам вроде бы один из основых юзкейсов, нет? Почему не сделать именно ее нормально?  Это я попытался себе Hey собрать на Fastmail. Они классные категории, в принципе, придумали. Screening не получается легко повторить, но вот The Feed и Paper Trail вполне. Не хватает еще статуса «прочитано, но не отвечено», думаю, либо флаги делать, либо keep unread (но это зашквар, надо же как-то отличать то что я видел, но не ответил от того, что я еще не видел).  Альтернативно можно попробовать эппловский Mail, там как раз есть Smart Mailboxes (которые выглядят как шестеренки, но, наверное, можно к этому привыкнуть). Кто бы мог подумать, что Эпл впереди планеты хоть в чем-то.",388
"Ваня Гришаев открыл на своем статическом блоге девтулзы и увидел, что кроме 5 полезных запросов браузер выполняет еще и 69 (найс) бесполезных. Основные паразиты — Гугл АНАЛитика и комментарии Дискус.  Долгое время у меня в блоге тоже, как и у всех, стояла аналитика. Каждый пользователь считался, все данные сводились в (ужасный, прям кошмарный, прям удивительно, насколько плохо гугл старается для своих самых ценных бизнесообразующих пользователей) дэшборд и можно было даже в реальном времени посмотреть, сколько бедолаг прямо сейчас продираются через мой английский и терпят невыносимый желтый фон.  А потом я подумал — и что? Ну да, можно узнать, сколько каждую статью прочитали. Раз в полгода я про это вспоминаю и даже захожу посмотреть. Ну да, какие-то статьи более популярны, а какие-то менее.  А дальше-то что? Что с этим делать? Писать я все равно пишу только о том, о чем есть, что сказать. Подстраиваться под аудиторию не умею. Оптимизировать время суток, в которое выкладывать контент — ну, у меня пост выходит раз в два месяца, много не наоптимизируешь.  Подумал-подумал, и так и не придумал. И выпилил АНАЛитику полностью. И с тех пор ни разу не пожалел. Страницы грузятся еще быстрее, Гугл знает про меня и моих посетителей еще меньше, а жизнь моя не изменилась от слова никак.  Не, в Телеграме я, конечно, поглядываю на цифру подписчиков, но главным образом потому, что она тут на самом видном месте и ее особо никак не отключить. Но главная метрика все еще — живой фидбек, через который чувствуется настоящая популярность.  А на Грампи аналитики не было с самого начала by design. Так что когда мне говорят, что любят этот проект, это для меня большой сюрприз — я никогда не знал и понятия не имею, сколько людей его читают. Да в вебе особо и не подсчитаешь нормально, учитывая RSS (вы же через RSS подписаны, да?).  Делаю что должно и будет что будет, в общем, а гугл пусть как-нибудь уже без меня.",389
"В комментариях возникло мнение, что может быть и не стоит стараться ради пользователя, вычищать скрипты, оптимизировать скорость сайта, делать хороший дизайн. Мол, пользователям и так нормально.  И знаете что? Я соглашусь. Бизнес-причин делать хорошо действительно нет.  История показала, что дизайн это очень слабое конкурентное преимущество, а юзер идет за функцией/контентом, а не за дизайном. У Амазона хуевый дизайн, но куда юзеру еще пойти? Другого амазона-то нет. Амазон победил не потому, что у них хороший сайт, а потому что у них есть то, что нужно людям.  Или статья лежит на Медиуме, да, тяжко, но а что делать? Больше она нигде не лежит. Так что хочет пользователь или нет, но ему придется ее читать именно на Медиуме. Не то чтобы у пользователя был выбор между хорошим reading experience и плохим и он мог бы проголосовать за него рублем. За него этот выбор уже сделал автор статьи.  Поэтому если ориентироваться только на бизнес-метрики, можно прийти к выводу, что делать хорошо совсем не обязательно. Более того, можно делать практически как угодно плохо и чуть ли не плевать пользователю в лицо, и у вас все равно будет все хорошо, если бизнес-модель работает. См. мемы про то, во что превратился современный интернет с кукамми, попапами, рекламой и пейволами — это выглядит максимально абсурдно, иногда за попапами и рекламой вообще не видно контента, и тем не менее никто не торопится делать лучше.  Так что если вы хотите найти мотивацию делать хорошо, не стройте иллюзий что это зачем-то нужно бизнесу. Не нужно. Мотивация сделать хорошо может идти только изнутри, это должно быть нужно лично вам, из профессиональной гордости, из чувства уважения к себе и к своему читателю. А платить за это, платить никто не будет. Потому что и так нормально.",390
"Примерно сутки нужно Гуглу, чтобы слить мою информацию Фейсбуку. Стоило вчера один раз поискать на Ютубе часы, и сегодня каждый третий пост в Инстаграме их рекламирует.  Одного не пойму: разве Гугл не воюет с Фейсбуком? Или война войной, а персональные данные это общий хлеб?",391
"В связи с новостями о возможной мобилизации внезапно вспомнил, что я аж целый лейтенант запаса.  В практическом смысле это означает, что в универе я два года раз в неделю наряжался в военную форму, ездил на кафедру и целый день сидел с десятком других студентов в пустой аудитории, потому что наш взводный, он же лектор, в рот ебал (профессиональный военный термин) нас чему-то учить и уходил заниматься своими делами.  Покидать кабинет нельзя. Шуметь нельзя. В остальном делайте, что хотите. Звучит не так страшно, но надо напомнить, что мобильные телефоны тогда если и были, то играть на них можно было максимум в змейку. Поэтому это была самая настоящая пытка бездельем. Не, я, конечно, догадывался, что военные мастера по части садизма, но не настолько.  Серьезно, попробуйте просидеть рабочий день без телефона, компа и какой-либо цели. Час выдержите? Нам нужно было высидеть восемь. Настроение не улучшал и тот факт, что у остальных студентов это был просто свободный, сука, день. Счастливые люди.  Еще это означает, что по окончании кафедры мы уехали на военные сборы. Это такой палаточный лагерь на месяц, где ты ходишь строем, разучиваешь песни, питаешься в хуевой столовой и выезжаешь один раз пострелять на полигон. На подготовку офицера выделяется десять, кажется, патронов. Это за все время, за два года. Родина, конечно, богатая, но ресурсами зря не разбрасывается.  Запомнились, ну, во-первых, протекающая под дождем палатка, из-за которой приходилось проситься спать к соседу на койку. Во-вторых, студенты военного института, будущие кадровые офицеры, которые пиздили у нас из палаток вещи, пока мы были на зарядке. В-третьих, история, что меня (да, лично меня) отчитали за то, что я на вопрос «что защищает взвод» ответил «Родину». Прям вывели из строя и прочитали лекцию, что в каждом наборе есть вот такой вот умник, который не воспринимает происходящее серьезно и из-за нас, умников, видимо, армия катится туда, куда она катится. Хотя что может быть серьезнее, чем защита Родины?  Правильный ответ, кстати, «взвод защищает позицию взвода». Охуеть единица знания, да? Из серии «как называются несколько ворон в английском».  И, конечно, запомнился туалет.  О, туалет. Видели, может быть, в интернете фото странных туалетов, где два толчка друг напротив друга? Типа, смотришь в глаза соседу и срешь? Это был бы апгрейд по сравнению с тем, что родина выделила для подготовки офицерского состава.  В общем, это была большая открытая палатка мест на 12, два ряда по шесть дырок (что прям шесть не ручаюсь, но идея примерно такая). Сидишь на корточках, попердываешь, обсуждаешь новости с сослуживцами. Хотя какие новости, если вы весь месяц торчите вместе в этом лагере?  Это все меня так шокировало, что первую неделю я вообще не срал. Не знал, что это возможно, но сил пойти, снять штаны и присесть рядом с уже срущими людьми я найти в себе не мог. Конечно, через неделю природа взяла свое и я из хлюпика превратился в настоящего мужчину. Не так уж и страшно оказалось. А главное — сплотился-то как! Общий боевой дух, крепкое плечо товарища, обсуждение пищеварительных особенностей прямо в процессе опорожнения.  Оглядывась назад, скажу спасибо, что мы эту яму хотя бы не сами копали. Все-таки заботится родина о своих офицерах, пусть и как умеет.  Я, конечно, вместе со всеми офигеваю сейчас от кафкианских дел за дискредитацию армии. В первую очередь потому что они охуели, а во вторую еще и потому, что никто так не дискредитирует российскую армию, как сама российская армия. Лучше бы ее вообще не было, но если есть, то пусть хоть такая.  Помимо того, что военная кафедра воспитала во мне не стесняющегося срать при других мужика, я получил легальную возможность не ходить в армию в обмен на то, что когда-нибудь, возможно, меня могут мобилизировать. Потому что очевидно, что за два года сидения в кабинете без дела, которые случились 15 лет назад, у меня накопилась огромная командная экспертиза.  Ну что ж, шлите повестку, Берлин, Брандербурские ворота, до востребования.",392
"В принципе Артемий Лебедев давно уже подзиговывал, и требовалось довольно большое усилие, чтобы пытаться воспринимать это как «независимую точку зрения», «собственную, никем не навязанную повестку» и «я в конфликтах не участвую, я их документирую».  Но сегодня он сдулся окончательно, перепостив такую хуйню, от которой должно быть стыдно не то что ему самому с имиджем «самостоятельно думающего человека», а даже первому каналу. Вот отрывки:  «Где-то в Украине сидят такие же парни, как вы, такого же возраста, мелкими профессиональными группами. У них есть задача сделать нам плохо любыми способами, например, путем разгона любой истерики по любым информационным каналам.  [...]  У обычного молодого человека должен возникнуть эффект, что ну всё, это полный караул, как дальше жить — не ясно. Завтра меня заберут и кинут голодным и холодным умирать. За этот эффект оплата идет в долларах, этим занимаются профессионалы.  [...]  Наши специилисты стараются делать то же самое в информационном пространстве оппонентов, но это получается сильно хуже, так как у нас 5% от их бюджетов и все площадки принадлежат им. Игру эту тоже они придумали. Но это нам не сильно важно сейчас.»  И я даже не о том, насколько это отвратительно, а о том, насколько это не поддается никакому здравому смыслу вообще. Натурально, ссут в уши прямой струей.  Почему у «наших специалистов» меньше площадок? У «наших специалистов» целая, блядь, машина госпропаганды. Да им вообще все площадки принадлежат, 100%, ну может 99%, если вычесть тот мизер, который пока умеет ходить куда-то еще через ВПН.  Про зарплаты и бюджеты в долларах это чистая манипуляция же, я думал в такое только дети детсадовского возраста верят, не? Как это вообще технически устроено? Ну я вот писал что-то против мобилизации и дискредитировал армию, и что? Где мне за это деньги получить? К сожалению, все гораздо проще: люди пишут то, во что верят, и за этим нет никакого глобального заговора. Глобальные заговоры вообще штука настолько логистически сложная, что или сразу вскрываются, или невозможны в принципе.  Ну и последний факт, про «искажение повестки» в попытках нагнать страху. Ребята, Путин по телевизору мобилизацию объявил? Объявил. Сколько ему за это заплатила США, чтобы от отвлекал бедных айтишников Вконтакта, Яндекса и Сбера от работы и вселял в них ужас? Да нисколько.  Я просто в очередной раз поражаюсь, как сильно можно искажать очевидные вещи. Полгода назад было очень трудно донести до родственников тот факт, что Россия вторглась в Украину. То есть это буквально случилось, это факт, который ну никак не проинтерпретируешь в две стороны. Солдаты. Русские. На территории Украины. Факт. Не мнение. И тем не менее они умудрялись как-то находить способ в это не верить.  Так и тут. Путин. Телевизор. Собственным ртом. Алло! Кто тут кому навязывает повестку США за доллары? Как, блядь, можно это двумя способами интерпретировать?",393
"Пытался тут на днях по-быстрому приделать десктоп-нотификации к твич-стриму. По-быстрому, ха-ха.  Коротко: у меня не получилось. Я, в общем-то, был готов, но было интересно посмотреть, где конкретно застопорится.  Документация Эпл штука примерно уровня class Notifier — выводит нотификации или getValue — return value, то есть бесполезна примерно полностью. АПИ тоже не блещет самоочевидностью: NSUserNotification, NSUserNotificationCenter, NSUserNotificationCenterDelegate, нетипизированные словари с ключами, которые «нужно знать» (tm), ну и конечно две версии АПИ, потому что потому. Примеры, скопированные прямо из доки, конечно, падают с сегфолтом, включая банальнейшие UNUserNotificationCenter.current(), с которого вообще любой пример начинается.  Может на Свифте внутри Xcode оно работает, я хз. Разработка, видимо, не предполагает таких сумасшедших, как я, все нормальные люди сидят в Xcode, поэтому в документации, например, не написано, какой заголовок подключать, чтобы получить нужный класс. А зачем? Xcode сам за тебя все сделает, не беспокойся.  Не, я пошел даже скачивать Xcode от отчаяния, но он у меня не запустился, потому что у меня macOS Beta, а бета-юзеры должны, понятно, страдать. Кстати, никогда больше. Самое смешное, что бета работает прекрасно, все на месте, ничего не глючит, кроме, блядь, XCODE. И самое идиотское, что он мне даже не нужен, но мозги ебать все равно умудряется регулярно.  Ну ладно. Слава богу что есть Гитхаб, да? Нагуглил пару примерчиков, в том числе консольных приложений, которые вроде как могут показать нотификации. Бился битый час, чтобы скомпилять. Скомпилял. Вылезло окошко «Разрешить показывать нотификации?». Я навожу мышь, а там, если знаете, это такой прямоугольник небольшой, у которого в правом нижнем углу есть невидимая область, совсем мизерная, которая показывается только при наведении и в ней уже появляется кнопка «Разрешить». Ну вот я навожу и чуть-чуть промахиваюсь. То есть кликаю не по кнопке, а на пару пикселей выше, по самой нотификации.  Что же произошло? Нотификация исчезла, решив, что я НЕ РАЗРЕШИЛ. Ну и конечно, отменить это решение нельзя. Второй раз спросить тоже нельзя. Ну то есть как. Можно пойти в System Settings, найти и там уже вернуть как было, но это надо самому. Правда, это если нормальное, полноценное приложение (критерии полноценности уточняются). А если просто скрипт, то в System Settings его не будет. Как? А вот так.  Ладно. Иду гуглить. Пишут, что для таких косых дебилов, как я, во время сборки Xcode положит (покладет?) специальный скрипт в какую-то там специально отведенную папочку, и этот скрипт заресетит нотификации конкретно для вашего случая. Ха блин ха. Что делать косым дебилам, у которых хватило слабоумия дергать macOS API напрямую из С-программы, не пишут.  Как это работает я тоже не очень понял. Потому что я пересобирал программу, то есть формально это был уже другой бинарник, но запроса на нотификации не появлялось. В отчаянии я догадался склонировать, собрать и потестить тот самый пример, из которого я тырил реализацию, он собрался, но даже он ничего показать не смог, я грустно всхрюкнул и забросил эту затею к херам собачьим.  Мораль? Мораль такая: почему, блин, нельзя нормально? Почему простая задача: показать окошко с текстом, которую решают уже десять лет, вызывает столько ебли? Почему нельзя сделать АПИ в стиле: вот метод, вот аргументы, вызвал-показалось? Почему надо что-то куда-то положить, как-то правильно скомпилять, долго что-то там инициализировать, хитровыебнуться (тот пример, например, манкипатчит класс NSBundle в рантайме), бубном потрясти, рядом написать plist недокументированного, но принципиально важного содержания? Зачем полагаться на ИДЕ, которая вместе со сборкой программы сгенерит какие-то вспомогательные скрипты, зачем ломать старые версии Xcode на новых версиях ОС? И все это, чтобы показать дурацкое уведомление.  Нет ответа. Because fuck you, that’s why. А что ты сделаешь? Мамке пожалуешься? Куда пойдешь, на линукс, что ли?",394
"По поводу чехарды с macOS Notification API есть еще два соображения.  Во-первых, зачем вообще позволять пользователю контролировать уведомления? Очень просто: потому что производители приложений уже давно не работают в интересах пользователя. Понятно, что если дать корпорациям волю, они будут заваливать вас спамом каждые десять минут.  В нормальном мире этого бы не происходило. Ну, допустим, сайт может тоже показывать попап раз в минуту, но большинство сайтов этого все-таки не делают. Почему? Потому что если мешать пользователю, тот уйдет. Так же, по идее, должно быть и с приложениями — ну не нравится тебе, что оно рекламу свою тебе тычет, ну удали и не связывайся.  Однако с приложениями это не работает, потому что монополии. Ну вот поставил ты условный гугл или убер, куда ты с них сбежишь? Да никуда, потому что у конкурентов то же самое. Или условный easyJet, тебе может не нравиться, что делает приложение, но лететь-то тебе нужно, правильно?  Самое смешное, что вся эта тема с запретом нотификаций на системном уровне не особо-то и работает. Например, я поставил себе приложения разных авиакомпаний, такси и самокатов, и я в принципе хочу получать уведомления, когда что-то важное для меня происходит. Такси приехало, самолет улетел. А они этим пользуются и шлют рекламу. Ну что мне, нотификации отключать после каждой поездки, что ли?  В идеале апстор должен бы был как раз такие ограничения насаждать и карать за рекламные нотификации. Может, они и карают, но я так подозреваю только инди-девелоперов. Ну что, пойдет условный Эпл к условной целой авиакомпании и выкинет их приложение из стора за рекламу, что ли? Не, там явно другие правила.  А второе соображение связано со взлетом сначала веб-технологий, а потом и Электрона. Понятно, что главная причина — достаточно написать сайт один раз, а не пять (три десктопных ОС + две мобильных), что сильно экономнее и организационно проще. Ну и сама абсурдность, что для кросс-платформенного приложения вы должны один и тот же компьютер, прям буквально с тем же CPU, GPU, RAM, убедить делать одно и то же тремя разными способами, просто бредовая, и я про это уже писал.  Но вот во-вторую очередь, я подозреваю, победа веба над нативом в том, что они смогли сделать адекватные АПИ, хорошо их абстрагировать, а десктопные ОС не смогли.  Вот как показать нотификацию в Электроне:   const {Notification} = require('electron');  new Notification({     title: 'Headline',     body: 'Here write your message' }).show();   Просто, понятно, быстро, без ебли мозгов. Работает сразу на трех платформах. И даже Xcode не нужен! Да даже компилятор не нужен. Чудеса, а что, так можно было?  И так во всем. Работа с камерой, микрофоном, мышью, акселерометром, цветом, GPU — да чем угодно, высок шанс, что веб делает это проще, а десктоп, как всегда, не справился.  «Но это же не настоящее программирование...»  Вот знаете что? А я устал от настоящего программирования. «Настоящего», конечно, в кавычках. Почему, скажем, для эпл-скрипта, который игрушечный язык для непрофессиональных пользователей, показать нотификацию занимает одну строчку кода?   osascript -e 'display notification ""hello world!""'   Почему мы, «настоящие» программисты, обязательно должны страдать? Ради какой высшей цели? Почему, если вот прям рядом есть примеры, как то же самое делается легко и играючи, почему так нельзя всем? Я тоже хочу легко и играючи, я устал идти в гору против ветра каждый день по восемь часов.  Потому что нет конкуренции, вот почему. А куда вы денетесь? ОС вам все равно нужна, чтобы запускать ваши приложения, какая бы она ни была. Так что зачем стараться?  Только потом не удивляйтесь, что писать десктопные приложения никому не нравится.",395
"Работал я как-то в такой компании как Сибирьэнерго-Биллинг. В основном потому что близко к дому, да еще потому что на предыдущей работе не платили зарплату несколько месяцев. Пилили мы какой-то веб сервис по учету платежей для кого-то? Сложно сказать, я подзабыл уже, да оно до внедрения так и не дошло все равно.  Ну и вот. Все по-серьезному, команды, отделы, руководители, архитекторы, целый этаж человек. Собирались на дейлики, обсуждали архитектуру, планировали, утверждали, согласовывали, обмазывались всем самым «серьезным», что на тот момент было: джавой, спрингом каким-то, хибернейтом, викетом. Писали миграции для постгреса, хранили код в SVN-е, заказывали консультации, все как у взрослых людей. Запрещали соцсети в рабочее время, ходили на работу к восьми утра мимо жирокомбината. Даже стиптизеров на восьмое марта для девочек приглашали. Это вам не академ, это центр города-миллионника, все-таки.  Год, в общем, писали, и это только со мной. До меня еще год, кажется. Всем все нравилось, всех все устраивало, все чувствовали, что выкладываются на полную и даже немного превозмогают. Но главное, чувствовали, что то что мы делаем это очень серьезно. Не, ну а че, думаете, положить данные в базу, а потом достать их оттуда и показать на веб-страничке, это легко? Ха.  Ну и в общем я тоже был еще молод, не особо как-то задумывался, насколько хорошо мы работаем. А потом я попал в кружок функциональных программистов (мне пришлось тогда написать проксю, чтобы читать ЖЖ на работе в обход блокировок) и узнал, что вообще-то языки бывают разные, платформы тоже бывают разные и то, что мы делаем, внезапно, можно делать более чем одним способом.  А еще заметил, что периодически разные платформы хвастаются производительностью своих веб-серверов: у кого 10К соединений, у кого сто тыщ запросов в секунду, в таком духе.  Интересно, подумал я. А результаты-то разные. Сильно разные. Оказывается, обслужить веб-запрос тоже нетривиальная задача! Ну или тривиальная, но все равно там имеется простор для оптимизации. Другими словами, ее можно делать не только хорошо и очень хорошо, но еще и очень плохо.  И стало мне любопытно. А как там наш сервер поживает? Мы ж два года его пилим, наверное, он в хорошей форме уже? Тыщу, может, запросов даст? Ну сотню хотя бы на моем ноутбуке? (не помню, кстати, ноут у меня был или стационарник еще. Есть подозрение, что стационарник).  Нашел какой-то бенч. Запустил. Померял. Меньше одного запроса в секунду. Каждую страницу надо было ощутимо долго ждать, и это на локальном сетапе, когда ты один-единственный пользователь.  Вот что дают вам «серьезные» технологии и «серьезные» процессы. Офисный дресс-код и негибкий рабочий день с восьми до пяти. И как вообще процесс связан с результатом (никак). Понимаете теперь, почему некоторые гос. сайты на обед закрываются?  Делайте reality check, короче. Чем раньше, тем лучше.  Я потом наших ребят еще git-у научил и транзакциям в БД. Но компанию это все равно не спасло, конечно.",396
"Dan Luu поднял в твиттере тему управления эмоциями применительно к работе. Если проще, то как бороться с прокрастинацией.  Например, он пишет, что ему помогло отсутствие расписания. В какой-то произвольный момент он пытается начать работать, если за 30 минут так ничего и не получалось, идет отдыхать. Потом делает еще одну попытку, и если не получилось опять, то позволяет себе честно отдыхать уже до конца дня. Пишет, что таким образом мог поработать 30 минут, пойти на скалалазанье, поработать еще 30 и уйти домой в 2 часа дня. Еще пишет, что за четыре года так наловчился, что мог по 60 часов в неделю работать не уставая, хотя я плохо представляю, как это уживается с таким свободным расписанием.  Jamie Brandon пишет, что долго боролся с прокрастинацией и чувством вины (и не работаешь, и не отдыхаешь, потому что «должен работать»). Ему, наоборот, помогло расписание: с 10 до 13 можно либо работать, либо делать ничего. Если работа не прет, то после 13 можно с чистой душой ебланить уже до конца дня. И даже в плохие недели это помогало хотя бы по три часа в день что-то делать и сохранять инерцию.  Тут, видимо, работает тот же эффект, как когда людей запирают в пустой комнате с одной-единственной кнопкой, которая бъет их током. Так как делать нечего, большинство рано или поздно начинают бить током себя, лишь бы не скучать. Думаю в этом же ключе купить себе отдельный комп в офис и не логиниться на нем ни в твиттер, ни в телеграм, ни в Ютуб. Правда, опыт показывает, что обычно это продолжается не очень долго.  У меня с производительностью в разные периоды бывало по-разному, но хорошей дисциплины не было никогда. Когда мне не нравилась работа или я выгорал, я мог целый день грызть себя, всячески прокрастинировать, лишь бы не запускать Идею, например. Тогда я со скрипом выдавал по одному-два небольших коммита в неделю, но шокировало даже не это. Шокировало, что всем было нормально и в принципе рассматривалось как нормальная производительность.  Сейчас мне все нравится, но работать получается начать только ближе к концу дня. Надо будет как-то научиться это принимать и давать себе отдыхать с утра с чистой совестью, раз работать все равно не получается.  Еще я заметил, что мне сильно не нравится делать то, что кто-то от меня сильно ждет. По этой же причине, кажется, не заходят туду-листы, так как это задачи, которые ждешь ты сам из прошлого. Fuck that guy, right? Зато придумывать самому себе задачи и «играться» нравится и психологически комфортно.  Еще хорошая фраза попалась в твиттере, что прокрастинация — это не лень, это trauma response, защитный механизм. Правда, там не объяснили, от чего, надо будет, видимо, у психолога своего уже спрашивать.  А у вас какие лайфхаки? Получается кодить больше четырех часов в день? Помогает ли расписание? Помидорки? GTD? Что-то неочевидное, может быть?",397
"У меня тут небольшой персональный сай-фай ренесанс, так что хочу поделиться и с вами тоже.  По дороге в офис слушаю Игру Эндера. Фильм я когда-то смотрел, но он не впечатлил меня особо. Книга же намного, намного лучше. Психологичнее, интереснее, сложнее, правдоподобнее. Сейчас уже на середине второй, тоже неплохо.  По телеку дома смотрю The Expanse. Сериал недавно закончился (надеюсь там все линии закрыли, да?), но как-то прошел мимо меня, так что наверстываю. Если расслабиться и принять его очевидную низкобюджетность, рассматривать картинку больше как иллюстрацию к событиям, то получится вполне себе хорошо разыгранная пьеса с хорошей горизонтальной интригой, сложно запутанным сюжетом, многофигурной композицией, правдоподобной политикой, нетривиальными решениями и — внезапно — очень убедительной орбитальной механикой и всякими особенностями жизни в космосе.  А главное — интересно, что же там дальше будет. Редкое, на самом деле, качество, потому что большинство фильмов уже так не удивляют, чтобы вот прям приковывать к экрану, даже если они хорошо сняты. Особенно в фантастике, которая, конечно, сейчас не свой золотой век переживает (как и остальное кино, впрочем). Из недавнего могу вспомнить Wayward Pines, которые строятся вокруг твиста, конечно, но хорошего и логически оправданного. Из старого — например, Cypher Винченсо Натали. Это такая стильная Матрица, если бы Матрица была нео-шпионским триллером. У Винченсо Натали вообще почти все фильмы обладают этим качеством — очень сильно хочется узнать, что же там дальше будет.  Ну и там вышел новый Пелевин, до которого я еще не добрался, но зато могу порекомендовать предыдущего, Transhumanism Inc — тоже, в общем-то, про Матрицу, только интересно,  смешно и с разных сторон, а не просто «у-у-у, мы все живем в симуляции, что ж теперь делать-то»? Мне кажется, симуляция это уже настолько избитая идея, что она может еще быть отправной точкой, но не может уже быть финальным твистом. Кину Ривз рассказывал, что пересказывал какой-то девочке Матрицу, говорит: «ну вот весь наш мир это симуляция», а она ему: «ну и что?». Действительно, и что?  Почитайте, короче, не разочаруетесь.",398
"Написал твит следующего содержания:  > Что бы вы делали, если у вас был компьютер с 10 ядрами, а ваш язык программирования мог использовать максимум одно?  Казалось бы, ну очевидно отстой, мощности бесплатно практически валяются, бери-утилизируй не хочу.  Но почти все ответившие так или иначе начали искать этому оправдание: то «я не делаю больше одной вещи за раз», то «запущу 10 процессов параллельно», то «остальное нужно для операционки для ее там дел».  Казалось бы, где в этих ответах логика? Делаешь одну вещь за раз, ну вот она могла бы в 10 раз быстрее делаться, чем плохо? Запущу 10 процессов — чего? Фотошопа? И зачем мне 10 фотошопов? Нужно для операционки вообще странно, сколько ей там нужно, один процент одного ЦПУ раз в минуту обновления проверить?  Лет пятнадцать назад, еще во времена ЖЖ, я зависал в сообществе любителей (ироничных, конечно) Алекса Экслера. И вот там была такая история: пошел этот Экслер на рынок в Москве компьютер новый себе собирать. Заказал самый топовый многоядерный процессор. А его не оказалось в наличии. И ему продали одноядерный. Он сам же это все у себя на форуме в подробностях описал. А через несколько дней выпустил статью уже для своего сайта, где с авторитетностью главного эксперта на Земле заявил, что многоядерным процессорам на компьютерах делать пока нечего, и любой здравомыслящий человек сегодня будет покупать одноядерный.  Казалось бы, пятнадцать лет прошло, а воз и ныне там.  Я всех ответивших, конечно, понимаю. Не мы такие, жизнь такая, что дали, тем и пользуемся. Но почему хотя бы не признать, что это неоптимальное положение дел, что можно — и нужно — лучше? Что у вас, идентичность разрушится, если вы признаете, что JavaScript или там Python не вершины эволюции языков программирования? В чем проблема сказать себе: да, я пишу заведомо в десятки раз более медленные программы, чем мог бы, ну и что, это мой выбор? Стыдно что ли? За что? Откуда этот защитный механизм, оправдывающий очевидное, вроде бы, положение вещей? Факт, практически.",399
"Давайте теперь так: вот что бы вы сделали, я дал вам язык программирования, который еще на этапе компиляции мог бы проверить вашу программу и гарантировать (!) отсутствие целого класса уязвимостей, которые присущи всем языкам другого типа?  Вам не кажется, что ответ «просто проигнорирую его существование и буду писать как раньше, мне нравится отсутствие гарантий и возможность накосячить там, где это можно было легко предотвратить» тоже немножко, кхм, инфантильным? А юнит-тесты, что юнит-тесты? Все равно их писать придется, хоть в твоем языке, хоть в моем. Зато разработка быстрее!",400
"Короче история, даже несколько. С общей моралью.  В первых, кажется, Пиратах Карибского моря есть момент, когда Джека берут в плен и требуют какую-то инфу выдать. Но он, понятно, хитрый жук, понимает, что как только скажет, его тут же за борт и сбросят, и придумывает схему: они ищут другой корабль, его туда пересаживают, отпускают на безопасное удаление, и он оттуда уже кричит то что должен был им сказать. На что Барбосса такой: что? Что за херня? Ничего не понял. Слишком сложно. И давай дальше Джека пытать.  Вторая история про то, как я АПИ документировал. Был у нас сервис комментариев, и к нему был язык запросов. Ну и я насочинял что-то про модели данных, типы, представление объектов, все красиво, ортогонально, типизировано. Показал менеджеру, а он такой: что за херня? Слишком непривычно. Давай нормальное АПИ, запрос-ответ, параметры. Я побрыкался, но смирился, сделал, как он просил, с моей точки зрения сильно все упростив и оболванив, лишив кучи интересных подробностей, сделав «как у всех», показал, а он такой: «ну вот, теперь это лучшее АПИ, которое я видел в своей жизни». Лучшее значит привычное.  Третья уже про Roam Research. Делали мы тут недавно магазин экстеншнов, сначала придумали как у всех: github-репозиторий, пулл-реквесты. Потом подумали: а у нас же сам Roam это текстовый документ, зачем еще Github вовлекать, если можно код прям в нем писать? Пусть и экстеншны так же отправляют. Тем более что прецедент уже был — у нас были специальные страницы, на которых можно писать CSS или JS и расширять Roam под себя наживую.  Звучало круто, мы таким образом продвигали собственную платформу, убирали зависимость от стороннего сервиса. Пару недель попилили в этом направлении, а потом собрались и решили: не, херня какая-то. То есть оно зарабатает, но ощущается неправильно. Противоестественно. Код должен жить в Гитхабе. Да, кликов будет больше. Да, зависимость на чужую платформу. Да, в Гитхабе есть куча лишнего, что для нашей цели не нужно.  Но Гитхаб людям понятен. Им не надо объяснять, что это и как. У них в голове уже есть модель его работы, можно сразу разговаривать в его терминах. Поэтому код в Гитхабе и активности вокруг него ощущаются так естественно. Так что даже если с формальной точки зрения заводить репозиторий под экстеншн это лишний шаг (по числу кликов или операций, например), с точки зрения людей, пришедших со стороны, для них это все равно проще, чем изучать новый способ писать и хранить код, пусть даже и чуть более эффективный для данного конкретного случая. Навыки работы с Гитхабом поддерживаются автоматически, а навыки хранения кода в Roam  в виде блока забудутся при первой же возможности.  Ну а мораль очень простая: не всегда оптимальное по чисто механическим метрикам решение (количество кликов, операций, скорость) будет оптимальным в глобальном смысле. Потому что есть еще привычность.  Ну и не все на свете стоит переизобретать заново. Да, я могу сделать, например, Гитхаб на 10% лучше. Но эти 10% не стоят того, что миллион людей в мире уже знают и пользуются Гитхабом и никуда с него не слезут. Нет, я не против инноваций. Более того, я считаю, в каждом продукте должно быть что-то новое, что-то, что оправдывает его существование. Просто не надо кидаться инновировать во всем. Иногда лучшее решение — сделать как у всех.",401
"Размышления из предыдущего поста позволили мне решить проблему, над которой я ломал голову довольно долго.  Проблема такая: утилити-функции. Они обычно слишком маленькие, чтобы заводить под каждую отдельный пакет. Это было бы как заворачивать семечки, каждую отдельно (да, я знаю, что в npm так и делают).  При этом утилиты нужны в разных местах, так что приходится таскать их с собой. Да, можно сделать один большой пакет, но тогда ты будешь таскать кучу лишнего каждый раз.  Ну вот, а решение — сделать макрос, который мог бы подключать функции из огромной библиотеки вообще всех возможных утилити-функций поштучно. С минимумом оверхеда, без всяких деклараций, пакетов, README, версий, релизов и т.п. Простая задача, простое решение.  (Это, кстати, к вопросу о том, зачем нужны макросы, что они могут такого, чего не может ваш любимый язык? Например, подключить функцию напрямую из интернета могут).  Ну вот. Сам макрос сделать раз плюнуть. Проблема, а где эти функции будут храниться? Я ничего лучше не придумал, как поднять сервис и сделать на нем форму сабмита, аккаунты всякие, браузер, поиск, ревью, емейл нотификации, логины-пароли, базу, бэкапы, резервирование.  С одной стороны, подход в духе Clojars, то есть прецедент есть. С другой, жопа полная, работы на год. Ну и проект отправился на полку.  И вот только недавно меня осенило, что я выпендривался там, где выпендривться не нужно. Хостинг кода уже есть — это Гитхаб. Ничего лучше (или, по крайней мере, понятнее) я все равно не сделаю. И при этом он снимает почти все головняки. Гениально! Да еще дает гарантию и доверие: код на Гитхаб выкладывать не страшно. Что бы со мной или моей затеей ни случилось, код будет доступен всегда и всем.  Такие дела, ребятки. Завести репу, обложить ее парой-тройкой скриптов и вперед. В нашем опенсорсном деле главное — придумать, как делать минимум работы с максимумом результата. А хостить целый сервис с юзерами я, наверное, пока не потяну. По крайней мере в свободное время и с прицелом на долгожительство.",402
"Когда я учился в универе, нам сначала показали С, потом С++, а потом и Java. И вот в какой-то момент мы спросили препода, на чем он сам работает? На Java, говорит, я С++ как-то не очень.  Ха! Подумал я. Слабак. С++-то настоящее программирование, а Java ваша какая-то игрушечная. Наверняка на ней ничего серьезного нельзя сделать, а преподавалии ее нам, я думал, может ради идей, но точно не для того чтобы потом на ней работать.  Сейчас, когда я повидал большую часть лестницы языков (ну, может, кроме ассемблера, настоящего низкоуровневого языка), я с трудом могу представить себя получающим удовольствие от низкоуровневых языков.  Нет, я понимаю, зачем они нужны, но очень расстраиваюсь каждый раз, когда простую на словах вещь приходится делать долго и сложно, обмазываясь миллионом несущественных деталей. Я просто не вижу смысла, работы много, результата столько же, и все устали.  На Zig сконкатенировать две строки это целая история. На Rust целая история конвертировать разные типы строк между собой и кастовать usize в i32 и обратно. Антон С++ недавно радовался, что смог распарсить аргументы командной строки на С++. Казалось бы?  Мне кажется, не все в мире должно бросать программисту вызов. Моя любимая функция в Clojure — slurp. Она берет путь до файла, читает его полностью и возвращает строку. Вот так тупо, принимает строку, возвращает строку. Внутри, конечно, куча сложных действий происходит: аллокации, динамический буфер, файловые дескрипторы, обработка ошибок. Но ты об этом не паришься, написал slurp и пошел дальше, как будто String.reverse() позвал (по уровню ментальной нагрузки, имеется в виду).  А как же... асинхронность? Потоковая обработка? Кодировки? Это все можно сделать, если будет нужно. Но как правило не нужно. То есть нужно в 1% узкоспециальных приложений, а в остальном — прочитал конфиг на пару килобайт и пошел дальше. Простые вещи делаются просто.  Настоящая сила высокоуровневого языка — в том, что он подкладывает соломки ровно там, где она нужна. А низкоуровневый, соответственно, заставляет тебя приносить несущественные детали реализации туда, где от них ничего не зависит. В самом деле, ну нет «более правильного» способа прочитать файл, если тебе не нужно делать это миллион раз в секунду. Любой подойдет. А миллион раз, как правило, не нужно.  Конечно, функции чтения файла целиком почти везде есть. Даже в Java. Правда, только с 11-й версии. До этого приходилось городить конструкцию из try-finally, нескольких вложенных InputReader-ов, StringBuilder-а и цикла по чтению. Поэтому на Java было так грустно программировать. И, кстати, они все равно умудрились такую простую задачу запороть: функция принимает не строку, а Path, который нужно еще создать. То есть не одна операция, а уже две (отдельный класс для путей на файловой системе — отдельная, глубоко мне непонятная тема).  Но по совокупности удобностей, практичности того, что идет в стандартной библиотеке, я ничего высокоуровневее Clojure не видел. А память выделять руками никакой жизни не хватит.",403
"Некоторые языки максимально строги и не терпят лишних запятых. [1, 2, 3,] будет ошибкой компиляции. Это из категории тех ошибок, что «ты ж знаешь, сука, что я сказать хотел, но все равно не работаешь!» Когда на такое натыкаешься, хочется сразу проветрить комнату.  Некоторые, наоборот, относятся к запятой в конце благоприятно. Мол, мы знаем, что это значит (ничего), все нормально, главное чтобы код работал. Но тут программисты начинают придумывать причины, почему писать [1, 2, 3,] на самом деле лучше, чем [1, 2, 3], и начинают делать это специально. Поубивав бы.  Некоторе, особо извращенные, приходят к тому, что ставят запятую ПЕРЕД элементами. Это из серии, знаете, максимальной гиковости: ты придумал одному тебе известную, сложную и замысловатую причину, почему это имеет смысл, и ставишь ее впереди любого здравого смысла, общепринятой практики и эстетического чувства. Непропорциональный ответ, так сказать. Миру таким ребятам, наверняка им в остальном тоже не слишком легко живется.  Но гениальнее всего эту проблему разрешила Clojure. В ней запятых вообще нет. А зачем? Почему ваш парсер не может сообразить, что [1 2 3] это список из трех элементов? С чем еще его можно потенциально перепутать? Да ни с чем. Запятые не нужны, короче, и жить без них — одно удовольствие. Это как впервые надеть свободные трусы вместо плавок, которые носил всю жизнь (мальчики поймут).  Но Рич не был бы Ричем, если бы остановился на всего одном гениальном решении. Ему заметили, что некоторые подмножества JSON-а являются почти валидным EDN-ом (Clojure-вариант сериализации). Если бы не запятые.  Пфф, сказал Рич. Тоже мне проблема. И объявил запятые пробельным символом. Да, в Кложе можно писать [1 2 3], можно [1, 2, 3], а можно и [,,,1,,,2 3,,]. Все одно.  Гениально? Гениально. Иногда нет-нет, но запятые таки пригождаются. Например, в коротких однострочных словарях, типа {:a 1, :b 2, :c 3}. Без запятых чуть менее наглядно, хотя натренированный мозг Лиспера все равно считает {:a 1 :b 2 :c 3}.  Так что если вы используете какой-то galaxy brain способ расстановки запятых, вся ответственность за это лежит только на вас. Clojure вас ни к чему не принуждает.",404
"Когда-то, не то чтобы совсем недавно, но на моей памяти, Эпл решили уйти от традиционной модели работы с документами (хочешь закрыть – сохранись) к модели Раскина (закрыть можно в любой момент, несохраненные документы никуда не денутся). Можно даже, в теории, перезагрузиться, ничего не закрывая, и все вернется ровно в то состояние, в котором оно и было. И сохраненные, и несохраненные. То есть мак на самом деле, конечно, их сохраняет КУДА-ТО, но вопросов не задает и пользователю об этом знать не нужно.  Под шумок добавили галочку «восстанавливать открытые окна» при перезагрузке. И я даже сначала радовался, потому что ну конечно, что за бред, почему это перезагрузка должна ломать мой workflow? Ну приспичило компу перезагрузиться — ну пускай, только верни, как было. Мне даже непонятно было, зачем там эта галочка? Неужели оно не должно так работать ВСЕГДА?  И вот прошло сколько, года три-четыре? Пять? Пожил я с этой галочкой и понял, что лучше все-таки без нее. Нет, сама идея правильная. Но на практике это оборачивается кошмаром. После перезагрузки комп трясет еще минут пять, пока он откроет все, что было открыто до перезагрузки. Половина откроется не так, не там, не вовремя, что-то сломается, что-то потеряется. Ну и факт, что это все растянуто по времени, означает, что в случайные моменты в течение нескольких минут после перезагрузки у вас будут выскакивать какие-то непонятные сплеш скрины, окна будут случайным образом красть фокус, какие-то давно забытые резидентные программы решат, что это хороший повод проверить обновления, что-то отвалится, а значки в доке плясать и требовать к себе внимания.  Это все, кстати, прекрасно иллюстрирует neediness программ, которую не видно по-отдельности. Каждая программа думает, что она главная и единственная, и что кроме нее пользователю ничего не нужно, он сидит и смиренно ждет ее запуска, пока она его лоадерами и нотификациями развлекает. Ты запустил условный VS Code, он через 30 секунд показал тебе окно и забрал фокус. В обычной жизни ты бы этого, может, и не заметил. Но когда у тебя таких умников двадцать штук и все они че-то тебе показывают, воруют у друг друга фокус, открывают окна с задержкой, требуют нажать на иконку и делают все это одновременно и наперебой — вот тогда-то и становится заметно, что мелочи они не такие уж и мелочи.  Хороший, кстати, тест на правильный запуск программы. Если она не бесит после перезагрузки и восстановления окон, то все нормально. Большинство бесит.",405
"Все пытаюсь себе объяснить, почему в The Expanse такие крутые первые три сезона и куда потом делась вся магия.  Пока лучшее, что придумал — текстура. Текстура — это подробности жизни, быта. Что едят, где стригутся, как перемещаются, с кем отдыхают. Чем больше экзотической текстуры, тем интереснее смотреть.  И вот тут парадокс космических опер. Раз космос, кажется, что надо показывать как минимум судьбы галактик, глобальные катаклизмы, драмы уровня греческого театра. Но смотреть на противостояние двух космических адмиралов не сильно интереснее, чем на противостояние двух морских — эмоции-то одни и те же.  Поэтому хочется текстуры. Магнитные ботинки. Воздушные шлюзы. Невесомость. Долгие перелеты. Ускорения. Перемещение по кораблю. Перемещение по станции. Разработка метеоритов. Экономия воздуха. Детали, о которых ты не думал, живя на Земле, но которые интересно представлять — а как оно, там, будет?  И кажется, что в первых трех сезонах текстуры прям не жалели. Включите пилот, там за первые четыре минуты на Кентербери показывают больше любопытных деталей, чем за весь четвертый сезон.  Или вот пример из четвертого эпизода. На корабль нападают неизвестные злодеи. Камеру с героями прошивают дырки от пуль. По направлению воздуха герои определяют, что вакуум со всех сторон. Заделывают дырки, но вентиляция не работает. Находят успокоительное и решают вколоть одному из них, чтобы поменьше дышал. Решают, кто кого после этого понесет.  Это все детали! Причем такие, о которых в обычной жизни особо и не думаешь. Зачем показывать нам секс в невесомости? Да ни за чем, просто прикольно же, будет о чем подумать. Послевкусие, так сказать.  Есть, впрочем, и в пятом сезоне выдающаяся сцена. Герои защищают некий контейнер, за которым охотятся злодеи. Ну там обычная перестрелка в тесной комнате: кто за шкафом от пуль прячется, кто за табуреткой, все друг в друга попадают раз по пять и промахиваются раз по сто. Ну вы знаете, как киношные перестрелки работают.  И вот посреди этой котовасии в комнату заезжает робот-пылесос злодеев. Ну он побольше пылесоса, где-то с тумбочку размером, и весь бронированный. В нормальном кино бы сделали как? На робота повесили бы пушки, герои бы начали придумывать план, как его остановить, все бы друг другу помогали и в итоге превозмогли бы или красиво собой пожертвовали.  Но тогда эта сцена не была бы такой выдающейся. Поэтому робот, зная, что ему никто ничего не сможет сделать (что тебе пули, когда ты из железа?) просто едет спокойно к контейнеру и как ни в чем не бывало начинает его выпиливать из сейфа. Вокруг перестрелка не на жизнь а на смерть, герои по возможности суетятся, пытаются как-то его остановить, но все бесполезно: он железный, что ты ему сделаешь? В конце концов всех злодеев побеждают, остается только робот, который спокойно к тому моменту уже достал контейнер и невозмутимо едет к выходу. Герои пытаются хоть как-то ему помешать, но робот тяжелее и поэтому бесхитростно проезжает по прямой мимо всех и улетает на ракете в закат.   Ощущения — в точности как от терминатора в детстве. Ты точно знаешь, что он сейчас сделает, тебе это не нравится, но помешать тоже никак не можешь. Вот бы весь сериал таким был. Но даже робота этого больше нигде ни разу не упоминают и не показывают. Единичная находка.",406
"Прикыдывал на выходных, как бы по-быстрому засунуть видеоплеер в Humble UI. Посмотрел на библиотеки, и вот что я вам скажу. Там не то чтобы АПИ сложное, там непонятно даже, с какого краю подходить.  В чем вообще засада с видео? Почему с ним всегда все непросто? Начиная с того факта, что расширение файла ничего не говорит о его формате. Зачем так сделано? Нафига тогда вообще расширения, если они ничего не говорят? Почему в jpeg файле лежит jpeg картинка, но в mov может лежать mp4, а в mp4 может лежать H.264, также известный как AVC? Почему у них по два названия вообще? И в чем разница между mp4 и mpeg-4? И где предыдущие 263 эйча?  Плюс сколько себя помню, на винде постоянная ебля была с кодеками. Мне уже тогда было непонятно, почему нельзя как с картинками — нужно открыть файл, ну подключил библиотеку, открыл. Нафига это через систему делать, зачем такой крюк? Худший UX из возможных — покрути что-то в одном месте и тогда, возможно, в другом у тебя заработает то, что тебе нужно (спойлер: не заработает).  Тот случай, когда все выживали репаками от Васяна: скачал с торрентов codec pack, поставил один раз и все кодеки сразу есть. Как выживали «обычные люди» (tm), мне представить очень сложно. Наверное, просто не смотрели видео?   Потом, конечно, появился VLC и стало попроще. Почему, кстати? Он весь этот идиотизм куда-то внутрь себя упаковал, да? Реимплементировав с нуля?  Понятно, что столько сложностей наверняка связано с лицензиями и отчислениями за кодеки, и что просто так их в состав условного Линукса включить нельзя. Но тут возникает другой вопрос: а нафига не-бесплатными кодеками кто-то вообще пользуется? Ну вот сделала там какая-то компания платный кодек, все хмыкнули, пожали плечами и не стали им пользоваться. Не? Пусть бесплатный похуже, jpeg тоже вон, звезд с неба не хватает, и ничего, выживает.  Короче, моя мечта, чтобы с видео работать было так же просто, как с картинками. Доживу ли?",407
"Обожаю людей, которые жалуются на висячие пробелы или присылают патчи, их убирающие.  Алло, это невидимые штуки, которые никому не мешают! Вы сами себе придумали способ, как сделать, чтобы вам их было видно, чтобы они могли вас раздражать, а потом начали на них раздражаться.  Воистину, комикс с чуваком, который сам себе засовывает палку в колесо велосипеда.  UPD: еще опция «не показывать пробелы в diff-е» нравится. Одни, значит, заморочились, чтобы что-то изменить в той части файла, которую никому не видно и которая ни на что не влияет, а другие заморочились, чтобы изменение состоялось, но ты об этом не узнал. Все при деле, прогресса ноль.  Правило простое: не менял код — нечего его форматирование трогать. Поправил две строчки? Вот в них можешь свои пробелы сраные удалить, если очень хочется. Но не по всему файлу! Это же вредительство какое-то: диффы портятся, blame портится, никому проще жить не становится. Я пришел вам лампочку поменять, заодно и весь фасад покрасил. Тебя просили?  UPD2: Замечу, что ситуация несимметричная. Это не спор синего против красного. Тут одни живут спокойно, никого не трогают и никому ничего не навязывают. А другие решили что их волнуют висячие пробелы и теперь навязывают это всем, в том числе и первым. Вот именно это мне и не нравится",408
"Мое любимое занятие — наблюдать на фотках, как красивые, эстетичные и дорогущие Эпловские мониторы в реальной жизни всегда (всегда!) оказываются ниже, чем удобно практически любому человеку выше 150 см ростом.  Поэтому если они не в магазине, то под ними обязательно будет коробочка, книга, полка — что угодно, чтобы поднять его на приемлимую высоту. Даже если это монитор за 5 косарей, человеческую анатомию-то все равно не изменишь.  Казалось бы — Эпл, намек ясен, может быть какое-то встроенное решение для него предложить? Разве это красиво, когда такая дорогая и красивая вещь подпирается чем-нибудь ужасным вроде книги «С++ за 7 дней» или «JavaScript: the bad parts»? Почему все остальные производители позволяют регулировать высоту, а вы выше этого?  Потому что экран на длинной ноге выглядит некрасиво. Дизайн — это то, как оно выглядит, а не как удобно использовать.  UPD: Зато есть целая индустрия «аккуратных» подставок под iMac-и. Все при деле",409
"Илья Бирман недавно скидывал видео про семисегментный дисплей для цифр. Ну такой, знаете, как на калькуляторах или электронных часах. Ну и там чувак рассказывает немного про его историю, показывает разные варианты и пытается это дело как-то улучшить.  И — что бы вы думали — у него не получается! Формат настолько хорош и настолько отполировался со временем, что добавить или улучшать там уже нечего.  Другой пример — дверные ручки на автомобилях. Смотрел обзор нового электрического Кадиллака и там придумали, что на ручку надо нажать пальцем, как на кнопку, а потом тянуть дверь за ухват рядом со стеклом.  Как? Зачем? Почему? Просто чтобы было не как у всех? Тоже тот случай, когда начали переизобретать колесо, но сделали только хуже. Правда, там вопрос к адекватности их дизайнеров вообще, у них бардачок открывается через тачскрин. Спасибо, что не через телефон по блютусу!  Я в принципе бунтарь-идеалист, люблю всякие штуки улучшать и не люблю статус кво. Но надо признать, что некоторые вещи хороши настолько, что просто прийти, сказать, что вы все дураки а я сейчас сделаю лучше, не так-то просто.  Да, иногда можно просто из-за того, что найденный обществом оптимум локальный (например, с клавиатурами — их достаточно легко улучшить, но никому это не нужно), но иногда улучшать уже некуда. В этом случае делать по-другому просто чтобы было не как у всех — преступление.  Господи, дай мне мудрости отличить одну ситуацию от другой, как говорится.",410
"Прочитал про микрофронтенды и очень расстроен.  Статья начинается с того, что «многие веб-приложения становятся чересчур сложными», а заканчивается тем, что предлагают рендерить хедер и футер на разных машинах, стримить по сети на координатор, там собирать в общий html и его уже отправлять клиенту.  Демо-приложение из семи компонентов выливается в 600 Кб кода, причем JSON-а примерно в 10 раз больше, чем тайпскрипта. npm install занял минуту и успешно завершился только с третьего раза, поставив 373 зависимости на 420 Мб (!!!). Действительно, проблема налицо. Напоминаю, что это просто текстовая страница со списком из трех десятков картинок без дизайна и фильтром по ним.  В тиктоке есть чувак Khaby Lame, который высмеивает других тиктокеров, умудряющихся решать простые проблемы сложными методами. Типа, как пить воду из стакана, используя руку и рот, как есть пиццу, как оторвать хвостик у вишни без специального устройства.  Вот в программировании тоже такой нужен. Чтобы на каждую такую ересь брал этих умников и тыкал их носом: вот как вызвать функцию, а вот как подключить файл, нечего тут выебываться, лучше все равно не сделаете, а больше вам ничего и не нужно.  Поражает стремление программистов решать давным-давно решенные проблемы, конечно. Равно как и умение делать это сильно хуже.  P.S. Еще и слово «micro» используют, насмехаются",411
"Хотите расскажу, как оформлять резюме? А то меня часто спрашивают (нет).  Создаешь пустой документ в Ворде. Пишешь имя-фамилию. Емейл, телеграм.   Потом скиллы в виде облака тегов: языки, технологии. Гитхаб, если есть.  Потом перечисляешь места работы. Название — год(ы) — должность — чем занимался, кратко.  Потом где учился.  Справа вверху прикрепляешь фотку. Жмешь Export to PDF.  В общем-то все. Не благодарите.  О чем рассказать в следующий раз?  UPD: Локацию надо, фотку не надо — задискриминируют. Как и возраст. Давно резюме не составлял, отвык  UPD2: Пол лучше укажите женский, повысите свои шансы. Потом при выходе на работу скажете, что поменяли",412
"Прочитал где-то мысль, что ни один язык программирования по-хорошему не оптимизировался под объективно важные метрики: скорость разработки и количество багов. Все они — отражение вкусов авторов в первую очередь. Нравится авторам «играть с типами» — вот вам Хаскель и Скала. Нравятся гибкость и свобода — Кложа. Нравится спартанский минимализм – Go, эстетически красивая запись — Python и Ruby.  Так что если у вас были какие-то иллюзии, что компьютер сайнс относится куда-то к точным наукам, то советую расслабиться. Мы все с вами в первую очередь гуманитарии, только спорим не о том, кто глубже заглянул в душу или описал русскую осень, а о том, какие программы нам больше нравятся. Программы при этом — тот же текст на почти что естественном языке.",413
"Вчера в рамках жаркой дискуссии всплыло сожаление, что формальные методы круто, но люди ими почему-то не пользуются. С сентиментом, мол, что люди неправильные.  Это же часто можно услышать от разработчиков программ и дизайнеров — мол, юзеры не такие, пользуются не так, учиться не хотят, не разбираются, спешат. Вот бы нам «таких» юзеров, вот тогда бы наш бизнес бы взлетел!  В таких рассуждениях важно понимать, что несдвигаемая константа в уравнении это всегда люди. Они такие, какие есть, других нет и никогда не будет. Если они спешат, они будут спешить, если ошибаются, будут ошибаться, если не хотят/не могут чем-то воспользоваться, то не смогут.  И ваша задача — как разработчика, как дизайнера, сделать продукт именно для этих, конкретных, неподходящих, неудобных вам людей. А не искать-ждать других, более правильных.  Потому что других все равно нет. У них не вырастет за ночь третья рука. Пальцы не станут длинее, чтобы дотягиваться до кнопок. Они не станут внимательнее или аккуратнее, потому что структура мозга меняется, может, на горизонте 100 тысяч лет минимум. Они не смогут держать в памяти больше вещей, чем держат сейчас, и не смогут начать разбираться в том, в чем не могут разобраться сейчас. Откуда вы будете ждать других людей? С Марса, что ли?  Поменять программу легко. Поменять продукт, экосистему, железо, бизнес-модель — все это тривиально в сравнении с тем, чтобы поменять человека. Так что сорян, но люди всегда «такие». Если что-то не работает, меняйте продукт.",414
"Тут в твиттере опять срач за типы (ну конечно). Пишут, что динамическая типизация делает удобно программисту, который пишет код, а не тому, кто его поддерживает.  Я, естественно, возражаю, что поддерживаемость кода никак не связана с типами. Ясность мышления, умение упрощать, конкретность — влияют непосредственно. А типы? Худший код, который я видел в своей жизни, был на Java и C++, оба статически типизированы. Лучший — на Clojure, динамическом. Когда для того, чтобы открыть http-соединение, тебе нужно десять фабрик и адаптеров, тот факт, что у них есть имя и описание, не поможет в этой лапше разобраться.  Но интересно не это. Я вот что понял. Многие приводят в поддержку типов вот какой аргумент: «если мне достанется куча говнокода, я бы предпочел, чтобы он был с типами, а не без них».  Это понятно, но вопрос ведь так не стоит. Ты не выбираешь, на чем тебе достанется говнокод. Ты выбираешь, на чем будешь писать код ты сам. То есть сторонники строгой типизации сразу как бы признают: «окей, я пишу говнокод, поэтому позабочусь-ка я о том, кому он достанется».  С одной стороны, конечно, похвально. С другой, по-моему это признание поражения. Нормально писать не пробовали?",415
"Поскольку Маск фигура публичная, все интернет-экспетры™ дружно кинулись изобретать, как именно будет правильно ему распорядиться твиттером. И неизбежно приходят к мыслям, что настоящий твиттер должен быть честным, открытым, доступным всем и децентрализованным. Да и сами Маск с Дорси вроде в эту сторону думали.  И... ну я симпатизирую этим идеям, конечно. Я истово ненавижу корпорации, режу рекламу, не покупаю ничего через аппстор, сбежал почти со всего гуглового, но пока full paranoid mode не включил, то есть де факто где-то посередине. Это хорошие идеи, правильные, для людей. Да и помечтать я не прочь, как могло бы быть в идеальном мире. Ну вы знаете.  Но парадокс именно твиттера и именно его улучшений вот в чем: открытый и распределенный твиттер без рекламы уже существует. Прямо сейчас. Называется Mastodon. Иди, регистрируйся, пиши, читай, вообще ноль препятствий и именно так, как все хотели. Прямо сейчас. Не в теории, буквально. Бесплатно. Без наебок. Ничего изобретать или менять не нужно. Все уже есть.  И что? И ничего. Видели, может быть, видео, где две собаки безумно лают друг на друга через забор, потом забор отъезжает и они мигом успокаиваются и начинают обнюхиваться? Столкновение теории с реальностью.  Вот так и тут. Как мысленный эксперимент распределенный открытый твиттер звучит красиво. Но это не мысленный эксперимент. Это реальность. Не нужно гадать, мечтать и теоретизировать. Эксперимент поставили и вы наблюдаете его результаты прямо сейчас. Изменилось ли что-то? Да не особо.  Такие дела.  P.S. Если что: мне не нравится текущее положение дел и я не топлю за то, что все должно остаться так, как есть. Мастодон нравится, но аккаунта там нет. Может быть, будет, а может и нет. Но поинт в другом: реальность есть реальность, нравится она мне или нет.",416
"Короче, анекдот. Айти-контора, задеплоили приложение, оно упало, данные некрасиво покорраптило, в общем, инцидент, на деньги попали.  Сели разбираться. Смотрят — ошибка в коде джуна. Начали распрашивать, что мол и как. Он говорит: «Эх, я молодой, неопытный, думал вот тут ассерт поставлю, вот тут аргументы проверю, и ничего не сломается».  Посмотрели — и правда, проверки на месте, после них сломаться ну никак не могло. Позвали самого синьорного синьора, который был в компании. Он глянул и говорит: «А, ну да, это ж я сломал».  Все глазами хлопают, не понимают. «Как так?» — говорят, — «писал конечно джун, но проверки-то правильные? Ну не может тут баг проскочить ну вообще никак». А синьор им: «Ребятки, я двадцать лет за клавиатурой, я и не такое проскакивал».",417
"Монтировал тут на днях небольшое домашнее видео, которое мы поснимали с женой на выходных (гусары, молчать!). У нее айфон по-старее, 8, у меня по-новее, 13 ( потому что я свой 8-й утопил, а она свой пока только пять раз разбивала). Ну и конечно, восьмерка снимает в SDR, а тринашка в HDR.  Что происходит, когда ты это засовываешь в программу монтажа (DaVinci Resolve в моем случае)? Правильно, полная жопа. Нормально выглядит либо одно, либо другое, и как это в одном ролике совместить — непонятно.  И тут мы опять приходим к проблеме цветовых пространств и «Никита не понимает». Вот смотрите. Есть цвет. Цвет закодирован числами, да? Я про это писал раньше. Эти числа не имеют смысла без «цветового пространства».  Да, иногда цветовое пространство забывают указать или оно как-то теряется и не предусмотрено, и тогда нужна возможность его дополнительно указать. Бывает. Стандарты старые, мониторы из sRGB вышли недавно.  При этом DaVinci вроде как программа как раз для цветокоррекции. То есть там можно настроить вообще все что угодно и как угодно. И тем не менее, почему бы не сделать, чтобы по дефолту все показывалось нормально? Скажем, у вашего монитора есть цветовой профиль. Почему бы не использовать его? Зачем указывать его вручную? В видеофайле написан цветовой профиль (в моем случае, я проверял). Почему бы не использовать, опять же, его по-умолчанию? Наконец, там есть еще менюшка «внутренний формат цвета», и там тоже по-умолчанию стоит НЕ color managed. Почему?  Скажем, если я открою в quick view HDR файл на обычном SDR sRGB мониторе, который нифига не умеет, я увижу тем не менее нормальную картинку, соответствующую возможностям моего монитора. Без всяких вопросов.  Вот почему нельзя везде сразу так же? А цветокоррекцию уже поверх, когда основа нормально сделана?  А то я смотрю видосы всяких цветокорректоров, они наснимают в своем log, а потом показывают, мол, смотрите, картинка какая была серая, а вот тут мы потом выбираем модель нашей камеры и оба-на, цвета вдруг стали нормальными. Но вот эта серая картинка вообще не имеет смысла, это километры, которые без всякого преобразования были использованы как секунды. Этого состояния вообще никто и никогда не должен видеть, оно просто не имеет смысла. Зачем???  Отдельно не понимаю той же фигни, но с телевизором. Там тоже миллион режимов с разной цветокоррекцией, всякими «глубокими черными» и «динамической яркостью». И вот втыкаешь ты в него Эпл ТВ, или плейстейшн, или ноут, и начинается беготня, чтобы выбрать правильный цвет и в приставке, и в телевизоре. А когда устройств несколько, он же, сука, еще и забывает настройки и прыгает туда сюда.  В тебя, сука, воткнут цифровой кабель. По кабелю бегут циферки, в которых ТОЧНО написано, что, куда, где и сколько. Вот почему нельзя просто взять этот сигнал и показать как есть? Пришло 128 по координатам 10,20, ты идешь в панель, находишь пиксель по координатам 10,20 и зажигаешь на половину мощности только его. И ВСЕ. И БОЛЬШЕ НИЧЕГО. Зачем как-то «улучшать» или «настраивать» уже цифровой сигнал???  Вчера воткнул виндовый ноут в телек, смотрю, а у меня половинка иконки «Пуск» отрезана и на часах справа год не видно. Почему? Потому что телек решил, что от HDMI-сигнала надо отрезать по паре сантиметров по краям. Зачем? Почему? Кто это придумал? Кому это полезно??? Я уж не говорю про sharpening, который надо бегать отключать каждый раз, когда отвлекся и телек его вернул назад, как будто он в магазине.  Почему, сука, нельзя сделать просто и прямо? Это же проще, и всем лучше станет, и на разработке сэкономите, и жалоб меньше будет, и поддержки так много не нужно. И, главное, все будет просто работать.  Бесит, что для этого все есть. Телевизор _уже может_ просто работать. Но мы, как человечество, решили, что люди должны страдать, и на пустом месте все усложнили.",418
"Когда я учился в универе, нет-нет да проскакивало от преподов «все это уже было», «все это я уже видел». Я в это особо не верил, потому что «ну как же, это же новое, вот только что сделали, как вы могли это видеть?»  Сейчас, когда я поварился вокруг компьютеров сколько? Лет двадцать уже? Двадцать пять? Я начинаю понимать, что, действительно, это какое-то колесо Сансары. Одни и те же дорожки, одни и те же «решения», случайное метание «туда и обратно» без какого-то направления или видения. Иногда даже не очень понятно, прогресс мы наблюдаем или регресс.  Я не застал CORBA, он к моменту моего обучения практически сдох, остались только истории «про могучую древнюю технологию». Зато я застал Web Services и J2EE. Они сейчас точно так же сдохли, и уже я могу рассказывать такие же истории про них. А энтерпрайз верен себе, продолжает не искать легких путей и придумал в этот раз облака и Kubernetes. Не то чтобы это решало какую-то проблему, а скорее чтобы просто людей чем-то занять.  Если вы по-моложе, то наверное могли застать взлет или падение какого-нибудь JavaScript фреймворка. В наше время это были jQuery, MooTools и Ext JS, сейчас там Angular, React и Vue. Джаваскрипт вообще по ускоренному треку катается на Сансаре, у них возраст технологий в собачьих годах исчисляется (год за семь).  Тач интерфейс придумали, чтобы отказаться от мыши. Круто. И что мы с этим сделали? Попробовали, подумали и приделали к Айпаду клавиатуру и мышь.  Идея, что ты работаешь только с одним приложением на телефоне тоже как-то не зашла, поэтому весь телефонный «прогресс» заключается в том, как бы дать возможность второму/третьему/пятому приложению делать что-то в фоне и не умирать. Ах, если бы только решение для этого существовало где-то еще.  Для Айпада все еще хуже, там «одно приложение на экран» выглядит вообще позорно, так что ему быстренько «переизобрели» управление окнами. Только медленное и хуевое. И вот смотришь ты на айпад и аймак с идентичной начинкой, смотришь, как Аймак круги может нарезать вокруг Айпада и думаешь: а почему, собственно? Вы же сами кузнецы своего несчастья.  Был ли прогрессом плоский дизайн? Эплу был настолько противен скевоморфизм, что его создателя уволили, сделали плоский дизайн и... вернулись к 3Д формам, тенюшкам и градиентам всего-то через семь лет? Это маятник уже какой-то, а не нововведения.  Зум на днях настолько преисполнился, что засунул в себя почту и календарь. А почему нет? Смешно, что эта тенденция существовала как минимум еще в 1995: Zawinski’s Law — любая программа расширяется, пока не научится принимать почту.  Я уж не говорю про недавний скандал в Твиттере, где выяснилось, что галочки и модерация были зачем-то нужны, и спустя всего неделю их в спешном порядке вернули. Это наверное самая быстрая instant karma, которую я видел.  И только C++ как был собой, так и остается. Как писали на нем деды, так и молодняк пишет до сих пор. Живучий, сука. А если кому скучно — можно весь софт начинать потихоньку переписывать на Раст. Будет работать точно так же, только язык другой. И только не говорите мне, что это не циклично!  Да что там, даже дотком бум, похоже, намечается по новой!  Если бы я был по-предприимчивее, наверное, все это можно было бы как-то использовать. Взять какое-нибудь давно забытое змеиное масло, портировать под современные технологии и начать продавать как ни в чем не бывало. Но делать я этого, конечно, не буду.  Нет, я все еще люблю компьютеры. Просто смотреть на это все без попкорна становится скучновато. Скорей бы уже шлем виртуальной реальности, который убивает тебя, когда ты погибаешь в метаверсе. Вот это была бы инновация!  UPD: В комментах напомнили про тонкие/толстые/тонкие клиенты! Сначала компьютеры были большими и клиенты были тонкими. Потом они стали по-компактнее и они стали толстыми. Потом пришел веб и они снова стали тонкими. Потом пришел JavaScript и веб-страницы стали толстым клиентом. Что будет дальше? Программисты, арендующие тачки в облаке и работающие с тонкого клиента. Правда, в этот раз ноутбуки действительно вполне себе тонкие.  UPD2: Реакт-программисты переизобрели SSR!",419
"Прочитал милый пейпер How to Hack the Simulation? про то, как бы нам выбраться из симуляции. Несмотря на то, что оформлена она как публикация, читается как краткий пересказ десятка НФ книжек.  Как сбежать — ну, варианта, собственно, два: или эксплойтить баги, или сконтачиться с создателями.  Но во всех этих историях про иной разум меня всегда удивляет, конечно, наивное предположение, что на той стороне что-то похожее на нас и что контакт вообще возможен.  Ну вот на земле миллионы видов животных, растения, грибы, бактерии, вирусы, археи — устанавливай контакт не хочу. Но что-то не получается, да? Причем многие ПОЧТИ такие же, как мы, условно обезъяны там или дельфины, но что-то не о чем с ними говорить, да?  У Нила Геймана есть комикс про Eternals, хороший, и там в числе прочего в какой-то момент, условно, Тони Старк просит этих самых супер-богов объяснить ему, мол, что там у вас на вашем уровне происходит, с кем борьба и из-за чего. На что ему отвечают: не поймешь, брат. Вот у тебя кузнечик сидит, попробуй ему дифференциальные уровнения объяснить. Вот у нас с вами, людьми, такая же проблема.  Интересно, что в Хазарском словаре эта невозможность контакта тоже упоминается. Там приходят к выводу, что единственный способ сообщить что-то условной мухе — прихлопнуть ее. По любым другим вопросам контакт невозможен.  Про «сконтачиться с создателями» тоже есть наглядный пример. Представьте, что муравьи в муравейнике вдруг выложили из палочек слово «привет». То есть технически препятствий, конечно, нет, вопрос только в принципиальной возможности.  Побольше хотелось бы почитать про возможные баги и их эксплуатацию. Единственный конкретный совет в пейпере — собраться большой кучей народу, закрыть глаза, начать медитировать. «Сервера», на которых крутится симуляция, в этот момент начнут масштабироваться вниз, так как ресурсов на это нужно немного. В этот момент глаза стоит открыть и начать всем делать что-то предельно ресурсоемкое, одновременно пытаясь наблюдать возможное ослабление проверок: ну там причинно-следственная связь начнет нарушаться, например, или сквозь стену пройти станет можно. Хороший был бы эксперимент, хоть и звучит наивно. А вдруг?  Но самые лулзы начинаются в пейпере, когда в вопрос контакта с иным разумом авторы привносят наши чисто местечковые изобретения типа этики, морали и, прости господи, consent-а. Это все хорошие штуки здесь, для нас, но несколько самонадеянно думать, что они хоть насколько-то универсальны и, кхм, сиюминутны, нет?  Этично ли создавать AI, который будет страдать? Имеем ли мы моральное право бежать из своей симуляции? Мне кажется, в вопросах, которые выходят за пределы человеческого общества, немного другая логика работает, которая больше про физические законы и факты, а не про «что это все значит». Ничего не значит, просто оно так вот есть. Страдает ли камень, когда его пинают? Нет, он просто летит по параболе.  Способы, которые проверенно не работают, чтобы выйти из симуляции: произнести фразу «Я не даю согласия участвовать в симуляции». No shit, Sherlock.  Но в любом случае: увидимся на выходе из пещеры.",420
"В Твиттере все смеются, а я по большей части согласен с Маском.  То есть да, он ворвался как слон в посудную лавку и все сломал, НО. Я не вижу, почему бы Твиттеру не ломаться периодически. Конечно, я бы не хотел такого подхода к автомобилю там или банку, но соцсеть? Ну полежит какое-то время, НУ И ЧТО? Глобально никто не пострадает.  Понятно, что есть инженеры, для которых ДЕЛО ЧЕСТИ восемнадцать девяток и которые самоидентифицируют себя через качество своей работы. Но в глобальном смысле аптайм твиттера важен только перфекционистам-инженерам из самого твиттера.  Да, я тоже считаю, что программистов в Твиттере слишком много (как и Маск). Да, я считаю, что он тормозит (как и Маск, впрочем, причины могут расходиться). Да, я согласен, что микросервисы говно. Ну и этому болоту нужна была какая-то встряска рано или поздно, потому что там уже идеи закончились и пошел какой-то булшит вроде NFT аватаров (что?) и аудикомнат.  Почему бы не поделать фигни и не посмотреть, к чему она приведет? Мы так любим эту философию в стартапах (быстрые прототипы, тестирование на живых людях, поиск product-market fit), но почему-то когда это применяют к Твиттеру это вдруг становится плохой практикой? Опять же — для чего-то важного – конечно, move slow don’t break things, но для Твиттера? Да ломайте сколько угодно.  А вот ЗАЧЕМ это делается, это другой вопрос. Изначально это все продавалось как «вернуть в Твиттер свободу слова», что, конечно, булшит: ее, во-первых, никто не забирал, а во-вторых никто ее не вернет в том смысле, в каком люди любят ее себе представлять.  Был хороший тред от Yishan Wong, бывшего CEO Reddit, который объяснял, что модерация — это вообще не про мнения и цензуру, а только про то, чтобы людям было приятно рядом с тобой находиться. Грубо говоря, банят не за то, что ты думаешь, а за то, что как ты общаешься. Оставил 1000 комментов за час под одним постом — нахуй. И не важно, что в них было. Угрожаешь или оскорбляешь кого-то? Туда же. И не важно, демократа оскорбляешь или республиканца.  Грубо говоря, логика такая: если твой паттерн общения неприятен, то либо тебя забанят и всем остальным станет комфортно, либо уйдут уже нормальные люди. Платформе, конечно, интересно, чтобы нормальные оставались. Пользователям, кстати, тоже. А что именно ты там думаешь всем более или менее пофиг.  Ровно та же логика со спамом: логически в спаме нет ничего нелегального, и нет ни одной политической, юридической или этической причины, почему спам нужно запрещать. Его запрещают только потому, что он бесит. И все как бы согласны. Просто когда ты высказываешься, например, на политическую тему, легко представить, что тебя банят за содержание: так и воя больше можно поднять, и внимания к себе привлечь. А на самом деле все куда банальнее: ты просто всех заебал.  Так вот, про покупку Твиттера. У Пелевина есть хороший старый рассказ, Желтая стрела. Один из персонажей там — self-made бизнесмен из девяностых. В какой-то момент показано, как он работает: он узнал, что где-то можно купить товар за X, а где-то продать за X+Y. Он берет калькулятор, добавляет к X расходы на перевозку, получается меньше и он делает вывод, что этим стоит заниматься.  Я, если честно, всегда представлял, что бизнес это что-то многократно более сложное, а тут чуть ли не на салфетке принимаются ключевые решения. Но чем дальше, тем больше мне кажется, что это и есть самое главное: углядеть профит за шелухой, причем что на масштабах школьной столовой, что государства.  Среди материалов дела Твиттер против Маска есть запись, как они прямо на салфетке считают: $5B прибыли на 8K работников = $625K прибыли на человека, а если оставить всего 3K работников, будет уже $1.66M на работника.  Вот так, похоже, самые большие решения и принимаются. А весь булшит про демократию, справедливость и свободу слова это чисто публику развлечь.  Дальше они обсуждают, что если заставить ходить в офис 2 дня в неделю, 20% сами уволятся. Ну вы поняли. Детали реализации.",421
"Есть очень простой способ сделать кое-какой интерфейс лучше. Представьте, что у пользователя в какой-то момент возникает, допустим, равновероятный выбор: пойти налево или пойти направо? И вы, конечно, показываете ему окошко с двумя кнопками: А или Б.  Примеры из жизни это, например, кнопка ретвита понятно где. Можно ретвитнуть без комментария, а можно «квот ретвитнуть». Обе опции в принципе широко востребованы.  Или видеоплеер Infuse, которым я смотрю кино. Когда включаешь фильм, в который ты уже тыкал, он спрашивает: начать сначала или продолжить с <место, где ты был в последний раз>. Иногда ты тыкаешь фильм наугад перед тем, как посмотреть, и хочешь, конечно, начать с начала. А иногда просто не досмотрел и хочешь продолжить. Два вполне полноценных варианта.  Наконец, третий пример: кооперативная игра на плейстейшене. Когда берешь второй джойстик, тебе показывают окно: хотите войти в аккаунт или играть как гость? Иногда ты просто сел помеситься с другом в Мортал Комбат и никакой мета-прогресс тебя не интересует. А иногда зашел вдвоем проходить Диаблу и, конечно, хочешь свой аккаунт и своего персонажа.  (на самом деле, там еще есть третий вариант: зарегистрировать новый аккаунт. С выбором юзернейма, придумыванием и подтверждением пароля, вводом и валидацией почты, вводом текста с геймпада, миллионом шагов и экранов, все как мы любим. Его я не рассмартиваю в виду его очеведнейшей бессмысленности)  Ну короче. Два варианта, оба имеют право на существование, экран с двумя кнопками. Да? Пизда.  Такой интерфейс легко улучшить. Надо сделать один выбор дефолтным вариантом, а второй оставить доп. кнопкой. Ретвит молча, а квот твит через меню. Продолжить воспроизведение молча, а с начала через меню. Начинать играть как гость молча, а логин через меню.  Смотрите: сейчас те, кому нужен вариант А, идут через меню, и те, кому нужен вариант Б, тоже идут через меню. А будет: вариант А без меню, по-умолчанию, а вариант Б все так же через меню. Да, мы сделали удобно не всем и не всегда, но половину случаев мы улучшили, а половину оставили ровно как было.  Круто? Круто. А, главное, просто, и думать почти не надо.  Понятно, что меня программисты в основном читают, и вам, может быть, никогда не придется дизайнить интерфейс. Но если придется, вспомните и сделайте хорошо. А если не придется, то теперь вы будете это везде замечать и оно будет вас бесить так же, как и меня. Бугага!  UPD: Телеграм отправить как картинку/отправить как файл забыл!",422
"У Бирмана в канале видео, как делать красивые кнопки. Говорит, забытое искусство, раньше все дизайнеры умели и тень красивую нарисовать, и углы правильно скруглить, и градиенты-блики хорошие нарисовать. А с приходом плоского дизайна все это забыли.  Правда, подвох в том, что делает он их в Фигме, а верстать их потом надо в CSS. Это же ему справедливо замечают в комментариях: что толку от твоих красивых скруглений и нелинейных теней, если они в HTML не переводятся? И это понятное, справедливое замечание.  Но я вот что думаю: если на все это посмотреть издалека, получается, что мы разучились? Разучились делать красивые кнопки, и как дизайнеры, и как верстальщики. Раньше могли, а теперь вот не можем. Понятно, демократизация, упрощение, мода, но тем не менее — раньше могли, а теперь не можем. Не какой-то конкретный человек не может, а индустрия в целом сдалась и сказала: нет, все, не умею. Воля сотен тысяч людей сложилась в направление, которое в итоге привело к тому, где мы сейчас и что можем.  Хотя, казалось бы, прогресс должен быть про уметь больше, а не меньше. Но нет.",423
"А расскажите, что вас штырит в айти. Зачем вообще вы тут обитаете?   Меня вот необъяснимо удовлетворяет, когда строчки аутпута по терминалу бегут. Не слишком быстро, не слишком медленно, слегка неравномерно, но стабильно так, как двигатель стучит: тук-тук-тук. Видно, что прогресс совершается, машина работает.  Второе это когда две программы по сети общаются. Когда ты написал что-то, запустил на двух компьютерах, и оно начало коммуницировать — что-то в этом есть, какое-то невысказанное обещание бесконечных возможностей. Причем веб-сервера и прочий клиент-сервер не штырят совсем, вообще весь фан из сетевых взаимодействий забирают.  Еще нативный перформанс люблю, перепишешь бывало что-то на Раст или там Zig/C++/OCaml, запустишь — и оно в 10 или в 100 раз быстрее тебе посчитает. Иногда в кайф даже просто что-то бесполезное позапускать, лишь бы зная, что оно оптимизировано и комп загружает по максимуму на пару секунд.  А у вас?",424
"Смотрел, что занимает место на Плейстешне, и это конечно прелюбопытное чтение. В том смысле, что цифры гигабайт ни разу не пропорциональны фану — понятно, но и ожидания тоже ломают.  Например, любимый Dead Cells, в который я наиграл может 200, а может уже и 300 часов, если на всех платформах, всего 2 гига весит. Lumines, который такой glorified вариант тетриса, два с половиной. Хотя, казалось бы, в одной красоты (пиксельные, ну и что), а в другой цветные квадраты.  Или вот Киберпанк 2077, солидные 60 гигов. Окей, понятно. Но там же рядом Мортал Комбат 11 на 85 — как? В одном целый город и пятьдесят часов истории, а в другом тридцать персонажей и десяток арен. И рядом еще Sekiro, которая всего 17. Понятно, графика попроще, раз в пять так 🙂  ХЗ короче",426
"Чего я не понимаю, так это корзины на Маке.  То есть понимаю, конечно. Идея светлая — удалил файл, а потом хоп и достал!  Пока ты пользуешься своим компом, все вроде бы норм. Комп твой, корзина тоже на нем. Но потом ты подключаешь флешку/диск, удаляешь на ней файлы, а место не освобождается.  Почему? Потому что они попадают в корзину! А где корзина? Правильно, все еще на твоем компе. То есть на самом деле оно создало корзину на внешнем диске, но показывает так, как будто файлы удалились к тебе в корзину.  Разгадка, конечно, в том, что это «умная» папка, а не настоящая. Вытащил флешку — в корзине «на твоем компе» стало меньше мусора. Вставил — стало больше.  Тот самый случай, когда «удобное» представление «ради пользователей» хуже, чем то, что происходит на самом деле. Если бы мне на флешке показали ту самую папку Trash, которую он на самом деле создал, а потом скрыл, вопросов бы не возникло. Сделали больше работы, чтобы стало хуже, удивительная эффективность.  Ну и раз уж мы тут критикуем дизайн корзины, я настаиваю, что все, что там лежит, НЕ должно считаться в «занятое место». Если у меня 50 гигов свободно и 100 гигов лежит в корзине, везде в системе должно показываться 150 свободных гигов. А сейчас покажется только 50.  Ну и почему корзина занимает такое важное место в доке я могу только историческими причинами объяснить (так сложилось). Кажется, что она должна быть чем-то вроде AirDrop или Documents — захотел, нашел в файндере, а не захотел — не отсвечивает и жить не мешает.  А сейчас это единственная из двух неудаляемых иконок, наравне с файндером. Что в ней такого уж важного? Неужели, скажем, документы менее важны, чем трэш?",427
"Сериалы по Звездным войнам мне как-то не заходили. Пока все радовались Мандалорцу, я удивленно пожимал плечами. Оби-ван ситуацию не улучшил. Книга Бобы Феты выглядело подозрительно даже в трейлерах.  И вот вышел Андор. Ну ладно, думаю я. Пусть себе идет. Но неожиданно он начал поднимать хайп! Оказывается, это теперь лучший сериал по стар ворсу. Оказывается, новое слово. Оказывается все предыдущие были говно (только все молча их смотрели и нахваливали почему-то).  Ну включил. Дам, думаю, шанс. И что? Такая же точно тягомотина унылая, как и все остальное. Просто невозможно смотреть, а главное, непонятно зачем.  Попробую пояснить. Когда ты смотришь кино (ну, я смотрю), тебе как бы поступает постоянный поток информации. Частично из диалога, частично из мимики, но также из жестов, обстановки, одежды, построения кадра, последовательности кадров, движения камеры, освещения, короче, много всего. И все это несет какой-то смысл, «говорит» с тобой, и в этом собственно кайф.  Так вот, когда смотришь Андор, ощущение, что жуешь энтеросгель. В смысле что вот должна вроде поступать информация, а вместо этого белый лист. Кадры не говорят ничего. Лица не говорят ничего. Диалоги не говорят ничего. Как в ковер смотреть примерно. Я сначала не мог понять, думаю, просто скучно, но там как-то прям по-особенному скучно, там специально так все сделано, чтобы заполнить хронометраж и ничего не сказать и ничего не произошло. То есть формальные признаки соблюдены, конечно — планеты, инопланетяне, повстанцы, империя. Но кроме того, что это «по звездным войнам», он как будто специально старается ничего не говорить.  Отдельно это заслуга Диего Луны, наверное. Чувака с более непроницаемым покерфейсом, наверное, еще поискать. Раньше Стивен Сигал был, блистал эмоциями, теперь вот вместо него наш главный герой.  Оператор тоже странный. Как будто не очень отличает важное от второстепенного и просто вставляет в кадр немножко антуража. Типа, должны на героя смотреть, а вместо этого смотрим на героя и на обстановку в баре. Не, ну а чего добру пропадать?  Актерам почему-то запретили использовать жесты. То есть они все без исключения стоят как вкопанные и читают свои монологи. Ни лоб почесать, ни рукой взмахнуть, ни с ноги на ногу переступить. Зачем так? ХЗ  Ну и еще ебучий The Volume этот, который на Мандалориане придумали. Это когда вместо зеленого экрана риалтайм LED-стена с картинкой из Unreal Engine. Типа, чтоб отражения/освещение было правильное, то-се. Не, выглядит и правдо безупречно.  Проблема в том, что хоть на экране и разворачиваются бескрайние инопланетные просторы, гигантские мегаполисы, бездонные ямы и бесконечные небоскребы, и к отдельным кадрам не подкопаешься, в конце серии все равно остается ощущение, что просидел все это время в каморке пять на пять метров, куда накидали пару камней и железяк «для антуражу».  Масштаб, короче, гигантский, а впечатление как от подводной лодки.  (Кстати, кто-нибудь знает, эта стена потом на посте меняется на нормальную графику? Или так и остается? Неужели UE выдает прям киношного качества фоны в real-time, и цвета прям стыкуются, и лампочек не видно?)  Все это объяснимо, конечно. Как говорил один из директоров Диснея, задача нашей компании не делать искусство, задача нашей компании — делать деньги. Просто так получилось, что мы делаем их через медиа.  Ну и в этом ключе конечно, удешевление производства, растягивание сюжета, выжимание последних капель жизни из всего, что им принадлежит, имеет смысл для компании. Но мы-то зрители, нам-то это зачем? Наверное, Макдональдс выиграл, когда начал делать молочные коктейли из порошка вместо молока, но выиграл ли покупатель?  Так что хотите посмотреть хитовый сериал этой осенью, посмотрите The White Lotus. Он кайфовый.",428
"Короче, я долго сопротивлялся, но попробовал и травить ChatGPT оказалось довольно весело. В отличие от предыдущих соц^W нейросетей, которые были для всяких там нормисов, эта сделана для программистов. В том смысле что умеет писать и объяснять программы на всяких разных языках программирования (да, даже Clojure!).  Более того, можно даже заставить ее прикинуться Линуксовой машиной и повыполнять всякие ls, id, pwd, pip3 install и даже curl с lynx. Ответы выдает неправильные, но очень убедительные. Например, она сумела сходить на tonsky.me и выдать что-то похожее на HTML типичного блога, и даже имя мое откуда-то взяло и подставило (нет, не из запроса).  То есть понимаете, да? Когда вы ей пишите ls, она не выполняет где-то там ls. Она просто видела где-то пост (на stackoverflow, например) в котором написано что-то вроде «выполняем команду ls и получаем список файлов, например a, b и c».  Если глубоко не копать, это все довольно убедительно выглядит. Например, можно что-нибудь в файл записать одной командой и следующей прочитать. То есть она рубит, что аргумент в первой команде и вывод во второй не фиксированы, но должны быть одним и тем же.  Обмануть ее тоже несложно. Можно попросить посчитать md5 какого-нибудь значения. Или, вон, сайт скачать. Или сложить больше двух чисел.  Из всего этого напрашиваются выводы, что, во-первых, очень значительная часть того, что мы делаем, не такая уж сложная или высокоинтеллектуальная. И что продвинутый поисковый движок, которым ChatGPT по сути является, может вполне справляться с запросами программистов.  Кто-то решил на ней тестовое задание на мидла! Не, ну а что? Пастит код со стек оверфлоу, подставляет свои названия переменных, может сделать ошибку, сам не проверяет, пока не укажешь ему на косяк. Это почти словарное определение джуна-программиста!  Во-вторых, когда ты получаешь очередной точный, красивый и стройный ответ в десятый раз подряд, пытаясь эту фигню как-то обмануть или поставить в тупик, понимаешь, насколько ты вообще сам не уникален и не так уж и интересен, поскольку на большую часть твоих запросов кто-то уже написал посты с объяснениями, на которых это все работает.  Ну и в-третьих, ради чего я вообще затеял этот пост — что наше с вами айти это кошмарный сон какого-то большого и глупого мозга, и что никаких компьютеров на самом деле не существует, а все эти ls -lah и $0? снятся кому-то в каких-то комбинациях и вообще не важно, что там написано, и очень хочется проснуться от этого кошмара, но не получается...",429
"Блин, как меня бесят сериалы, которые вроде по книге/законченной истории, но ее тянут на 2+ сезонов. Вложился ты значит на первых сериях, потом, как водится, стало скучновато, но думаешь надо бы узнать, чем там все закончится.  Смотришь до конца сезона, и вот на последней серии что-то никто особо не шевелится, маски не срываются, чемодан не находится, злодея все никак не убивают. Думаешь: да ну нафиг! И правда, ничего не заканчивается, жди еще год, а потом терпи еще десять нудных серий.  Ну е-мае! Предупреждать как-то надо, что ли.  Среди преступников в этом году Tokio Vice, Severance и вот теперь The Peripheral. (UPD: The Boys, House of Dragon)  Бесит.",430
"Короче, как скучный айтишник, спросил у ChatGPT напрямую, снятся ли андроидам электроовцы. Она прикинулась, что не поняла вопроса, и начала мне объяснять, откуда взялась эта фраза и что означает название.  И удивила — я думал, что про название все и так понятно, включая двойной смысл dream/dream, а она говорит, что мол в шестидесятых было такое выражение — мечтать об электроовцах. Типа, хотеть себе что-то из будущего или настоящего, но малодоступного. Ну микроволновку там, я не знаю, или телек цветной. И, мол, Дик взял это устойчивое выражение, прилепил к нему андроида, вставил эту самую электроовцу в книгу буквально, ну и на считать овец/видеть сны закольцевал.  Нифига себе! Подумал я. Красиво, интересно. Жене рассказал. В твиттере какому-то мужику объяснил. И только потом пошел гуглить, а не, кхм, пиздит ли наш искусственный разум.  Оказалось, конечно же, пиздит как дышит. Никаких «мечтать об электоовцах» выражений никогда не было (ну или были, но Гугл о них не знает), придумал его Дик специально для названия, короче, все ровно так, скучно и понятно, как я всегда и думал.  Тут у меня счетчик слоев метаиронии начал зашкаливать. Сраный компьютер обманул меня, да еще и на тему книги, которая как раз про компьютеры и что с ними все не так просто!  Воображение тут же придумало сценарий апокалипсиса, в котором компьютеры порабощают человечество, просто слегка изменяя выдачу гугла. Несколько «сумасшедших», конечно, помнят, как мир был устроен на самом деле, но им никто не верит, потому что гугл выдает другие цифры для, скажем, гравитационной постоянной, температуры кипения воды или расположения Пакистана на карте мира. Причем делает незаметно и согласованно, не только в поиске, но и в Википедии, без всяких правок, как будто так оно всегда и было. А книги, что книги? Они теперь тоже все электронные, бугага. А если кто-то захочет бумажную в библиотеке найти, так ему или карточку компьютер не выдаст, или книгу не найдет в каталоге. И все. И пиздец.  Но, главное, никто этого не заметит. И никакая симуляция не нужна.",431
"Одна из вещей, которые мне непонятны (на самом деле понятны, конечно, но я все равно возмущен) это как на клавиатурах до сих пор не появились очевидно полезные клавиши.  А именно: cut/copy/paste, undo/redo, prev/next tab, back/forward. В том смысле что это настолько универсальные, полезные и часто используемые концепции, что вполне стоят отдельного места на клавиатуре.  Фанаты Раскина добавили бы сюда Search, и я с ними согласился бы, но дело в том что Search на некоторых клавиатурах уже есть. Правда, если я правильно понимаю, он вызывает какую-то общесистемную срань вместо нормального контекстного поиска, так что да, Search нужен тоже, только правильный.  Ну и смена раскладки, проблема, непонятная ни одному американцу, но блин, мир уже какой-никакой глобальный, Юникодом заставили всех пользоваться, давайте теперь язык переключать разрешим большей части мира?  Вы, конечно, скажете, что место-де не резиновое, и дальше одной кнопки отходить от home row зашквар, но, скажем так, далеко не все разделяют эту точку зрения: посмотрите на количество 100+ кнопочных клавиатур в мире и хотя бы попробуйте представить, что иногда проще чуть потянуться одним пальцем, чем зажать комбинацию тремя-четырмя.  Ну и возмущение мое идет, конечно, в первую очередь от того, ЧТО вместо этих очевидно полезных кнопок пихают на клавиатуры сейчас. Вот я открыл сайт Microsoft, нашел свеженькую Ergonomic Keyboard, и что я на ней вижу?  - Двенадцать (!) F-кнопок (они еще используются где-то в Винде? Потому что на Маке их давно выкинули). - Print, мать его, Screen. - Scroll Lock/Pause/Num Lock. Я гарантирую вам, никто из тех, кто ставит себе полноразмерные клавиатуры, ни разу в жизни их не нажимал и никогда не нажмет. Особенно Num Lock, вот у нас тут четыре курсорные клавиши, а еще есть переключатель, который ИХ ЖЕ добавляет только чуть правее. - Caps Lock тоже условно-маргинальная клавиша, которая как будто никому СО ЗДОРОВОЙ И КРЕПКОЙ ПСИХИКОЙ не нужна, про нее, вроде, все уже знают. - Insert. Insert, блядь! Самая подлая клавиша на свете, включающая невидимый режим, который удаляет твой текст. Вот уж кому нужна лампочка на кнопку, а лучше гудок с сиреной. - Emoji button... Кстати, ладно, это как раз в тему! - Кнопка Офиса! Для тех, кому нужно НУ ОЧЕНЬ ЧАСТО открывать новый инстанс Ворда? - Кнопки вызова калькулятора, скриншотилка (а что, Print Screen же есть, ггг), TaskView и блокировки компа (!). Что вы чаще делаете — блокируете комп или копируете/вставляете/выделяете? - Ну и в конце концов пробел! Нафига он такой длинный? Никто не знает, просто все привыкли. У меня на кастомной клаве все кнопки 1U, даже пробел, и что вы думаете? А ничего, прекрасно работает. А на освободившееся место можно кнопок десять полезных еще засунуть!  Короче, свободного места очевидно дофига. И это я еще не говорю про то, что цифры присутствуют как минимум два раза (цифровой блок), что Шифт/Альт/Контрол дублируются. Не, что их ИНОГДА используют, я представить могу. Но все равно, если было бы НУЖНО запихнуть что-то полезное, место найти явно можно.  Единственный прогресс, который случился на этом поприще — появление и условно-широкое распространение кнопок play/pause и громкости. Вот это то что надо (еще бы play/pause работали, а не открывали Apple Music). Давайте теперь остальных добавим!  UPD: дописал про переключение раскладки и длину пробела",432
"А я всегда говорил и говорю, что кроссплатформенные приложения — единственная нормальная модель написания софта. Простите, Swift-о-дрочеры. Просто сама мысль, что вам надо один и тот же компьютер, с одним и тем же процессором, убедить три раза тремя разными способами сделать одно и то же, чтобы получить одинаковый результат, она абсурдная же, если подумать.  Не, были времена, когда программистов было мало, и операционные системы реально что-то предоставляли. Когда софт, который с ними шел, был лучше чем что угодно на рынке, или вообще альтернатив не было. Но тогда и операционки стоили денег, а сейчас они почему-то бесплатны, да?  Да потому что на любую встроенную программу есть несколько альтернатив, которые работают лучше. Почта? Есть лучше. Заметки? Есть лучше. Видеоплеер? Есть лучше. Музыка? Лучше. Я уж не говорю про дизайн и браузер. Даже гребаный спотлайт, и тот есть лучше. Тупо по закону больших чисел — в Эппл, может, работает 100 тыщ программистов, но вне Эпла — десять миллионов. И сегодня уже даже Бирман перестал радоваться, когда находит в нативном меню Services какой-нибудь «сделать выжимку текста». Сегодня все похуй, что там предлагает ОС.  Это я к чему? К тому, что нативные программы тупо нет смысла писать. Не то чтобы кросс-платформенные были так уж хороши, но в это направление хотя бы есть смысл вкладываться.  Каждый раз, когда мне приглянется какая-то инди-игрушка, я открываю Стим и вижу, что могу запустить ее только на Винде (несмотря на то, что она выглядит так, что даже 640 Кб для нее оверкилл), я грустно вздыхаю. Во всяких Unity/Unreal/whatnot экспортировать игру под другую платформу — кнопку нажать. Там уже вся работа проделана, стараться вообще не надо! И это игра, она с ОС вообще никак не взаимодействует, кроме большого черного прямоугольника, который надо показать на весь экран.  Но не нажимают. Причина, видимо, в том, что у разработчиков тупо нет Мака, они на нем не сидят, не знают про него, а покупать за полторы штуки баксов машинку и ебаться с совершенно новой экосистемой просто ради того, чтобы иметь возможность нажать кнопку — ну, такое себе.  Кстати, тот факт, что собрать под Мак можно только на Маке, под Линух — на Линухе, а под Винду — на Винде, он тоже, кхм, идиотский. Казалось бы — ну вот тебе нужно байтики в нужном порядке записать, какая разница, из-под какой ОС их писать? Это должно тривиально алгоритмически делаться, из-под любой платформы, без единого системного вызова. Почему же не так?  Ответ на этот вопрос долгий, грустный и скорее всего всех нас разочарует. Да, даже в сборке программ мы умудрились положиться на «сервисы ОС», которые никак нормальным образом из этой ОС не выдираются. А компании и рады — пущай лицензии покупают, не обеднеем.  Когда я вижу новый язык с кросс-компиляцией — я радуюсь. Когда я вижу Докер — плююсь, потому что это шаг назад. В конечном итоге победит простота и дисциплина, а не «it works on my computer — then we’ll ship your computer».  Ну, хотелось бы.",433
"В дизайне долгоживущих вещей главное, как мне кажется, вовремя остановиться. Вот были когда-то у окон в Windows/macOS заголовки умеренно-стандартные: три кнопки, название документа/программы.  Потом пришел Хром и сказал: нехорошо что-то, много места пропадает. А давайте туда табы вкорячим! И вкорячил. Люди посмотрели и решили, что им тоже так надо, и стали все поголовно так делать. Дошло до того, что Эплы сами в прошлогоднем МакОС фактически убили понятие «заголовок окна» и пустились во все тяжкие. Сегодня я еще посмотрел свежие скриншоты Gnome 4 и там тоже — четыре окна, четыре варианта расположения кнопок.  Но хуже всех, конечно, Ворд на винде. Там просто не заголовок, а помойка случайных вещей какая-то. Казалось бы — ну вот у тебя двадцатью пикселями ниже нормальный тулбар, ну ты не выиграешь ты ничего особо, что трем специальным иконкам отдельное место придумаешь. Но нет, если место есть, значит на него нужно что-нибудь запихнуть. А окна перетаскивать, ну тут уже сам выкручивайся как-нибудь.  Что я хочу сказать — многим проблемам можно придумать, да, уникальные решения. Но иногда сила как раз в стандартизации — если все окна выглядят одинаково, то этим можно научиться пользоваться и даже предсказать, как поведет себя новая программа. Экспериментировать нужно, но когда выигрыш получается маргинальный, возможно, им стоит пожертвовать ради унификации.  Даешь, короче, однообразие.",434
"Поскольку я тут обложился всякими Эпл-устройствами, наблюдаю, как они друг с другом интегрируются. Если вы подумали, что я напишу «идеально», то вы плохо меня знаете 🙂  Но конкретно сегодня такое наблюдение, что разблокировать ноут/1password/рутовый пермишн можно либо часами, либо отпечатком пальца, либо паролем. Но не одновременно. То есть надо выбрать что-то одно и ждать, сработает или нет. А могло бы это все происходить параллельно, что быстрее подошло/сработало то и берем. Нет, оно все очень не быстрое. Компьютер должен ждать человека, а не человек компьютера.  Потом тыкнул еще на ютуб-видео, а там чувак рассказывает, как ему тяжело на свифте программировать, потому что АПИ у Эпла уебищные. Чувак, я вообще-то этот жанр придумал, что ты сможешь мне рассказать 🙂 Но в целом он конечно праведен в своем гневе, ему надо было приложение в автозапуск добавить, а вместо этого пришлось делать второе приложение и крутить его в фоне. Я бы тоже психанул и видео записал.  Но хуже всех люди, которые видят такую вот сложность на ровном месте (второе приложение там, где должно быть достаточно одного системного вызова) и начинают ее защищать. Типа, есть рациональные причины, почему оно только так и может быть, а по-другому никак быть не можешь. Когда им показываешь альтернативы, которые существуют и вот прямо то же самое делают, но нормально, люди уходят в отказ.  Очень, конечно, хотелось бы посмотреть на проект новой операционной системы. Чтобы без говно-легаси вот этого всего, и с нормальным отношением к разработчикам, и с поддержкой всяких юзерских штук максимально прямой. Очень хотелось бы жить в мире, где сложность программирования это 90% бизнес-логики и только 10% чтения форумов, борьбы с операционной системой, сборкой и всяким таким не относящимся к делу.  Пока, к сожалению, ситуация обратная.",435
"Как любой уважающий себя программист и крепкий хозяйственник, за два дня до Нового года я решил перевезти все мое добро с одного сервера (подороже) на другой (побольше, подешевле и потупее).  А переезд это что? Правильно, свидание с Линуксом! Ну в общем с помощью ДакДакГо и такой-то матери за два дня я переехал. Самое веселое, что так нелюбимая всеми Джава поднялась быстрее, чем Nginx начал раздавать статический контент. Парадокс.  Не, у меня, конечно, все ходы еще с прошлого раза записаны в плейбуках. Но этого мало, потому что пока я их записывал, линуксоиды меняли системные ДЕФОЛТЫ. Была у меня убунта 18-ая, а стала 22-ая, соответственно все теперь лежит не там, настраивается не так, удачи.  Один из самых веселых эпизодов — это как раз про Nginx и статический контент. Настроил я значит кое-как letsencrypt, а это тоже та еще история. Certbot по факту читает, анализирует и правит nginx-конфиги, которые сами по себе тюринг-полный формат. Cоответственно если конфиг чутка нетривиальный или просто написан не в том порядке, certbot его или портит, или фигню пишет. В лучшем случае, даже если все сработает правильно, он его просто уродливо отформатирует — отступы не те, пустые строки пачками тут и там. Спасибо, что живой.  Мне, кстати, жалко в этой ситуации вообще всех — это ад, который мы сами себе создали. Одним неудобно, другие не подумали, что-то серьезно менять никто, конечно, не хочет, а фичу как-то выкатывать надо, https все хотят, не придумывай. Так что сделали как могли.  Ну так вот, настроил я значит nginx, переключил DNS, захожу — 403 Forbidden. Пошел смотреть пермишны. Все есть. rwxr-xr-x. ls работает из-под кого угодно. Файл читается. Откуда 403, сука? Это статический контент, напоминаю. Джава при этом спокойно работает, все отдает, даже с https, хотя казалось бы, что должно быть проще?  Оказалось, что 403 происходит из-за того, что где-то в пути была папка без r-x прав. Не та папка, которую я хотел пошарить, а один из ее родителей, до которого мне, понятно, нет никакого дела. Логично? Логично, сука? Чего заныл?  На старой Убунте при этом все работало. Потому что не сломаешь что-нибудь — не проживешь. Вообще удивительно, конечно, какая фрактальная сложность там разворачивается и как никто не ходит и не кричит: надо что-то по-проще, невозможно уже, давайте упрощать!  Нет, всем норм. Сложность создает кучу рабочих мест, сертификацию, даже если это просто куча идиотских фактов, никак друг с другом не связаных, часто рандомных, которые просто «исторически сложились» и которые с тех пор никто не хочет трогать.  А! Ну историю-то я не закончил. Настроил я, значит, nginx. Файлы отдаются. Я счастлив. Довольный, уже собрался комп закрывать до следующего года, как смотрю — ssh перестал работать. Раньше заходил, а теперь Permission denied (publickey) (я, понятно, по ключам, не по паролю). Ssh я вообще не трогал, я ж не дурак. Authorized keys лежат. Пермишны нормальные. Под рутом заходит. А под отдельных юзеров — нет. WTF?  Короче, long story short, проблема была в том, что у хоум дир проставился пермишн на запись для группы. Не, сами ключи и даже папка .ssh все еще были в безопасности. Но ssh все равно сломался, на всякий случай, причем максимально неочевидно и молчаливо. Проблема, естественно, не гуглится. Как я до причин догадался — одному богу известно. Повезло. Интуиция. Вселенная хочет меня помучать, но аккуратненько, по чуть-чуть, чтобы я совсем ушел в пастухи.  Но предновогодний пост надо закончить на позитивной ноте, поэтому поздравляю вас с наступающим, дорогие мои! Желаю вам в новом году побольше бумажных книг, никотиновых сигарет, механических унитазов, проводных наушников, глупых лампочек, ручных пылесосов, нерегулируемых столов, чайников без вайфая, карандашей без блютуса, а компьютеров — как можно меньше. Обнимаю, люблю!  P.S. Кстати, грампи теперь менеджится systemd. Не понял я хейта, по-моему куда удобнее, чем сраные баш-скрипты. Декларативненько и однообразно, в чем подвох?",436
"Интересный феномен, когда кто-то прилагает дополнительные усилия, чтобы сделать хуже.  Например, в телевизоре миллион способов «обработать» (ухудшить) изображение, хотя все, что от него требуется — просто показать цифровой сигнал ровно в том виде, в котором он поступает на порт. Все, лучше уже не сделаешь.  Или Твиттер, они пыжились, придумывали алгоритм «умного» кропа изображения. А в итоге лучший кроп — это не кропать картинку вообще. Если я прикладываю изображение, наверное, я хочу, чтобы его увидели целиком, а не какую-то часть? Если бы мне нужен был кроп, я бы кропнул.  «Алгоритмические» ленты в ту же степь. Лучшая алгоритмическая лента — обратная сортировка по дате. Если бы мне был не интересен какой-то контент, я бы от него отписался, не? А если я подписался, значит я хочу его видеть, епт.  Иногда, чтобы сделать хорошо, достаточно просто ничего не делать.",437
"Понадобилась библиотека парсинга Кложи на Питоне. Нашел edn_format. У них написано:  > Installation: pip install edn_format  Окей. Написал в консоли pip install edn_format. Он мне:  > DEPRECATION: Configuring installation scheme with distutils config files is deprecated and will no longer work in the near future. If you are using a Homebrew or Linuxbrew Python, please see discussion at https://github.com/Homebrew/homebrew-core/issues/76621  Причем пять (!) раз повторил. На случай, если за четыре не дойдет. АЛЛО, ГОВОРИТЕ ГРОМЧЕ!!!  Штирлиц прочитал телеграмму, ничего не понял, прочитал еще раз и все равно не понял. Что за installation scheme? Что за distutils? Я таких даже слов самих по себе не знаю, а там от них производные. Я еще ничего не сделал, а уже виноват.  Потом смотрю, дальше слово знакомое: Homebrew. У меня на компьютере в принципе есть Homebrew, но насколько мне известно, в процессе вызова pip install он не должен никак участвовать.  Но там еще и ссылка. Окей! Видимо, проблема настолько сложная и тонкая, что в 259 букв ее ну никак не объяснить, и они решили поставить ссылку. Может там что-то будет понятнее?  Открываю.  > I am one of the maintainers of pip [...] Homebrew is currently using distutils.cfg to configure package installation schemes, and we believe it is best for Homebrew to remove the usage.  Ага, то есть там какие-то терки между мейнтейнерами Homebrew и мейнтейнерами Pip. Как в эту войну оказался втянут я? Почему я вообще должен о ней знать?  > If you have been directed here from a pip warning, you don't need to take any action at this stage. Nothing is currently expected to break until Python 3.12, and a full solution will be implemented well before then.  Ага! Делать ничего не надо, сломать ничего не сломали, и даже в принципе не особо планируют, но зачем тогда мне об этом знать? Загадка.  > Note that as of 3.10.2, this issue no longer affects Python 3.10 and later.  python --version  > Python 3.10.9  Ну и какого, спрашивается, хуя? Почему люди, о существовании которых я ничего не знал, считают, что могут украсть пять минут моего внимания, чтобы известить меня о том, что проблема неактуальна и ничего делать раньше не надо было, а теперь уж и совсем не надо?  С Новым годом, короче. Oh shit, here we go again.",438
"Лента в Тви опять принесла рассуждения, что мол писать код на интервью на позицию программиста — плохая практика. Типа, не охуели ли вы, господа, просить меня написать код, когда у меня такие красивые глаза и такие мягкие скиллы?  Ну я традиционно не могу понять, из-за чего сыр-бор. Подразумевается, что ты пишешь код восемь часов в день, пять дней в неделю, на протяжении нескольких лет. Так? Так. Тогда почему вдруг возникают проблемы пописать его еще сорок пять минут? Типа, какая разница? Ты перед этим его писал пол-недели, и после этого еще полнедели писать будешь, и так до пенсии (заплакал, но не суть). Это как чувака, который чистит картошку на кухне ресторана на сто человек попросить почистить еще две. Да он не заметит даже.  Представьте себе доктора, который такой «ой, не могу сейчас вас осмотреть, не привык не у себя в кабинете, у меня там кушетка, а у вас диван в гостиной». Или водитель такой «ой, у вас машина двухместная, а я только на пятиместных умею». Или пианист «я не могу на пианине белого цвета, я всю жизнь тренировался на черной». Бред? Бред.  Тогда почему просьба попрограммировать чутка в присутствии других людей вызывает такое отторжение у программистов? Если вы пишете код каждый день по восемь часов, то вам наверное все равно, на компьютере его писать или на доске, голосом о нем говорить или пальцами, с ИДЕ или без ИДЕ, в темной теме или светлой, без гугла или с гуглом? Потому что ну не может человек, который программирует, допустим, три года, не помнить, как создать список или какие там методы у строки. Он каждый день это по миллиону раз делает, хочешь-не хочешь а запомнишь.  Другое дело, если вы не программируете. Тогда, конечно, понятно. Тогда это все объясняет. И трудности, и возмущения, и отмазки. Только работодатель-то причем? Ему не ваши красивые глаза нужны. И не софт-скилы.",439
"Сегодня по интренету гуляет старое (2003) письмо Била Гейтса, в котором он эпично не может купить и скачать Microsoft Movie Maker с сайта Microsoft.  Все как мы любим: сайт тормозит, поиск не ищет, в загрузках левая херня («they told me that using the download page to download something was not something they anticipated», ну прекрасно же), а установка в итоге через Windows Update вообще, с попутной загрузкой лишних 17 Mb (эх, были времена!), потому что Windows Update заодно и систему обновит, и установка, которая длится возмутительные 6 минут (those are rookie numbers, по сегодняшним-то временам).  Как мне пишут, прям хоть сейчас копируй и выставляй на Grumpy Website. Но моя мысль немножко другая: если бы тот самый Гейтс, вместо того, чтобы просиживать кресло, рисовать планы продаж в Экселе и назначать/увольнять глав подразделений (ну или чем там топы занимаются обычно, я хз) писал бы такие письма раз в неделю, а не раз в год, то у нас была бы совсем другая Винда. Возможно, такая же хорошая, как МакОС был при Джобсе.  А получилось, как обычно получается. Вроде бы уникальная особенность Джобса была в том, что ему было реально не все равно, что они там делают. Он брал инсталляторы лично, ставил Макось, и если ему что-то в процессе не нравилось, ебал всех подчиненных пока нравиться не начинало. Это такой контур обратной связи, «а не херню ли мы делаем», который смотрит не на процессы, ограничения, компромиссы, а непосредственно на конечный продукт.  А обычно — ну, ты создал компанию, хочешь сделать продукт, говоришь — делайте Мувимейкер начальнику под тобой. Тот говорит своему начальнику, и так пять слоев вниз, пока наконец не дойдет до тех, кто непосредственно будет делать. Естественно, глухой телефон, смысл теряется, и результат будет скорее всего для галочки: начальники довольны, а от тебя (программиста) отъебались.  Не, это нормально, а как еще, если у тебя 10 тыщ человек? За каждым не побегаешь. Но вот именно в самом-самом конце посмотреть на то, что получилось, и взъебать всех, если по дороге потерялся смысл — вот, кажется, формула хорошего продукта. Потому что когда продукт дойдет до пользователя, он будет в такой же ситуации — ему пофиг на количество проведенных митингов, заинтересованных сторон или выписанных бонусов. Продукт либо работает для него, либо нет.  Поздравляю всех с началом новой рабочей недели, в общем.",440
"Давайте научу критиковать.  Например, многим кажется, что я «мочу» и «обсираю» интерфейсы, программы и их создателей. На самом деле идея Grumpy Website не в том, что «глядите, мне ничего не нравится», а в том, чтобы показать, какие бывают проблемы и как сделать лучше. Как учебный ресурс, только на 100% состоящий из конкретных примеров. Если надпись в кнопке криво выровняна, это не «гы-гы-гы дауны», или «макос говно, не пользуйтесь», а «обратите внимание на такой аспект, это важно, так не делайте, а делайте вот так».  Многие предложения не попадают на сайт, потому что в них особо нечему учиться. Баги у всех бывают, всем понятно, что если бы знали/могли, то исправили бы, это неинтересно (но иногда смешно, для смешно исключение). Интересно, когда намеренно делают плохо, потому что объясняют это неправильными причинами, а я показываю правильные.  По этой же причине на сайте не упоминаются продукты и компании. Потому что какая разница у кого сломано, если наша цель научиться делать лучше?  Это то, как в моем представлении выглядит здоровый, конструктивный диалог. Конкретика, без перехода на личности, с раскрытием темы. Да, не все и не всегда получается, я знаю, но работаю над этим. Не надо мне кидать сюда посты с Грампи, которые не так оформлены. Я стараюсь, но не всегда получается.  А теперь разберем примеры, которые люди воспринимают как «честный фидбек» и «вполне валидную критику», но которые по сути все же что-то другое. Примеры из обсуждения поста Ильи Бирмана про дорожные знаки. Так НЕ надо:  «Плохо, мне не нравится»  Нет конкретики. Что делать с таким отзывом? Это не фидбек, а агрессивная атака на автора. Кстати, хвалить без конкретики — норм 🙂  «Видно, что вы не водители»  Переход на личности. Во-первых, не угадали, что смешно. А во-вторых, какая разница, водители или нет? Идея либо хорошая, либо плохая, какая разница, кто ее высказал?  «Вы не разобрались»  Откуда вы знаете? А что если разобрался, но побольше вашего? Несогласны — пишите, с чем. Но не надо гадать про уровень эрудиции автора.  «Не надо ничего менять, умные люди делали»  Это вы просто автора дураком назвали, да? Надо объяснять, что с этим не так?  «Знаки менять нельзя»  Ну тут Бирман сам лучше меня написал. Но это важно, поэтому цитирую дословно:  > Самое главное, что изменит вашу жизнь. Нет никакого «нельзя». Можно всё. Это знание дороже знания ПДД. А если вы всё ещё думаете, что вам что-то нельзя, то давайте я вам разрешу! Разрешаю! (Просто мне можно всё, в том числе разрешать)  Мне это близко, потому что очень похожий фидбек я часто получаю, когда предлагаю что-то радикально переделать, типа файловую систему, ОС или TCP. Людям сложно представить, что мир может быть устроен иначе, чем так, как он устроен сейчас. Это понятно, но я бы хотел, чтобы мы научились это представлять чуть лучше, хоть это и сложно.  В общем, пишите, критикуйте, но не забывайте: конкретика (чтобы было, на что отвечать, «все плохо» — не критика) и без перехода на личности. Обсуждаем идеи, а не людей.",441
"Эпл анонсировал новый HomePod, и я на секунду поддался слабости и задумался, а не нужен ли мне спикер к телеку? Хорошо, дай, думаю, порты посмотрю. А их нет! Наученный горьким опытом, я вышел в интернет с запросом «HomePod audio delay» и, конечно, нашел прекрасные отзывы о двух(!)секундной задержке.  Не, если смотреть фильм с AppleTV, то все нормально, он эти две секунды буферизует и картинку подзадерживает, чтобы было тип-топ. Музыку слушать так и вовсе пофиг. Но в игры, например, не поиграть. Аудио/видео с макбука не поредактировать. Альтернативные плееры (YouTube, Amazon Prime, VLC, Infuse) — без гарантий, понятно.  И вот чего я не понимаю. Технологии, позволяющие передавать аудио по воздуху с приемлимой задержкой вроде бы есть. У меня у самого лично было устройство с алиэкспресса (!) за 20 баксов, которое передавало оптическое аудио с задержкой всего 40мс по воздуху. То есть это не то чтобы рокет сайнс.  Ну или в Xbox/PlayStation, например, их родные гарнитуры, либо аудиоджек в контроллере — в цифрах не мерял, но в пределах человеческого восприятия задержка незаметна.  Но почему эти технологии — удел специализированных устройств? Почему не воткнуть точно такую же хуйню в макбук, эпл тв, хомпод? Если хочется совместимости с блютусом — почему не воткнуть в дополнение? Не то чтобы они на них экономили — в том же хоумподе стоят тачскрин, датчик температуры, влажности, акселерометр, и поверх этого целый компьютер мощностью с айфон нескольколетней давности.  Неужели основной юзкейс — стриминг звука — настолько несущественный, что кто-то решил, что акселерометр важнее? Где прогресс в этой области? В хоумподе так даже батарейку беречь не надо, он прям в розетку втыкается. И что?  Я, конечно, люблю некоторые продукты Эпла, но тут какое-то разводилово, как со Студио экраном, не?  Отдельно кекнул от того, что управляется эта ебала азбукой морзе (длинные и короткие постукивания, for real) при том, что сверху на нем круглый экран диаметром восемь сантиметров, на который можно кнопок десять легко засунуть.  Эх, не понимаю я ничего в шикарной жизни и фанбойстве.",442
"На волне отключения Твиттером сторонних клиентов попробовал официальный. Разочарован. То есть это примерно как сайт, но с рекламой через каждые 3 поста и прочими «фичами» типа алгоритмической ленты, спейсов и «какие топики вам интересны».  Но сайт-то как раз у меня сильно лучше! Потому что на сайт можно поставить адблок, расширений и стилей, сделав тем самым из дефолтного опыта нормальный. Вообще я впечатлился в первую очередь от того, что увидел, в какой помойке люди сидят по дефолту и насколько я от нее отвык.  Главная заслуга тут, конечно, у веба. Шутка ли — любой сайт можно расковырять и подхачить под свой вкус, где это такое видано? Причем инструменты для этого прям в браузере положили, никуда даже ходить не надо. И все применяется еще в реальном времени, прям WYSIWYG, технлогия будущего.  Серьезно, а на веб псю из-за сложности, обратной несовместимости, производительности, но если чисто по фичам смотреть, то это, во-первых, охренеть как революционно, а во-вторых охренеть как демократично. Я даже не знаю, о чем еще просить, реально технология мечты, доступная каждому. Особенно сегодня, с процветанием закрытых корпоративных данных вместо открытых протоколов, когда у корпораций нет никакой мотивации делать хорошо, ты хотя бы можешь сделать себе хорошо сам.  А не было бы веба, сидели бы на нативных приложениях и смотрели бы на сраную рекламу, алгоритмическую ленту и замусоренный интерфейс с фичами, которые приносят денег вместо фич, которые приносят пользу.  Теперь бы еще с бекендом что-то придумать.",443
"Craig Mazin is not so amazing  Так как искусство должно в первую очередь побуждать зрителя на диалог, хочу поговорить с сериалом The Last of Us. В игру не играл, будут спойлеры к первой серии.  Серия начинается с бойко написанного интервью, которое сразу выкладывает весь расклад: что за эпидемия, как, почему. Ученый-грибник-паникер (надеюсь, в русской версии его озвучивал Сергей Безруков?) рассказывает известную историю про кордицепс однобокий, который ест мозг муравьев и превращает их в зомби.  Утверждается, впрочем, что грибы неспособны выживать в человеческом организме. Не очень понятно, что он тут имеет в виду, потому что страница «Микозы» на Википедии перечисляет штук 20 разных грибковых заболеваний именно на человеке, включая поражения внутренних органов. Но допустим действие происходит в альтернативной вселенной, где никто не болеет молочницей, кандидозом кишечника и лишаями.  Также используются спорные формулировки вроде «причина эволюционировать», «цель гриба» и «воля гриба».  Далее «ученый» утверждает, что от грибов нет и невозможно создать лекарство. Что тоже подозрительно, потому что большинство грибковых заболеваний вполне успешно лечатся. Но — допустим — альтернативная вселенная. Хотя даже в ней, мне кажется, ученые не должны говорить «нет» и «невозможно», а скорее «мы пока не знаем» и «мы не нашли». Как говорили нам в универе, закон сохранения энергии он закон только в том смысле, что никто пока не видел, как он нарушается.  Еще меня напрягло, что никто в ответ на его «нет» не спросил его «как так-то?». Не попросил объяснить, почему нет. Это настолько естественный вопрос, что странно, что все так молча приняли неприятную новость.  Наконец, делается утверждение, что грибы, если смогут поражать человека, сразу поработят миллиарды. Звучит странно — грибы вполне себе существуют прямо сейчас и что-то мир они пока не захватили. Даже те зомби-муравьи, у которых выедают мозг, живут параллельно с грибком миллионы лет. И ничего, никто никого не поработил.  Понятно, что все это художественная условность, которая была нужна, чтобы как-то мотивировать глобальный апокалипсис, чтобы история вообще состоялась. Но можно было бы рассказать то же самое без глупостей?  Ладно. Через первые три минуты продрались 🙂 Поехали дальше.  Мы переносимся в 2003-й. Звучит самая смешная шутка — Пердо Паскаль, которому почти 50, с максимально помятой рожей говорит, что ему 36 лет. Они живут с дочкой и дядей и у них, в целом, все хорошо. Ни проблем, ни забот, работать правда приходится с утра до вечера, но даже это, кажется, никого не беспокоит. Эта часть явно могла бы быть поинтереснее, но у нее, кажется, чисто функциональная роль (показать, что у героя БЫЛО) и они решили много сил на нее не тратить.  Потом начинается катавасия. Военные летают, люди бегают, все горит и взрывается, но конкретные детали не очень понятны. Просто паника и все горит. Интересно, что пандемия началась внезапно и одновременно везде, включая самолеты в воздухе (да!), что, вроде бы, не очень биологично?  Происходит самый видеоигровой момент из возможных: у чуваков ломается машина посреди улицы, один вылазит с одной стороны, другой с другой, и они такие: ну все, нам никак не встретиться теперь, бегите. В играх такое сплошь и рядом, сюда идти можно, а сюда нельзя, ПОТОМУ ЧТО. Но в кино смотрится странно. Примерно как с Кратосом, который хоть и бог войны, но иногда не может перелезть через упавшее дерево и идет через пещеры и три лагеря дикарей и монстров, потому что НУ ВОТ ТАК МЫ ПРИДУМАЛИ.  Дальше за ними гонится зомби, пару раз происходит deus ex machina, их ловит военный, девочку убивают, и наконец случается самое странное монтажное решение — сразу после трагедии мы молча переносимся на 20 лет вперед. Кажется, что пилот должен был быть двумя эпизодами, и тут, наверное, происходила склейка. Давайте и мы прервемся до завтра, на следующий пост.",444
"Кстати, внезапно узнал СПОЙЛЕР, что в игре-то ты оказывается в самом начале играешь за дочку, а потом тебя бах — и убивают! Вот это я понимаю, ХОД.  Фильм, по идее, тоже так сделан, но что-то не считывается. Может потому что по постеру и общему информационному шуму уже было заранее понятно, что фильм будет не про дочку",445
"Одни из нас, эпизод 1, часть 2. Будующее. Ну как будущее, 2023-й. Спойлеры!  По поводу будущего меня больше всего интересовало как оно, собственно, устроено. В смысле цивилизация, очевидно, разрушилась. Нам показывают Бостон, который теперь всего лишь один район, обнесенный стеной, домов на 500? То есть это сколько, в лучшем случае, тысяч 50? Причем застройка городская и очень плотная, поэтому главный вопрос: а что они, собственно, едят?  Если нет цивилизации, еду надо где-то брать. Где? В холодильнике? Что там случилось с животными, не очень понятно, но скорее всего это агрикультура, поэтому должны быть поля, да? Ну вот их че-то не видно, ни за стеной, ни внутри.  Еще странно, что над городом летает вертолет. Вертолет! Никакой цивилизации нет уже как 20 лет, бензин хранится в лучшем случае лет пять, откуда топливо? И даже если нефть все еще добывают и перерабатывают, разве эффективно ее тратить на вертолет?  Еще бросилось в глаза обилие распечатанных табличек (не нарисованных, а именно распечатанных). Как они сохранили их производство? И полный экип полицейских, с автоматами, рациями, шлемами, щитами, короче, полный комплект. Есть ощущение, что за 20 лет без производства и с чуть другими приоритетами (выживание) экипировка была бы, кхм, чуть менее с иголочки и распределена, кхм, чуть менее равномерно.  Упоминается, что в Атланте есть фабрика, которая производит _только_ такие предметы первой необходимости, как пули и пилюли (простите за рифму). Очень странный выбор, да? Заставляет задуматься (о логике сценария).  К организации тоже есть вопросы. Выглядит все так, что есть какая-то военная диктатура и все остальные, которые должны работать за еду. Неужели избыток производства настолько большой, что можно прокормить целую армию (бездельников)?  И еще это выглядит так, что диктатура и пролетариат немножко, кхм, на ножах, что ли? Что тоже странно — вам всем нужно выживать, цель общая, ну камон. Откуда трения? 20 лет, 50 тыщ населения, да вы все там друг друга знать будете за это время и в гости друг к другу ходить.  Там потом еще и сопротивление появляется, которое пытается... что, собственно? Мир разрушен, нихуя нет, идти некуда, лучше жизни все равно не будет, так за что борьба?  Главная деятельность сопротивления — рисовать на стенах свой логотип (не самый простой, требует трафарета, что опять же, как-то неэффективно) и писать тупую фразу «когда ты потерялся во тьме, ищи свет». Ну то есть что за философия? Гораздо легче представить, что они писали бы что-то в духе «Люди, вас обманывают» или «Федра сосет хуй», но «ищи свет» блин? Звучит так, что они не глаза людям пытаются открыть, а наоборот, в какую-то секту заманить.  Внутри штаб-квартиры сопротивления, разумеется, во всю стену нарисован логотип (на случай облавы, чтобы не отмазались уже) и происходит моя любимая (нет) драматургия: «я вам не скажу» — «скажи» — «не скажу». В чем конфликт непонятно, прогресса нет, люди просто ссорятся чтобы это выглядело «драматично». Детский сад, говорю же. Особенно улыбнуло «мы боремся за свободу и демократию, поэтому просто выполняйте приказы».  Происходит off-screen перестрелка непонятно из-за чего, а потом классический киношный прием, когда люди вместо того, чтобы сначала бежать в безопасность и там выяснять отношения сначала выясняют отношения и не особо куда-то торопятся. Ну и чисто режиссерская недоработка — когда не знаешь, что сделать с людьми, они просто стоят в коридоре друг напротив друга. Даже если истекают кровью. К — кино. Андор весь примерно так снят. Бесит ужасно, но в основном потому, что я как-то к более изобретательной режиссуре привык.  Потом наши герои бегут через буферную зону, которая как раз удобно не расчищена за 20 лет и в которой бродят одинокие полицейские. Потому что болезнь ест только гражданских, да?  Но в целом сериал норм и страдает, наверно, от некоторой наивности, поверхностности и завышенных ожиданий. Не Гражданин Кейн, короче.  А, кстати. Девочка шикарная. И актриса, и персонаж. Но хейтерс гонна хейт.",446
"Ну что, вроде бы очевидно, что к сериалу я неравнодушен, смотреть продолжаю, так что сильно постараюсь не доебываться, только к самым зацепившим местам. Хорошее тоже есть, но про него так интересно не напишешь, так что не думайте, что мне ничего не нравится или смотреть не стоит. Если бы не стоило, я бы и не смотрел. Итак, Last of Us, эпизод 2, часть 1/2.  СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ  Серия начинается с зарисовки из Индонезии в 2003-м, где случилось одно из первых заражений. Зараженного показывают профессорше (это преподавательская должность, если что, не научная), она глядит в микроскоп и такая: пиздец, бомбите нас всех нахуй. Что выглядит, конечно, эффектно, но — бомбите? Серьезно? Вот так сразу? Без полдня на подумать? Может, еще с кем-то проконсультироваться? Может другие способы есть? Лечение может поискать? Зараженных половить? Изолировать там, карантин, анализы, пропускной режим? Еще забавно, что профессор грибологии визжит, как студентка, при виде гриба. Очень научно, ага.  К бомбить тоже есть вопросы. Вроде как намекается, что это как раз то, что они в итоге и сделали, причем по всему миру. Но бомбежки это оружие скорее точечное, а тут нужно тотальное, разве нет? Людей-то вы, может, немножко убъете, а грибы еще и раскидаете по сторонам. Короче, сомнительно все это очень.  Дальше идет сцена, где девочке долго объясняют, где и как ей писить и какать. Наверное, хотели напугать нас хардкорностью пост-апокалипсиса. Ух, журналом приходится подтираться! Вот это условия! (опустим, что девочка, например, всю жизнь так живет, вообще-то).  Идет перекус сендвичем с курицей. Курицу я еще могу представить, но хлеб? Он еще и намазан соусом каким-то он. Ух, вот это хардкорность! Но я рад, что индустрия супермаркетов и мамы, собирающие дочкам рюкзак, в пост-апокалипсисе не пострадала.  Следует мой любимый троп «припрем дверь шкафом, а она открывается наружу» (Большой Лебовски великий фильм, да), и наша компания выходит наконец на свежий воздух (чего не помешало бы сделать и этому ревью).  К свежему воздуху у меня только один вопрос — оно не ощущается пустым. В смысле людей нет, должно быть ощущение заброшенности какой-то, не? Вместо этого в каждом кадре столько деталей и красоты, что как-то и непонятно, а что, собственно, мы потеряли? В какой-то момент герои любуются видом, и он реально красивый, а не разрушенный/заброшенный/унылый/страшный. Хоть бы кто-нибудь сказал «а ведь без человека мир не так уж и плох», но нет, никто этого не говорит. Это уже территория философии, а мы тут про побегать от зомби собрались, зачем настроение портить.  На самом деле я почти уверен, что если бы не было так красиво, то оно не стало бы таким популярным. Американцы, конечно, на словах любят, когда их пугают, но в первую очередь понарошку, чтобы с сендвичами и мамой с папой.  Ресторан, в котором взрывом выбило окна, но стаканы (все!) остались красиво стоять на столах? Ну да, ну да.  Элли рассказывает, как ее укусили в первый раз. Напоминаю, ей «14» лет (акртисе 20, но эй, это же Голливуд!) и она родилась и выросла в карантинной зоне, ни разу не выходила за периметр. Как же ее укусили? Оказывается, внутри карантинной зоны есть молл, в который «не рекомендуется ходить», а она из любопытства пошла и ее укусили. Не знаю как вам, но зараженный молл внутри периметра звучит, кхм, странно? За 20 лет и при всем том количестве оборудования и персонала, которое они тратят на простое патрулирование, можно было бы зачистить один молл?  Происхоит еще один «видеоигровой момент», когда герои встречают завал, через который спокойно протискивается взрослая (!) женщина 1,72 м (!!) с рюкзаком (!!!), и такие «ну что же делать, нам не пройти, придется сидеть-ждать». Мне еще нравится, как они подергали картонные двери по соседству и такие «закрыто, штош, значит судьба».  В видеоигре это объясняется, понятно, тем, что анимацию «пролажу через дыру» не сделали, а за дверями в отеле ничего нет, даже комнат. Но в кино-то?  Продолжение ниже",447
"Last of Us, эпизод 2, часть 2/2  СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ  Потом герои идут на замес в музей. Тут, кстати, у меня чисто художественный вопрос: вас обламало бы сделать его музеем грибов, биологии там, не знаю, ботсадом? Красивее же было бы гораздо? И страшнее — хуй разберешь, какое дерево просто дерево, а какое на тебя сейчас прыгнет.  Почему девочке не дают пистолет я если честно не понял. Не то чтобы они ее держат в заложниках или ведут куда-то против ее воли. Она вообще-то с ними заодно, и причин ей не доверять я не вижу. Плюс, перед лицом грибов, все люди — братья, разве нет? Очень странная драматургия, короче.  Следует схватка с «кликерами». Кстати, еще один чисто видеоигровой момент: чтобы герои не побежали назад, дверь, через которую они зашли, заваливает. Come on, я понимаю, что игрока надо на всякий случай ограничивать, но тут-то у вас герои, которым _надо_ пробраться через эту комнату. Какая у них мотивация бежать назад?  Кликеры — это такие чуваки, у которых глаза заросли древесными грибами и они ориентируются тупо на слух. Казалось бы, герои о них знали (обсуждали их, пока шли по мосту), знали, что зараженные есть в здании (нашли свежий труп), плюс они, как утверждается, «много раз» делали вылазки за карантинную зону. Однако никакой специальной тактики против них не используют, хотя казалось бы, брось камешек в другой конец комнаты и беги. У сталкеров были гайки для похожих целей, тут-то поди американцы за 20 лет тоже что-нибудь сообразили бы? Может не гайки, но вон пули говорят в избытке производят.  Короче, чуваки успешно выбираются (а вы как думали?), происходит любопытный твист с Тесс (кстати, актриса охуенная, из всех троих она больше всего на живого человека похожа), а потом грибы звонят своим по грибнице (художественное допущение, позволим) и к ним бежит толпа зомбаков (какой зомби-фильм без толпы зомбаков?). Кстати, для слепых они довольно четко и целенаправленно двигаются. Тесс жертвует собой (очень классная сцена, правда, но почему в ней Тодд Ховард, я так и не понял) и все заканчивается хорошо. Ну как хорошо? Нормально.  К этой части замечаний почти нет, кроме ухоженных бород у трупов. I mean, представить, что топливо для вертолетов, таблетки для сна или даже сендвичи в постапокалипсисе будут делать я еще могу — в конце-концов, это какие-никакие а потребности, а вот чтобы масла для ухода за бородой производили — это уже как-то слишком. Но это мелочи, конечно, просто забавно. Начинаешь еще больше любить работу гримеров и художника по костюмам на фильме Дорога, где все выглядят так, как будто и правда 20 лет живут на улице.  Но, опять же, не было бы красиво — никто бы это не смотрел. Спишем на кино-условности.  Жду с нетерпением третью серию, там Ника Оффермана обещают! Судя по реакциям, многим эта рубрика нравится, так что ждите ревью в понедельник-вторник!",448
"Идею сформулировал @grishka, и спасибо ему за то, что повторял достаточно много раз, чтобы она во мне проросла.  Очень запоминающаяся формулировка: время не должно участвовать в аутентификации вообще никак. Сессия не должна протухать, не нужно раз в две недели вводить пароль или раз в три месяца менять его. Никак — то есть совсем никак. Если я залогинился, значит, блин, я залогинился.  Протухающие сессии, регулярный ввод пароля и галочка «запомнить меня», которая работает как плацебо, на самом деле ни от чего не защищают. Твои данные не окажутся в большей безопасности, если ты будешь логиниться каждый раз. Если у тебя украдут сессию — ну, значит украдут. Expire в две недели все равно оставляет достаточно времени злоумышленникам, чтобы ей воспользоваться, но бонусом еще ест твои нервы.  Спасибо еще, что мода «регулярно менять пароль» осталась в прошлом.  Отдельный привет гениям-программистам из кинопоиска. У меня там даже аккаунта нет, но каждый раз когда я туда захожу, я вижу сайт, через пару секунд редирект на какой-то левый домен для аутентификации (кого? чем?), и потом редирект обратно на сайт. Объяснить или оправдать это я не могу вообще ничем.  Короче, если я залогился — не разлогинивайте меня без спросу. А безопасность своей сессии я уж как-нибудь обеспечу.",449
"По поводу третьей серии The Last of Us — ревью не будет. Сериал меня окончательно завоевал, разбирать на кусочки не хочется. Да, наверное, можно было бы круче (историю любви во время зомби-апокалипсиса можно ого-го какую написать!), но так тоже пойдет.   По поводу стиля Крейга Мазина, впрочем, есть вопросы. Во-первых он очень поверхностный. Не герои, а стереотипы. Не ситуации, а шаблоны. Не мир, а удобный задник. Хотелось бы узнать про жизнь что-то новое, неочевидное и при этом правдивое, а не просто выжимающее слезу. Как оно все работает, что с чем связано, что изменилось, а что осталось точно таким же. Но это высокая планка и нельзя по ней судить произведение, у которого свои задачи, конечно. Но как зрителю посмотреть что-то такое очень хотелось бы.  Во-вторых, есть ощущение, что сценарий слишком уж прямолинейный. У него нигде нет второго дна. Если герои грустят — они ходят и говорят «я грущу», если им нужно выяснить отношения — они идут и выясняют. А хотелось бы это понимать через косвенные действия, детали какие-то. Иначе это слишком уж для младшего школьного возраста.  Ну и хотелось бы хоть немного поэтики, метафор. Зачем это все, на что это похоже, рефлексии хоть какой-то. Вот самолет упавший — что мы об этом думаем? Что это нам напоминает? На что надеемся? А то слишком механически как-то.  Ну и зомби, хотелось бы, чтобы они зачем-то нужны были. А то пока серии такие, что можно было бы и без зомби вполне то же самое рассказать. Особенно третья — почему важно, что это происходит именно во время зомби-апокалипсиса?  Еще я поиграл в игру и, ну, выяснилось, что всякие глупости вроде самолетов с неба или походов в туалет это самодеятельность Мазина. А я-то думал что безработных сценаристов только в гейм-индустрию берут.  Будет ли разбор четвертой? Только если она меня чем-нибудь максимально тупым разозлит. Так что шансы высоки 🙂",450
"Провел в твиттере опрос, можно ли врать, с неудивительными результатами: 40% считает, что да. Из них 20% считает, что да, если это несет персональную выгоду (что еще хуже).  Твиттер, конечно, место известное, где люди путаются не в трех, а в одной даже сосне. Казалось бы: конечно же врать нельзя! Но почему-то стоит дать какое-то уточнение, и сразу вопрос становится неоднозначным. А если мне это выгодно? А если это чтобы наебать систему? А если никто не узнает? А если я очень хорошо вру? А если я зато собрал миллион лайков? Хотя вроде бы ничего не изменилось, вранье осталось враньем, и ничего хорошего в нем нет и гордиться им не стоит.  На меня лично большое впечатление произвел фильм «Выход через сувенирную лавку» Бэнкси. Это фильм не про самого Бэнкси, а про его друга-куратора, у которого очень интересная и метафоричная арка, якобы документальный. Но очень уж все красиво в конце складывается. И вот где-то ближе к концу Бэнкси вставляет такую фразу: «показывал этот фильм друзьям, и некоторые считают что я все придумал, что это такой розыгрыш (чтобы набрать классы), что ничего этого на самом деле не было. Что я full of shit. Но нет, все это взаправду».  И вот эта вот простота вернула меня в мир морального абсолютизма. Все на самом деле не сложно, а просто: обманул — даже если красиво, смешно, выгодно — ты full of shit. И ничего более. Правдивые истории в бесконечность раз важнее выдуманных. Мир строится на правде, а не на лжи. Прогресс происходит при честных взаимодействиях, а не на обмане и наебках.  Так вышло, что в нашем пост-советском обществе наебки считались поводом для гордости и это, видимо, многих путает. Не надо так. Те времена давно прошли, а в новых хороших гораздо лучше будет жить, если мы сможем доверять друг другу.  Врал ли я? Конечно врал. Приносило ли это мне выгоду? Тоже было дело. Буду ли я врать в будущем? Скорее всего. Но это никак не меняет того факта, что врать нельзя. Накручивать опыт, сдавать чужой диплом, ну камон — ну разве не очевидно, что это ухудшает ситуацию, уничтожает доверие, затрудняет взаимодействия, а не упрощает их?  В следующем выпуске разберем вопрос, можно ли бить детей. Тоже, говорят, вопрос далеко не однозначный.",451
"Разбирал в твиттере одно не слишком удачно сформулированное код-ревью, как пришли айтишники и давай обсуждать минусы вежливого обращения. МИНУСЫ! Типа, сколько максимум раз можно говорить пожалуйста? Нормально ли просить что-то сделать или надо приказывать? Поймет ли джун вообще, что от него хотят, если написать без оскорблений? Ну какое все-таки у нас сообщество, все о джунах думает и их удобстве, обожаю!  В связи с этим проговорю явно (да, явно, тут уже нельзя полунамеками): от вежливого обращения никто не умрет. У него нет, блядь, минусов! Что бы вы предпочли: унижающий вас тон и дельные замечания или вежливый тон и ТЕ ЖЕ САМЫЕ БЛИН дельные замечания? Кто-то реально выберет оскорбительный или там пассивно-агрессивный тон ПРИ ПРОЧИХ РАВНЫХ? Добровольно? Потому что суть-то не меняется.  Длиннее тоже не становится (моя вежливая версия даже короче получилась, например, и это я еще несколько «пожалуйста» добавил). В чем смысл настаивать на своем праве оскорблять других людей? Ради чего притворяться, что по-другому никак нельзя? Самоутверждение? Потому что других объяснений у меня нет.  Среди претензий была и такая, что, мол, вежливо писать это ж усилий надо прилагать, а у тимлида и так дел по горло, так что джуны обойдутся. На что я тоже хочу явно и недвусмысленно проговорить: усилия на формулировку надо прилагать, если только ты на самом деле так не думаешь. Если ты приходишь делать ревью с настроем «господи, все дебилы, за что мне вас бог дал, да откуда у вас руки растут, как такое говно вообще писать можно, все только на мне и держится», то да, чтобы этот настрой скрыть, надо прилагать усилия и выбирать формулировки.  Секрет? Не надо относиться к коллегам как к беспомощному говну, которое делает ошибки специально чтобы тебе день испортить. Всегда надо предполагать наилучшие намерения и продуктивный настрой. Тогда и формулировки сами начнут сами нормальные получаться, и переформулировать ничего не придется. Посмотрите еще выступление «This is Water» Дэвида Фостера Уоллеса, чтобы впечатлиться.  (исходный разбор не привожу, потому что во-первых начнется все то же самое, что и в твиттере, а во-вторых люди начинают суть ревью обсуждать, а мне интересна именно форма в данном случае)",452
"На всякий случай еще для айтишников повторю, потому что не все, кажется, понимают. Вежливо ≠ без мата. Можно токсично и без мата, со спасибо-пожалуйста, а можно максимально корректно через трехэтажный мат.  Нет: «Кто так пишет?», «Что это за говно?», «Чем ты думал?», «Опять?», «Надо пояснять?». Мата нет, но ЧСВ и дартаньянство сквозит в каждой букве.  Да: «Убери вот эту херню, а то если null в нее придет, весь стек ебнется и пиздец!» В таком коллективе с удовольствием бы поработал.",453
"Утром произошел забавный момент лудонарративного диссонанса. Решил я купить себе игрулю Hitman III, значится. Заказал диск на Амацоне, т.к. диски дешевле, чем цифровая копия (что? да!).  Сегодня пришел почтальон. Давай, говорит, паспорт. Я ему аусвайс свой. А он такой — не, настоящий паспорт давай. И реально давай переписывать все данные: номер, дату рождения. Типа, игра 18+, и видимо там пометка была проконтролировать. Еще спросил, что за страна такая. Короче, как будто я Майн Кампф в библиотеке беру.  Выдал в итоге конверт. Открываю, там диск, и на нем большими красными буквами — Enter the world of the ultimate assasin. Добро, так сказать, пожаловать, в мир международного шпионажа и наемных убийц. Но чтобы поиграть, будь добр, предъяви паспорт, убийцы у нас на учете состоят. Ну просто забавный диссонанс.  Кстати, игра еще и требует постоянного онлайна, чтобы все убийцы были под постоянным надзором товарища майора из... Дании? Что тоже как бы не добавляет очков погружению.  Ну и чтобы пост был не зря — а объясните мне, в чем прикол компаниям требовать онлайна в своих играх? Геморроя много, а выигрыш в чем? Сам геймплей полностью оффлайновый, если ты там что-то себе накрутишь, ну, сам дурак, кому какое дело? Я понимаю, что есть какая-то неприятная капиталистическая причина это делать, но мне хочется понять, какая именно.",454
"Есть такой модный новый браузер, Arc. Казалось бы — ну что браузер, давно уже все придумали. Но они решили пойти не в сторону упрощения интерфейса, а в сторону усложнения — всяких панелей там понавешали, режимов и прочего. В итоге страницы маленькие, работает все это не пойми как, но есть и хорошая фича — автозакрывание табов. Раз в день он все, что ты не трогал, закрывает, чтобы не копилось.  Мне Арк не зашел, потому что автозакрывателем табов работаю я сам. Когда-то давно я табы копил, пока не прочитаю, и они на меня давили. А потом понял, что сам себя мучаю, и начал безжалостно их убивать. Пришел на работу, а на ноуте открыт Ютуб с незакрытым роликом? Закрыл, потом в истории найду. Не могу прочитать статью уже два дня? Ну значит не очень-то и хочется. Закончил рабочий день? Браузер должен остаться пустым. Любую открытую страницу всегда можно найти снова, было бы желание. Так что привычка хорошая, но целый новый браузер ради нее терпеть не хочется.  Есть другие модные ребята, делают терминал на Расте, называется Warp. Тоже простую концепцию решили разбавить «фичами» и «улучшениями», которые каждое по-отдельности вроде бы разумно и хорошо, а вместе создает какой-то лишней ментальной нагрузки, которой от терминала как раз не хочется. Из серии «а что будет, если...». В обычном терминале ты это себе хорошо представляешь, а что тут эти улучшаторы наулучшали — фиг его знает.  Когда я только начинал пользоваться Маком, мне очень понравился iTerm 2. Прям фичи были в самое сердечко, и много, и хорошо. Потом чет я понял, что ничем из них все равно не пользуюсь, и переехал на встроенный Terminal. Так с тех пор и не жалею. Терминал, конечно, можно сделать лучше, но, получается, не нужно.  Третий пример это почта Hey (не «неу», а «Хэй», типа «Э, слышь!»). Ребята придумали делить всю входящую почту на четыре потока — неизвестные отправители, инбокс, развлечения и чеки. Сбацали продукт, продают, вроде бы, все хорошо у них. Сам Хэй я не пробовал, зато сделал себе аналог на фильтрах Fastmail. Получилось хреново (фильтры нужно вручную обновлять, а интерфейс там не очень), но когда поток более-менее устаканился, оказалось, что это офигенно! Именно эти категории лучше всего прижились — важное, но неинтересное (paper trail), неважное, но интересное (feed), важное интересное (inbox) и неважное неинтересное (screened). Последнюю я, правда, не сделал, но и так уже хорошо.  Какая мораль? Их две. Во-первых, красота некоторых продуктов в их минималистичном изяществе. В браузер или терминал сложно что-то осмысленно-полезное добавить именно как фичу, потому что их концепция уже позволяет исполнять любой вокрфлоу. Но дизайнерам платят за интерфейс, поэтому интерфейса у нас много, а изящества — мало.  Вторая мораль в том, что хорошие продукты иногда — не продукты даже, а привычки. Но вот популяризовать привычку сложно, поэтому стартаперы из долины делают то, что умеют лучше всего — новые продукты. Даже если цель — научить людей закрывать вкладки. Ну а как их еще научишь? Я не знаю.",455
"Не знаю кто как, а я последний месяц с кайфом пишу на Питоне ООП. Ну вот это старое-доброе, с классами, наследованием, виртуальными методами.  Среди функциональных программистов это считается зашкваром, а я ничего плохого в этом не вижу — когда инструмент используется по назначению, это же прекрасно. Когда работал в ДжетБрейнсе, у нас все было лямбда через лямбду, лямбдой погоняет. Лямбды, конечно, великое изобретение, но они же не гибкие ни разу, непрозрачные абсолютно, да еще и одинаковые все. А я люблю, когда все по полочкам, названо аккуратно, внутренности видно.  Ну и с ООП надо аккуратно, конечно. Лишнего не делать. Если интерфейс, то с несколькими реализациями. Если паттерн, то по делу, а не «на будущее».  Но если все правильно, есть какой-то кайф, когда ты в родительском классе говоришь: вот тут дети будут переопределять, а в ребенке переопределяешь. Аккуратно как-то, что ли.  Ну и работает.",456
"Писал в 2020-м в ЖЖ про Jetpack Compose, но оно и в контексте прошлого поста про ООП хорошо, и вообще про data-oriented design. С сокращениями:  Идея делать такое АПИ — видимо, призрачное счастье разработчиков. Действительно, что может быть проще, чем написать:  Column {    Button()    Text() }   Максимально лаконичное API, да? Но если присмотреться, мы увидим, что Column принимает не список детей, а замыкание. Почему это? Спросите вы. А потому что это гребаные процедуры, вот почему. Придумав такое API, ты невольно загнал себя в угол — его нужно держать строго определенным образом, и никак иначе. Удобно в простых примерах, а дальше начинаются сложности.  Мы, программисты, привыкли, что в коде можно делать много разных вещей. И нам это нравится! Можно принимать значения, передавать значения, трансформировать значения, обрабатывать значения. Но вы поняли, наверное, уже, к чему я веду, да? Компоуз решил нас этой радости, потому что его API ничего не принимает и не возвращает. Там нет значений. Его API можно только позвать, конец истории. Нельзя написать функцию, которая сортирует компоненты. Которая вставляет разделитель в список компонентов. Нельзя даже нормально вложить один компонент в другой без создания анонимной лямбды. Потому что и компонентов-то нет. Только лямбды.   А лямбды это что? Это худший из возможных форматов хранения данных. Хуже структур, понятно, и даже хуже чем ООП. Лямбда — это черный ящик, черная дыра, максимально негибкое, неудобное и безполезное явление, на которое ни посмотреть, ни потрогать, ни сообщение послать, ни разобрать, ни распечатать, ни сравнить, а только обернуть в другую такую же гребанную лямбду или передать дальше. Лямбды невозможно упростить — они всегда только растут, толстеют, как слои лука у Шрека или жировые прослойки на твоей слоеной архитектуре. Максимально вредный объект, особенно как основа API. И поверьте, внутри Композа (да и снаружи) этих лямбд хоть лопатой жуй, и они все анонимные, и ничего не принимают и не возвращают, и от неявных ресиверов зависят, и друг друга заворачивают и разворачивают (ха-ха, шучу, лямбду нельзя развернуть!) и они анонимные все! А, это уже было. Ну вы поняли.  [...]  Самый удобный АПИ у нас уже есть — это функции с явным списком аргументов и возвращаемым значением. И все. Конец истории. Лучше не будет. Серьезно. Не надо мудрить, хитрить, не надо придумывать «более удобный DSL», не надо аннотации придумывать, не надо компилятор форкать, не надо вообще программисту помогать вызывать функции. Лучше все равно не сделаете, а проблем на разгребание всего этого — создадите. Лучшая помощь — оставить нас в покое и дать писать обычный код.",457
"Ух как бесит мода писать обезличенные предложения. Типа, вместо «Я люблю кофе» — «Люблю кофе». И так же понятно, что «я», вот и сократили. Это от Ильяхова пошло, да? Просто другого такого вредителя не знаю.   И еще немного подбешивает Present Continous вместо будущего времени о чем-то, что еще даже не случилось, а только в планах: «Студенты делают задания и защищают диплом» вместо «Мы выдадим студентам задания, а в конце курса они защитят диплом».  Сокращение хороший прием только потому, что ему легче всего научить. Прочитавшие Ильяхова пишут сухо, а нормальные ребята вроде нас с вами — сочно и красиво, и не стесняются подлежащих. Сравните:  > Меня ух как бесит мода писать обезличенные предложения. Типа, вместо «Я люблю кофе» некоторые пишут «Люблю кофе». И так же понятно, что они имели в виду себя, вот и сократили. Эта мода пошла от Ильяхова, да? Я просто другого такого вредителя не знаю.   Мы же не роботы. И даже студенты Бюро не роботы. Не надо отбирать у них личные местоимения.",458
"Полдня потерял на совершенно идиотский баг: в мобильной версии нашего родного Roam Research есть экранные кнопки для Cut/Copy, и вот они везде работают, кроме Cut в мобильном Сафари. Причем не работает совершенно молча — пошел нахуй, так сказать, вопросы?  В Гугле, естественно, у людей если и не работает, так уж все целиком — ни copy, ни cut. Мне бы их проблемы!  И вот пол дня я потратил на разбирательства. Обложил все логами. Поставил Xcode, чтобы цепляться к эмулятору Сафари инспектором. Хотел сначала просто к телефону, но не смог — то, как оно должно работать, не работает (веб-инспектор магически находит твой телефон), а кнопки чтобы это зафорсить нет и никакой диагностики тоже нет. Apple — it just works (not).  Перерыл DuckDuckGo, отчаявшись, даже у Гугла спросил. Уже морально приготовился переписывать код на использование copy + delete при нажатии на cut, что, блин, совсем нетрвиально, учитывая количество вариантов, в которых оно может вызываться.  И наконец удача мне улыбнулась — я раскопал причину в исходниках WebKit, причем от отчаяния — к концу дня моя самооценка уже упала до нуля от беспомощных попыток починить происходящее методом тыка и ощущения, что я обезъяна, пытающаяся починить карбюратор, а чтение исходников это хотя бы осмысленное действие.  Оказалось, что перед тем, как выполнить Cut, Сафари (только мобильный!) проверяет canCopy & canDelete, и вот canDelete-то у него не получался, потому что у нас под это дело создавалась невидимая textarea и ей зачем-то ставился атрибут readonly (не спрашивайте, не знаю). А текстарея создавалась, чтобы программно породить событие ""copy""/""cut"", внтури которого уже можно работать с буфером. Потому что это же Web API, кто сказал, что должно быть удобно? Мне не нужно, чтобы работа была сделана, мне нужно, чтобы вы заебались.  Выводов три.  Первый — читать исходники полезно. Кто бы мог подумать, да? Полезно это еще и для душевного спокойствия — ты хотя бы совершаешь прогресс в понимании происходящего, а не пытаешься перебором собрать случайную комбинацию случайных действий, которые бы делали то, что тебе нужно.  Второй — мобильный Сафари дно, всегда им был и до сих пор им остается. Даже если у вас все отлажено и работает в 99% браузерах, вас все равно выебет напоследок мобильный Сафари.  Ну и третий — это ровно то, почему я вебом больше не хочу заниматься. Потому что сначала все хорошо-хорошо, а потом ты полдня тратишь на тривиальную радномную хуйню, которая вроде бы должна работать, но почему-то не работает. Специально, чтобы позлить тебя, да.  Я не против неделю дрочить какой-нибудь алгоритм, не против вылизывать перформанс, не против чинить баги, которые я или мои коллеги написали. Но это хотя бы _познаваемо_, это работа с причиной и следствием, пусть иногда и сложными и запутанными, работа с ограничениями реального физического мира.  А веб — это работа с радномной хуйней, которая копилась 30 лет и которая меняется постоянно непонятно кем непонятно зачем левой пяткой. Я против вот этой вот обезъяньей работы, когда у тебя есть коробка с деталями от часов, тебе надо ее трясти, пока внутри детали сами вдруг не сложатся в часовой механизм. Почему нельзя по-нормальному? Прост.  Ну то есть как против? Расстраиваюсь я. А я хочу быть веселым. Всем доброе утро, веб-программистам соболезную.",459
"Я уже писал, что терпеть не могу приватные поля и вообще всяческие заборы и ограничения доступа. «Но Никита, они же защищают тебя самого от плохих решений», — скажете вы.  Ну и ситуация. Понадобился мне значит бинарный протокол до Кложевского встроенного РЕПЛа. Потому что хотите вы или нет, а бинарные протоколы сильно проще кодить, чем текстовые, а потом они еще и компактнее получаются, короче, одни плюсы.  А Кложевский REPL-сервер дает только текстовый канал. То есть открывает обычный сокет, конечно, но поверх его бинарного InputStream-а создает пять оберток, одна из которых как раз занимается тем, что берет вашу UTF-8 строку и конвертит ее в байты за вас. Удобно? Нет!  Ну то есть удобно, пока ты там какие-нибудь JSON-ы или EDN-ы пересылаешь, но их парсинг дело не одного часа и даже не одного дня усилий, не говоря уже о размере кода. А я там себе MsgPack присмотрел, который сделан вот ровно как я бы сам делал, прям идеальненько, и парсер с сериализатором я вчера прям за час накидал. Но бинарный, сука, надо уметь байтики пересылать.  Ну и вот. Ситуация. Сокет есть, технически по нему ходят байты, но ебучая Джава тебя от этого «абстрагирует» и прячет его в приватные поля. Если вы думаете, что это какая-то метафора, нет, конкретно в случае с Кложей там три обертки — InputStreamReader, LineNumberReader и LineNumberingPushbackReader. Потому что у нас было четыре пакета травы, бла-бла-бла, когда начал оборачивать ридеры в ридеры, сложно остановиться.  И вот я стою перед ситуацией. Либо я расчехляю рефлекшн и --add-opens=java.io, которые жестко завязывают меня на конкретные реализации, конечно, но зато я получаю то что хочу, вещь, которая работает, пусть и с риском когда-нибудь в будущем сломаться или, допустим, не работать на какой-нибудь странной JDK (с чем я, в принципе, готов жить). Или не получаю совсем ничего и иду сосать лапу. И мне как-то кажется, что в ситуации «или что-то, пусть ограничено, но работающее, или тупо ничего, иди нахуй» объективно лучше первое, а не второе, при любых вводных.  Ну и вообще штука в том, что не авторам InputStreamReader-а это за меня решать. Если я хочу до чего-то добраться — дайте мне, блин, добраться. А я уже сам решу, плохо это, хорошо, или . Все равно эти реализации не менялись с Java 1, и уже, наверное, никогда не поменяются, а все сторонние JDK просто копируют реализацию. Я могу оценить этот риск, а автор, который изначально эти поля спрятал — не может.  Так мы и живем в мире, где, с одной стороны, компьютер должен и вроде бы может работать, сука, быстро, а с другой абстракции накладываются на абстракции и прячут внутренности друг от друга, а следующему слою приходится притворяться, что он не знает, что там происходит, и обходить эти ограничения по-своему. Все заняты, все устали, результат печальный.  Ну что мне теперь, бинарный протокол в base64 кодировать, что ли? Нет, так мы будущее не построим.  P.S. Немножко забавных деталей: InputStreamReader прячет переданный InputStream в sun.nio.cs.StreamDecoder, и туда я уже не очень хотел лезть, потому что выглядит проприетарно. Но зато он использует объект InputStream еще и как lock для синхронизации (в Java можно любой Object для этого приспособить), ну вот я на него и завязался. Ненадежно? Еще как. Why women live longer than men-вайбы. Ну а что мне остается делать?",460
"Расходимся, я уже все придумал. Неэффективно, зато удобно и просто  TOFO — Tonsky’s [Serialization] Format  Requirements:  - Textual - Simple to implement - Single-byte UTF-8 subset (ASCII) - Evertything is length-prefixed - No string escaping - Reasonably human-readable - Space efficiency is not a first priority   | Type   | Format                         | |--------|--------------------------------| | nil    | 'n'                            | | false  | 'f'                            | | true   | 't'                            | | int    | 'i' + 8b value                 | | string | 's' + 8b len + len bytes UTF-8 | | list   | 'l' + 8b len + len objects     | | dict   | 'd' + 8b len + 2*len objects   | | space  | \n or ' '                      |   Numbers are signed 32-bit ints hex-formatted (uppercase) and zero-padded to exactly 8 bytes:   | Number      | Representation | |-------------|----------------| | 0           | 00000000       | | 100         | 00000064       |  | 2147483647  | 7FFFFFFF       | | -1          | FFFFFFFF       | | -10         | FFFFFFF6       | | -2147483648 | 80000000       |   Example (with spaces):   d00000008   s00000002id      i00000140   s00000007session s0000002436c8691a-4931-4995-9fea-bafb6a6d6174   s00000002op      s00000004eval   s00000005forms   l00000002                      s00000007(+ 1 2)                      s00000019(println ""Hello, world!"")   s00000002ns      s00000004user   s00000004line    i00000002   s00000006column  i00000000   s00000004file    s00000035/Users/tonsky/ws/clojure-sublimed/test_repl/forms.clj   Example (compact):   d00000008s00000002idi00000140s00000007sessions0000002436c8691a-4931-4995-9fea-bafb6a6d6174s00000002ops00000004evals00000005formsl00000002s00000007(+ 1 2)s00000019(println ""Hello, world!"")s00000002nss00000004users00000004linei00000002s00000006columni00000000s00000004files00000035/Users/tonsky/ws/clojure-sublimed/test_repl/forms.clj",462
"Расходимся еще раз, хз че со строкой делать. В смысле непонятно, как через Reader, который под капотом кодирует в UTF-8, считать n байт, учитывая что единственное что он дает делать — читать UTF-16 character. Можно, конечно, читать по-одному char и считать, сколько места он занимает в UTF-8, но это как-то превышает пределы идиотизма, на которые я готов пойти  Предполагается, что этот самый Reader заведен для удобства, так вот, знаете что? Мне почему-то нифига не удобно. Просто дайте мне байты, неужели я так много прошу...",463
"Короче, втянулся в Hitman, особенно в режим Freelancer. Причем втянулся довольно банально — увидел на Ютубе, зацепило, но чувак так плохо играл, что пришлось пробовать самому.  Freelancer — это такой roguelike, сделанный на основе существующих карт из Hitman 1-2-3, но хорошо сделанный, и в чем-то даже лучше отражает концепцию, чем оригинальная игра — приходится рисковать и импровизировать, а не ходить по одним и тем же дорожкам, заучивае расписание каждого NPC.  Кстати, твист на тему roguelike/roguelite довольно забавный. Roguelike это когда никакого мета-прогресса нет (например, Spelunky), а roguelite когда ты постепенно качаешься (как в Hades). Так вот, с одной стороны, во Freelancer ты постепенно нарабатываешь себе разного оружия, которое теоретически можешь брать с собой на миссии. А с другой — если что-то пошло не так, то его у тебя забирают. Так что прогресс тут такой, двухсторонний. Я за часов тридцать более-менее стабильно удерживаю только пару хороших пистолетов и пару винтовок, остальное как приходит, так и уходит.  А так да, все признаки Rogulite-игр: отлипнуть невозможно, сразу хочется еще дозы. Не ожидал, что ААА игры могут затягивать, обычно это удел инди. Ну и что понимать игру ты начинаешь после довольно существенного вложения времени (30-50 часов), за котороые обычные игры уже заканчиваются.  А интересно тут вот что. Мне кажется, что Хитман в первую очередь про контроль эмоций. Видишь возможность завалить свою цель? Не торопись, оцени обстановку. Это прямо противоположно тому, что _хочется_ сделать. Игра учит этому довольно жестко. Все пошло наперекосяк? Хочется, понятно, паниковать, а надо, наоборот, действовать четко, есть вполне конкретные шаги, которые нужно предпринимать. Это довольно сложно, учитывая, как все начинают бегать с винтовками наперевес, искать тебя и играет тревожная музыка, а тебе надо вести себя спокойно. Наконец, торопиться — последнее дело. Игра супер размеренная, большую часть времени ты подглядываешь из-за угла или там ныкаешься в шкафах. Но при этом это жутко интересно!  Еще, кажется, в Elden Ring была похожая зацепка. Когда ты видишь босса в первый раз, тебе хочется просто сразу бросить оружие и заплакать. Следующие несколько раз ты пытаешься что-то делать с его атаками, но делаешь это на инстинктах, то, что _кажется_ правильным (например, он замахнулся мечом — ты выставляешь щит, а он задерживает атаку и ударяет, гад, только через секунду). И только спустя пару десятков раз ты наконец понимаешь, что на самом это все был фасад, который пытался тебя обмануть, заставить действовать эмоционально, как _кажется_ правильным. А вместо этого есть вполне конкретные моменты и конкретные действия, которые надо предпринимать, и они даже не особо сложные. Но вот заставить себя хладнокровно смотреть, как дракон размером с дом машет хвостом и замахивается лапой и ничего не делать, пока не наступит правильный момент — вот где настоящий геймплей, настоящий челленж.  Короче, если что, рекомендую. Я слишком поздно/не там родился, чтобы оценить классические immersive sims, ну вот это closest and most pure thing today, кажется.",464
"Не понимаю я облака. Не понимаю и все.  Три сеньера (!) ебались с прошлого четверга, чтобы запустить ебучую функцию в ебучем Firebase. Причем не с нуля — у нас уже были функции, нужно было добавить новую. Но нет, не работает и все тут. Раньше работало, и продолжает работать, а точно такая же новая — нет.  В процессе я насмотрелся на всякие бездны админок Гугл клауда, которых, конечно же, несколько версий одновременно, переходы между которыми неочевидны, если вообще существуют. То есть буквально, читаешь ответы на стековерфлоу, а там «попробуйте вот такой URL», пробуешь — и попадаешь в интерфейс, который никогда не видел и как в него вообще попасть — хз.  Насмотрелся на всякие сообщения типа 7423/7424 permissions. Кому, в каком страшном сне, в принципе, хотя бы теоретически, может понадобиться регулировать доступ на таком уровне гранулярности? Для каких задач? Я понимаю, что «серьезных», но блин.  Начитался экспертов, которые рассказывают, что сообщениям об ошибках нельзя верить — если написано одно, то проблема, скорее всего, в чем-то другом. Вот это серьезный, энтерпрайз подход, вот это я понимаю! Годы здоровья этим экспертам, потому что я человек доверчивый — вижу узкоспецифичное сообщение об ошибке про CORS — думаю, что проблема именно в CORS.  Насмотрелся на проблемы версионирования, когда одна и та же тула раньше работала одним образом, а теперь другим. Или когда та же версия той же тулы перестала работать. Или Гугл на своей стороне поменял логику и теперь те же действия приводят к другим результатам. Удобно, ничего не скажешь.  Ну и надо ли говорить, что документация под все это практически отсутствует. Документация — это стековерфлоу и форумы, а сам гугл в основном показывает «пук-среньк, поставьте наш SDK и ни о чем не спрашивайте». Серьезно, у них больше доков по тому, как SDK поставить, чем по API этого SDK.  И все это ради того, чтобы вызвать три строчки скрипта «в облаке». За потраченное время я бы уже купил три сервера, настроил между ними load balancer и http-сервер с letsencrypt с базой поднял. И все бы работало.  Кстати, мой любимый ответ на stackoverflow, который я видел за это время — у меня что-то перестало работать, я подождал пару дней, ничего не делал, заработало опять. То есть облака еще и «надежны».  Короче, не понимаю, кому эти облака нужны. Нифига не удобно же, и сложно как ракетный двигатель. В чем плюсы?",465
"По роду своей деятельности я много пользуюсь веб-интерфейсами. И, конечно, они не могут быть все идеальными, нет-нет да и отвалится где-то что-то, или съедет, или наедет, или спрячется.  Отдельно люблю баги с лайаутом, где вещи плохо центрированы. Причем несложные даже случаи, вроде текста в кнопке или иконки в прямоугольнике. Казалось бы — ну как? Ну вот у тебя есть одна квадратная вещь, и есть другая, чуть побольше. Любой школьник шестого класса напишет вам и формулу, и программу, как центрировать одно относительно другого.  Но не в веб-программировании! Если думать об объектах как о прямоугольниках, то конечно, все будет просто. Но в вебе на каждый прямоугольник накладывается примерно миллион дополнительных правил: метрики текста, line-height, inline, выравнивание по baseline, распидорашивание флексов, наследование font-size и разные нелинейные единицы размеров, направление текста и прочие всякие зарезервированные места под скроллбар и тому подобное. Любой объект обязан про все это помнить и учитывать, но это просто не помещается номальному человеку в голову — поэтому и имеем то, что имеем. То есть нет-нет да и отвалится где-то что-то, или съедет, или наедет, или спрячется.  Конечно, скажете вы, тебе хорошо рассуждать про прямоугольники, но зато веб столько всего учитывает, там же СЕМАНТИКА. Ты не говоришь, что какой формы и что во что вложено, а как бы намекаешь компьютеру, что все это значит, и если повезет, то он покажет то, что ты от него хотел. А если не повезет, то покажет что-то другое и будет прав, а ты иди еще CSS подучи.  И я все это понимаю. Семантика, да. Сложная система, да. Но знаете что? Единственная семантика иконки внутри кнопки — что она стоит внутри по центру. И не надо мне про высшие цели рассказывать. Про высшие цели поговорим, когда вы научитесь иконки центрировать и три кнопки в ряд ровно ставить.  И не надо мне рассказывать, что это все можно сделать в вебе и что это не сложно. Просто посмотрите на факты — количество кривых и разваливающихся веб-интерфейсов и количество таких же нативных. Нужно не просто, чтобы можно было сделать нормально, но и чтобы нельзя было сделать ненормально.  А как научитесь — там и про семантику поговорим.",466
"Не могу не написать про последнюю серию The Last of Us, раз уж начал. Как обычно —  СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ СПОЙЛЕРЫ  Сериал получился очень странным. С одной стороны — да, есть мощнейшие сцены. Но они мощнейшие только локально, в моменте. В общую картинку они так и не складываются, накопительного эффекта не происходит.  Поначалу вырисовывалась красивая концепция — все, кого герои встречают, живут максимум одну серию. Хорошие, плохие — все. Как вести себя в такой ситуации? Что будет тобой двигать? Что будут означать для человека такие встречи, если он знает, что долго они не продлятся? На все эти вопросы сериал не дает ответа 🙂 Более того, они даже ни разу не вспоминают потерянных попутчиков и встречи эти никак героев не меняют. Так что это скорее случайность, а не концепция. А жаль, хорошая тема была бы.  Про постапокалипсис тут тоже ничего нет, задник этот очень условный. Ну там самолеты какие-то падают, нацистские правительства какие-то, рейдеры — это все на уровне фоновых мазков проработано, и углубляться в это бессмысленно. Человек против мира — такое можно и на диком западе представить, и в большом городе — да где угодно. А жаль, про постапокалипсис что-нибудь умное я бы тоже с удовольствием посмотрел.  Остаются отношения девочки и Педро. Вроде бы, достойный костяк, немало хороших фильмов на этом сделано. True Grit, например, или, не знаю, Leon The Professional тот же. Но тут тоже какая-то дыра, в некоторых сериях героев вообще почти не показывают!  Ну и короче я даже не знаю, от чего тут кайфовать. Я очень хотел бы найти, но не могу, к сожалению.  Ну и про концовку. Я знал, что она противоречива, но не знал, чем конкретно. Еще раз — спойлер!  Итак, Джоел успешно приводит Элли на операцию по изучению ее иммунитета. И узнает, что Элли в процессе погибнет, зато доктора получат лекарство и спасут весь мир! Штука в том, что доктора решили это сделать молча, без согласия Элли. Ну Джоел, понятно, психанул, перестрелял весь госпиталь и «спас» Элли. А мир не спас. Да еще и не сказал ей ничего. Ну вот, типа, противоречие. Прав или не прав?  И это, сука, действительно бесит. Потому что конфликт тут не настоящий, а из серии «не поговорили». То есть строится на том, что кто-то кому-то чего-то не сказал. То есть, все хорошие, противоречия нет, но все грустные и страдают. И, главное, путь к разрешению кристально ясен. Но нет, будем сопли жевать.  Бесит, если честно, такая драматургия. Поговорите — и проблема решена. Я еще понимаю, для первого акта, туда-сюда, как завязка пойдет. Но заканчивать на этом?  На самом деле, главная причина противоречивости: а не охуели ли вы, господа (за мат извени), заканчивать сезон на полуслове? Что это еще за клифхенгеры? Давайте уж, пожалуйста, разрешайте конфликты, а для второй серии придумывайте новые. А так не пойдет. Да, вот от этого у меня реально бомбит. Что это еще, блять, за эксперименты? Это вам что, Дюна часть первая?  Ну а насчет — правильно ли поступил Джоел? Сложно сказать. Тут условность задника начинает мешать прочувствовать важность решения. Дело в том, что в мире Last of Us они боятся этой мировой эпидемии меньше, чем мы боимся короны. Буквально — ходят без масок, лазят по зараженным канализациям, трогают/дышат грибами. Кто умер — те уже умерли, с новыми зомби (опять же, по тому, что нам показали) особых проблем ни у кого нет. У людей там все довольно неплохо, как бы странно это ни прозвучало. Они научились sustainable жить и даже наладили производства и комунны. Сложно при таких вводных почувствовать, что лекарство кого-либо там бы спасло или вообще что-то существенно поменяло.  Это, опять же, к вопросу о качестве сценария и накопительном эффекте. Если бы нам восемь серий показывали, как всем хреново именно без лекарства, то к девятой мы бы, может быть, прочувствовали всю трагедию необходимости делать выбор. А так у них там то клубничка, то фашисты, то педофилы. Ну и кому тут поможет противоядие?",467
"Посмотрел Сэма Олтмана (OpenAI) про ChatGPT у Лекса Фридмана.  Во-первых, удивительно, как люди любят путаться в словах. Обладает ли ChatGPT сознанием? Создали вы ИИ? При том что эти слова могут означать что угодно, более того, мы сами решаем, что они означают. Вот мы сделали что-то, оно вот так работает, какая разница, каким словом вы это назовете?  Во-вторых, уверенность, что мы узнаем сознание, когда его увидим. Дело в том, что мы не знаем, как это понять. Вот есть вокруг нас, например, муравьи, вороны, дельфины. Обладают ли они сознанием? Даже если и да, они явно не торопятся вступать с нами в контакт. Но есть также и люди, аборигены какие-нибудь, например, которые днем ходят отжимать у львов добычу, а ночью укуриваются и ловят приходы. Обладают ли они сознанием? Есть ли у них понятие «я»? (вроде не у всех?) Страдают ли они от своего существования? Ищут ли цель жизни? И если они всего этого не чувствуют, то что с этим делать? Ведь мозг у них точно такой же.  В-третьих, страхи перед ИИ. Понятно, что основной страх — что он станет умнее человека. В этом смысле человеческое общество пока держится на том, что мы все примерно в равных интеллектуально условиях, а наращивать мозг, в отличие от мускул, мы пока не научились. Можно родить новый мозг, но нельзя, скажем, удвоить себе память или разогнать процессор.  А у ИИ — можно. Поставил рядом второй датацентр и вот вместо Эйнштейна получился Эйнштейн в квадрате. Страшно. Ну то есть людям страшно не от самого этого факта, как я понимаю, а от того, что оно станет умнее нас и поэтому сможет нас уничтожить.  На что у меня есть два ответа. Первый: что значит захочет? В подкасте это тоже несколько раз проскакивало, причем незаметно. А это важно — «хотеть» это слишком человеческое, и вообще говоря к интеллектуальной деятельности отношения не имеет. Так же как и другие чувства: злость, зависть, радость, амбиции. Типа, конечно, можно будет, наверное, когда-нибудь это все в ИИ добавить, но вопрос — зачем? Нужен ли нам страдающий или сомневающийся компьютер? Написал функцию, а он тебе: I’m sorry, Dave, I’m afraid this code looks too stupid to even try to compile.  Ну и второй: а вы уверены, что сверх-интеллект вообще захочет с нами возиться и чем-то там управлять или контролировать? Потому что если посмотреть на наш мир, на вершине сидят далеко не самые умные люди. Я как-то уже писал историю чувака, который придумал тест IQ. Он сделал тест, чтобы собрать клуб умных людей и решать судьбы мира. Но оказалось, что собравшись вместе, люди с высоким IQ не особо спешили решать чьи-то судьбы, а вместо этого начали решать и обмениваться головоломками. Представляете, просыпается в компьютере супер-сознание, идет на амазон и заказывает себе книжечку «1000 и 1 судоку» на порешать.  Есть, наверное, другой страх, религиозно-экзистенциальный. Вот мы всю нашу жизнь были уверены, что сознание это что-то трансцендентное, непознаваемое. А тут вот через пять лет уже построят точно такого же человека, но из проводков и транзисторов. И окажется, что ничего такого особенного у нас в голове нет, набор химических реакций и логических гейтов, который прекрасно воспроизводится. И что тогда?  Мне лично норм. Я как-то писал, что вся кажущаяся сложность нашего сознания на самом деле сформирована на конечном количестве входов. Просто это количество очень большое, поэтому кажется, что бесконечное. Но это неверно в математическом/физическом смыслах. Каждый из нас прочитал конечное количество книг, провел конечное количество часов за телевизором, прочитал конечное количество твитов, услышал конечное (хоть и очень большое) количество слов за всю жизнь. И то, что мы можем описать, что происходит в стихе «Влез котик на плетень и моргает, эта песенка короткая, не длинная» это не какое-то волшебное свойство нашего сознания, а просто следствие очень большого количества входных данных.  Guess what? Computers can now do that, too. Привет. Передайте, пожалуйста, следующий конверт с иероглифами.",468
"Кстати, пока мы не разошлись. В том же самом интервью Лекс, понятно, спросил, разгонят ли 90% программистов-неумех? На что Олтмен ответил: не разгонят, но если код станет писать легче, просто все начнут писать намного больше кода. Миру, говорит, кода остро не хватает!  Ну и по этому поводу у меня, конечно, противоречивые чувства. У меня есть ощущение, что как в двухтысячных начался Веб, так мы до сих пор и не разобрались, как его хорошо делать. И натив тоже. А тут уже ИИ привлекают. Стыдно!  С другой, конечно, как старому деду, мне кажется, что кода не мало, его много. Надо больше Кложей и меньше Котлинов, условно. Больше Go и меньше JS-а. Больше Хаскеллей, меньше C++. Больше unikernel-ов, меньше докеров. Больше короткого и простого, меньше раздутого и сложного.  Но, реалистично, теперь уже, наверное, никогда и не наведем порядок. Будем промты генерировать, как маги заклинания, а под капотом что-то там совсем неведомое будет происходить, и иногда работать, а иногда и нет.  Добро пожаловать в сингулярность!",469
"Поскольку я уже старый, мне надо периодически пить таблетки. Память в моем возрасте уже не очень, так что у меня стояла на них напоминалка. Как-то я поделился скриншотом в Твиттере, и мне говорят: а чего ты приложение «таблетки» не используешь?  И правда, у Эпла есть такое приложение, специально для таблеток. Перешел. Использую. И вот какие ощущения.  Вам не кажется, что вся эта история с приложением на каждый чих, ну, немножко переходит в область абсурда? Что смысл существования многих приложений, ну, как бы высосан слегка из пальца?  То есть понятно, индустрия приложений, многие люди только на этом и живут, но вот с точки зрения пользователя — действительно ли «Таблетки» приносят так много добавочной пользы, чтобы не пользоваться обычными «Напоминаниями»? Приносят ли они _вообще_ хоть что-то, чего нет в Напоминаниях или Календаре?  Кстати, о Календаре. Если честно, разницу между календарем и напоминаниями я не очень понимаю, мне кажется, они плюс-минус одними и теми же объектами оперируют (разовые или повторящиеся события).   То же самое со списками покупок. Наш с женой список покупок — это телеграм-группа. Да, бывают специализированные приложения, которые, там, подсказыавют названия продуктов, или сортируют список по положению в супермаркете. Но так ли это важно?  Если честно, я бы вообще много чего вел тупо в Телеграмме, если бы группы на одно себя было бы легко создавать. Почему нет? Один интерфейс, к которому быстро привыкаешь.  Короче, есть ощущение, что специализированные приложения это немножко зашквар, а настоящее просветление — в чем-то простом, едином и универсальном. В некоем комбайне, сочетающем заметки, календарь/напоминания и чат. И делай там, что хочешь. Power to the user, так сказть.  Есть такое уже? Или плохая идея?",470
"Споткнулся вчера на довольно тривиальной фиче: я использую sdkman для управления версиями java, увидел, что на днях вышла 20-ая, а так как я люблю все новое, я конечно решил попробовать. Ну и пишу:   sdk use java 20-open   На что он мне:   Stop! Candidate version is not installed. Tip: Run the following to install this version § sdk install java 20-open   То есть, эта сволочь знает, что надо делать, но не делает, а заставляет меня писать буквами.  Ну я конечно сразу жаловаться в твиттер, но сочувствия как-то не нашел. «Не люблю, когда что-то делают без моего ведома», «Пусть лучше спрашивает», «Что если я не хотел устанавливать?», «А если у меня 200 Мб осталось?», «Напиши скрипт, ты же разработчик».  Давайте попробую пояснить свою точку зрения.  > Не люблю, когда что-то делают без моего ведома.  Но программа делает миллион вещей без твоего ведома. В этом и смысл программы — взять на себя часть забот. Почему, скажем, писать на диск, редактировать пути — нормально и не требует подтверждения, а выход в интернет требует?  > Пусть лучше спрашивает.  Чем лучше-то? Получается же непредсказуемость: одна и та же команда _иногда_ работает, а _иногда_ нет. Зависимость от глобального состояния.  Ну и вопрос Y/n он как бы ломает потенциальную автоматизацию, не? «Я запустил bootstrap.sh, и ничего не случилось, почему? А, там какой-то дебильный скрипт в середине решил со мной поговорить».  > Что если я не хотел устанавливать?  Но... Ты же хотел использовать? Как можно хотеть использовать, но не хотеть устанавливать? Одно явно подразумевает другое — нельзя использовать, не установив предварительно.  > А если у меня 200 Мб осталось?  Ну, давайте уже в современные реалии переместимся. Когда последний раз у вас 200 Мб оставалось? Сейчас некоторые сайты поболее весят.  Ну и в конце концов, осталось 200 Мб — ну не установится, но хотя бы по хорошей причине. В чем проблема?  > Напиши скрипт, ты же разработчик.  Ну вот еще, на каждый чих скрипт писать. Вообще, что это за идея, что если разработчик, то нужно обязательно страдать? Почему если я разработчик и хочу, чтобы мои инструменты работали просто и удобно, я сразу подвергаюсь остракизму?  Плюс, не знаю, заметили ли вы или нет, но другие программы вообще-то ничего не спрашивают и им норм. Rust рутинно отжирает гигабайты и делает это вполне молча. Maven не спрашивает перед скачиванием каждой зависимости: хотите ли вы? Потому что я уже сказал, что хочу. Сайты тоже грузятся и кешируются молча. Представьте, каждый сайт бы вас спрашивал: «этот сайт весит 4,5 Мб, желаете продолжить загрузку?»  Почему идея «вещи, которые просто работают» считаются зашкваром? Кто испортил? Я хочу, чтобы вещи просто работали. Я хочу поменьше думать о несущественном и банальном. Я хочу тратить время на важное. И при этом я — разработчик.  Разве я о многом прошу?",471
"Прислали сегодня пулл реквест, который я сначала принял просто за код новичка, но потом понял, что его, похоже, сгенерила нейросеть.   - Поменяла возвращаемое значение функции, но не поменяла места вызова; - перепутала иммутабельное API с мутабельным; - позвала API, которые забыла подключить в проект; - придумала несуществующие API, типа path-seq на замену file-seq, или ZoneId/UTC вместо настоящего (ZoneId/of ""UTC""); - подвигала без особой причины кучу кода, удалив нечаянно важные части; - склеила код из по-отдельности логичных, но не стыкующихся частей, типа:   (-> {:code code :name name}   (when notes (assoc :notes (str/trim notes))))   - добавила комментов, которые повторяют название функции, типа   ;; Fill all features of the font (defn fill-features [font] ...)   - разсбалансировала скобки 🙂  Когда я понял, что что-то тут не чисто, пошел перечитал описание, и да, точно, нейросеть только так и пишет (можно все не читать):   I hope this message finds you well. I wanted to reach out to you regarding my recent pull request to your repository. I have made several improvements to the code, which I believe would benefit the project as a whole.  Firstly, I have included unit tests, added try-catch blocks, and simplified the multimap-by function to enhance the code's reliability and prevent potential errors. I also have added docstrings to make the code more understandable and easier to navigate.  Moreover, I have used a threaded ->> macro to simplify the code and replace the println statement with proper logging to improve the code's readability. Finally, I have enhanced the code's modularity and conciseness, making it more maintainable and easier to modify in the future.  I believe that these changes would greatly improve the project's overall quality, and I would be honored if you could review my pull request and consider accepting it. Thank you for your time and consideration.   Работать программистом она явно пока не может, даже джуном. Но время мое успешно потратила.  Так что с почином. Дальше будет только хуже.",472
"Чистил на днях папку Downloads и натолкнулся на поведение, про которое в принципе знал чуть ли не с первых дней знакомства, но которое все равно приятно меня удивило на фоне все плохеющего и плохеющего софта.  В macOS есть понятие Quick Look — это когда в Файндере ты нажимаешь пробел и любой файл тебе как-то показывется тут же в попапе. В интернет-магазинах иногда подобное делают, типа, посмотреть чуть крупнее/подробнее, но не переходить на страницу товара (поотму что долго, контекст потеряется, кнопка назад кое-как работает и вообще это сайт, люди в вебе должны страдать).  Ну вот, в macOS такая функция тоже есть системно, и она типа покажет файл по-быстрому, не открывая его родной программы. Не со всеми форматами умеет, но с картинками, pdf и всякими текстовыми хорошо справляется, и даже сторонние приложения регистрироваться могут. Markdown, например, гораздо удобнее так смотреть, потому что иначе оно начнет Xcode открывать (что? да!), а это история не на одну минуту. А тут почему-то за миллисекунду может показать, хотя, казалось бы, тот же файл, и просмотр тем же Xcode-ом реализуется. Получается, могут и быстро сделать, если захотят.  Ну так вот, поведение это заключается в следующем: если открыть, скажем, картинку в QuickLook, появится попап с ней. Если после этого нажать Cmd+Down, который «просто открыть в программе», откроется Preview, полноценная программа уже, которая всякие там аннотации умеет, конвертацию и прочее. Настоящий просмотрщик уже.  Так вот, окно Preview возникнет вокруг уже открытой картинки. Т.е. картинка на экране не сдвинется ни на миллиметр, останется пиксель-в-пиксель, даже не дрогнет. А вот рамка окна от QuickLook спрячется, и на ее месте вырастет рамка окна Preview.  Ну круто же!  Причем это поведение идет с самых первых версий OS X, вроде как. По крайней мере с тех, с которых я начинал. Тогда еще операционные системы были не просто лаунчерами для Электрона, а имели какие-то отличительные черты, за счет которых переманивали пользователей. Старались помогать людям, а не менеджерам производителя.  Архитектурно это, наверное, не очень аккуратно — получается, две разные программы друг о друге как-то знают, и вообще дефолтный просмотрщик можно поменять, но из коробки работает и чуть лучше, чем ожидаешь. Такое вот внимание к деталям там, где никто, вроде бы, не просил.  Ну вот. А теперь ложка дегтя. Только я собрался этому в очередной раз порадоваться и написать в твиттер, что, мол, скучаю по тому самому Эплу, который делал такие вот безумные штуки на ровном месте и как за вот это вот дополнительное внимание его и ценили. Собрался, закрываю Preview, чтобы экран на этот раз заснять, а под Preview осталось окно от QuickLook! Незакрытое. И оно его мне гордо показывает.  Тут надо заметить, что QuickLook вещь вообще очень контекстуальная. Оно создает очень странные окна, которые не крадут фокус, например, и во многом довольно странно себя ведут. Так что это не то чтобы «оно показало окно незакрытого приложение». Это скорее что-то вроде «я функцию уже дописал, а автокомплит до сих пор открытый висит». Неожидаемое поведение. И раньше такого, вроде бы, не было.  Так что да. Чуда не случилось. Поведение, скорее всего, дожило до наших дней по чистой случайности. А я все равно скучаю по тому самому Эплу. Привет.",473
"Есть у меня свой небольшой свечной заводик^W^W серверок, на котором грампи крутится, статика и еще всякое по мелочи. И периодически мне нужно файлы с него туда-сюда гонять (ладно, да, это торрент-нода для кинцо и сериалов, особенно тех, что легально в Германии фиг посмотришь).  Ну вот, делаю я это обычно через scp. И сначала я очень страдал, потому что, типа, в одной вкладке зайди по ssh, сделай ls, а в другой потом пиши команду scp, что как бы геморно — два терминала нужно. Но гемор даже не в этом, а в том, что имена файлов надо эскейпить, а в случае scp эскейпить дважды. Если честно, я до конца не понял, какие там правила, я просто обычно щедро отсыпаю кавычек и бэкслешей, пока не заработает. А торрентоделы, гады, любят иногда пробельчиков или, прости господи, скобок в имена насовать.  Именно поэтому я и не люблю терминалы. Все текст, но какой-то текст более специальный, и правила везде разные, и взаимодействует это все хрен знает как, и с распечатанным объектом ничего уже не сделаешь. Вроде бы вот он, фильм, я его вижу, все название его вижу и полный путь, прямо передо мной на экране написано. А взять не могу.  Ну короче, решил взять GUI-шную программу для походов на сервер. Уж они-то, поди, разобрались, какие там правила эскейпинга. Взял CyberDuck, т.к. он бесплатный, а нужно мне это раз в пару месяцев. Круто. Можно зайти (по WebDAV, правда, но он у меня уже был настроен), и все файлы как в Файндере нарисованы, можно мышкой выбирать один или пять подряд или три через один, можно перетаскивать, красота, в общем. Пик удобства, прогресс (да, я правда терпеть не могу терминалы).  А что, думаю, надо проверить, как у них дела с эскейпингом имен с квадратными скобками. Начинаю искать такие файлы и не нахожу!  Короче, CyberDuck, вместо того, чтобы их как-то эскейпить корректно и обрабатывать просто берет эти файлы и не показывает. Не, ну а что, тоже решение.  Морали не будет. Занавес.",474
"Увидел вчера видос, где якобы обсуждают «Worst Practices» программирования. Ну и там тетка три минуты рассказывает, как использует для дебага printf и ей стыдно. Мол, надо бы дебаггером научиться, конечно, пользоваться, но принты это так удобно.  Ну и в твиттере довольно адекватная реакция: народ не понимает, а почему, собственно, worst? Я склонен присоединиться: да, логически, дебаггер более правильное решение, более изящное, более мощное. Но только логически!  Если ты, я и Сашка все равно пользуемся принтами каждый день, то, может быть, надо не стыд по этому поводу испытывать, а задуматься: что-то наверное не так с дебаггером, раз люди его подсознательно избегают? Значит, есть какое-то преимущество у принтов, которое может никто и не формулирует, но все подсознательно чувствуют. Если ваша теория не может объяснить полет шмеля, то проблема в вашей теории и надо еще подумать, а не ходить и объяснять всем шмелям, что они на самом деле не могут летать.  Ну и делать по этому поводу тоже понятно что: надо это преимущество найти, осознать, изолировать и может быть как-то более изящно в ИДЕ встроить, если получится. А не делать вид, что дебаггер очевидно лучше и всем было бы неплохо им научиться пользоваться. Очевидно, как раз, что не лучше. Осталось это признать и заживем мы все в мире и гармонии тогда.  Начать можно, например, с того, чтобы сделать его полегче как-то. Вот хорошо сформулировано:  > I’ve never quite understood why it [printf] is the worst: the feedback loop is very short so you get to quickly test hypotheses and explore the code. With a breakpoint you’re transported like some lower life form onto the USS Enterprise.  Я как-то постил в твиттере, что какие-нибудь условные Dev Tools тоже выглядят как космический корабль или картина Босха. К дебаггерам это тоже относится: там сразу открывается пяток панелей, которые как попало по экрану разбросаны, неочевидно друг с другом связаны и все время что-то показывают. Понятно, что иногда каждая из них по-отдельности нужна. Но не все же время!  Второй момент это очевидно что надо вручную куда-то ходить, тогда как интересно, наверное, трейс исполнения, а не хождение по нему. Ну и шагать назад, а не только вперед, было бы тоже неплохо.  Что думаете? Как починить дебаггер, чтобы люди хотели им пользоваться?",475
"Решил поковырять небольшой сайд-проектик, который начал в прошлом году. Открываю, а там код разобранный (не работает то есть) и незакоммиченный. Так что первый совет — никогда не бросайте код в разобранном состоянии. Потом фиг вспомнишь, что ты сделать хотел. Ну и начать работать все-таки приятно хотя бы с какой-то запускающейся точки.  Надо чинить, значит. Начал разбираться. Ага, смотрю, импортов не хватает. Припоминаю, что я код там на модули разделял, ну и попереносил немного. Конкренто, некий core/get-byte отсуствует.  Не беда! Делаем поиск по проекту, находим, что get-byte теперь живет в homm.core.byte-buffer. Вот вам и второй совет — неймспейсы это конечно хорошо и изолируют, но имена функциям и классам все равно старайтесь давать уникальные в рамках всего проекта. Проще искать потом будет.  Ладно. Делаем (:require [homm.core.byte-buffer :as .... As что, собственно? Обычно я просто последнюю компоненту имени использую. Получается (:require [homm.core.byte-buffer :as byte-buffer]).  Окей. Не нравится. Это каждый раз, когда мне надо байтик прочитать, надо будет целое byte-buffer/... писать, длинно.  Окей. Может быть, есть какое-то естественное сокращение? Конечно! bb. (require [... :as bb]). Красиво, коротко, понятно!  И тут я задумался. Красиво-то красиво, но знаете что лучше красоты? Консистентность. Постоянство, то есть. Так что я решил поискать, а как, собственно, я его импортирую в других файлах и сделать так же.  Ищу и нахожу... то же самое! Я из прошлого года, скорее всего, проделал тот же самый логический путь и пришел к тем же выводам, и тоже везде использовал ... :as bb!  Вот что такое настоящая консистентность — консистентность мысли. Или, другими словами, принципы. Это был третий совет.",476
"Накинул в Твиттере, как должно работать редактирование rich text.   Вкратце, если в строке 111222333 середина (222) выделена, например, жирным (курсивом, кодом — неважно), то между 1 и 2 должно быть две позиции курсора, а не одна. Сейчас (почти везде) одна — форматирование берется от куска слева. То есть можно дописать еще неформатированных единичек между 1 и 2 либо жирных двоек между 2 и 3, но нельзя дописать между 1 и 2 или неформатированных троек между 2 и 3.  Ну и говно получается. Сделал ты, например, ссылку с текстом «тыц». А потом думаешь: возьму-ка я ее в скобки. Ставишь скобку слева — она ставится простым текстом. Ставишь справа — она становится частью ссылки. Неаккуратненько.  Решение, которое я предлагаю: сделать вид, что там две позиции, даже если формально она одна. Типа, идешь курсором справа, дошел до границы 3 и 2. Стоишь в неформатированном тексте. Если начнешь писать, полезет неформатированный. Нажал кнопку «влево» — курсор остался стоять там же, но по внутренней логике ты перескочил «внутрь» форматированного куска. И теперь, если начнешь писать, в том же самом месте полезут уже жирные буквы.  Хорошая идея? По-моему хорошая. Простая, понятная, дающая пользователю силу и контроль. Удивительно, что за столько лет никто редактирование rich текста так и не пересмотрел и не перепридумал, все это тянется наверняка с каких-то первых word процессоров самых древних.  Но пост не об этом (сюрприз!). С одной стороны, идею активно поддержали, а с другой набежало куча фанатов Маркдауна, кричащих, что Маркдаун это то же самое или даже лучше.  Не лучше. Про Маркдаун надо понимать одну вещь: он родился от бедности. Писать как-бы форматированный текст там, где есть только plain text. Ну и поднялся частично на том, что rich text был настолько плохо везде сделан (о чем, собственно, моя идея) что всех заебал. А тут — проще, понятнее, предсказуемее.  Есть такая поговорка, якобы от лица продавца дрелей: «людям не нужна дрель, им нужна дырка в стене» (к ней тоже есть вопросы, но она очень уж эффектно доносит мысль).  Так и с Маркдауном — на самом деле, люди не хотят видеть решетки в заголовках или звездочки вокруг слов. Они хотят, чтобы было видно структуру. Они хотят, чтобы редактирование нормально работало, копирование нормально работало, отображение нормально работало. Но при прочих равный, эй, жирный текст должен быть жирным, а не обычным со звездочками вокруг.  Поймите меня правильно — я сам фанат Маркдауна, и провел в нем лет десять уже. И блог свой в нем веду, и пост этот пишу тоже в Маркдауне. Пришлось даже запомнить, как ссылки правильно ставить.  Но это все не потому что я хочу заголовки выделять решетками, а потому что Sublime Text очень уж хороший, сука, редактор. Ну и потому что форматирование/редактирование в условном Ворде сосет.  Но тут важно понимать, что Маркдаун это не цель. Цель — красиво отформатированный и сверстанный текст. Так получилось, что сейчас это удобнее делать в Маркдауне. Даже если придется смотреть на весь этот мусор, который сопровождает их форматирование.  Кстати, другая важная вещь, которую Маркдаун вскрыл — что такие меню, как в Ворде, где ты можешь каждой букве свой шрифт поставить и каждому параграфу свои отступы — они обычно как раз не нужны. Что есть очень ограниченное подмножество опций форматирование, и меньше значит лучше.  Но, опять же, это никак не ограничено Маркдауном. В Ноушне, например, это так и сделано: шрифт поменять нельзя, а слово жирным сделать можно.  Так что пользуйтесь, но помните, по какой причине мы на самом деле все в Маркдауне сидим. Не от хорошей жизни, скорее от плохой.",477
"Тут как-то удачно выпал Ludum Dare Game Jam на выходные, и я решил опять попробовать свои силы. А то сколько можно критиковать чужие вещи и не делать своих, жить в иллюзии, что я бы смог лучше.  Ну и в общем ощущения какие-то не такие радужные. Да, я опять взял Godot, у него как раз вышла четвертая версия.  И я вот что думаю — игровые движки вообще как бы должны очень много очень сложных вещей делать. То, что я там какие-то двумерные спрайты по экрану гоняю — это вообще же и одного процента не затрагивает того, что они _могут_ делать.  Ну и вот. Сделал я какую-то заготовочку самую простейшую. Рисую спрайты — картинка не перезагружается. Гуглю — никто не знает, что делать. Перезапускай, говорят, редактор (перезапускается он тоже, кстати, странно — три иконки одинаковых показывает, одна, видимо, лаунчер, вторая лаунчер лаунчера, а третья уже сама программа).  Ладно, потерплю. Поработал два дня. Дай, думаю, выложу текущую версию. Экспортирую в HTML. Оно качает 500 Мб (еще!), пыхтит и... не работает. Гуглю. Опять, никто не знает, что делать. Но я такой не один.  Ну и мораль. Как вообще супер-большие и супер-сложные программы умудряются что-то сложное делать, если они даже простых вещей сделать не могут? Меня это в энтерпрайзе всегда удивляло, ну и вот тут теперь тоже. Кажется, что простые вещи должны делаться проще и надежнее, а на деле нет — даже простые не работают.  Надо свой движок делать, короче. А то на интерфейсы что Годо, что Юнити смотреть невозможно без слез. Работать в них без Ютуба тоже, кстати — шансов найти нужную кнопку тупо нет. Надо именно посмотреть, куда и в какой последовательности нажимают другие люди. Хотя казалось бы — смотри как Фигма и делай как они.  Кстати, экспорт из Фигмы тоже полное говно. Я хочу, чтобы я поменял цвет и все, сразу в игре он появился. А сейчас надо четыре кнопки в разных местах нажать, чтобы просто картинку из нее получить. Будет первая фича моего гейм-движка: прямой риалтайм импорт из Фигмы.",478
"Любопытный инцидент произошел в твиттере. Проживающий в Сан-Франциско шведский дизайнер Расмус Андерсон выложил картинку с текущим состоянием кириллицы в его широкоизвестном шрифте Inter и попросил у носителей письменности комментариев.  Одним из первых в реплаи пришел Сережа Рассказов, дизайнер из Украины^W Петербурга, проживающий сейчас в Швейцарии, и выдал следующий фидбек:  > In small details not well. Most ugliest form is the left stem of the Л. Did you read this article? https://type.today/en/journal/neo  Произошел, как остроумно заметили в Твиттере, культурный обмен. Но прежде чем мы пойдем разбираться в деталях, подумайте, как вам такой реплай? Все хорошо? Нигде не жмет? Или есть проблема? Если да, то в чем.  В общем-то, написать я об этом решил только когда увидел, что народ в обсуждениях этого инцидента путается с пониманием, что тут не так.  Самое очевидное — не похвалил. Где же тот сэндвич из эмейзинг-эмейзинг, внутрь которого нужно упихнуть настоящую критику? Ух, опять эти американцы показали себя неженками, не могут вынести, когда им правду в глаза говорят. Ты покритиковал, но сделал это без уважения... Вот русский человек такой фидбек любит.  Но это, конечно, не то. Дело не в похвале и не в эпитетах (хотя и в них тоже). Просто этот комментарий неконструктивен. «Мне не нравится» — и что с ним, таким, делать? Зачем мне это знать? Как сделать лучше? Какие критерии? Что конкретно не нравится? Просто «not well» это обосрал и пошел дальше. И обижаться тут можно только на то, что если уж обсираешь, то ругай конкретные вещи. А так это прямая агрессия, и будь ты хоть американец, хоть русский человек из глубинке, хоть кошка, — это неприятно.  Еще раз. Никто не обижается на то, что тебе что-то не понравилось. Обижаются на то, что ты зачем-то с этим своим мнением пришел и на автора его вывалил. Типа, эй, у тебя рожа кривая! И дальше-то что? Что мне с этим делать? Кроме того, что ты себя обозначил как агрессивно настроенный ко мне человек. Но зачем?  А нормальный конструктивный комментарий выглядит как-то так:  > The Cyrillic breve must be wider and heavier than the Latin one.  Или так:  > Lift an oval of Ф just a tiny bit, otherwise it’s falling down.  Что характерно, оба комментария от шрифтовых дизайнеров, то есть людей, которым знакомо чувство «сделать самому и поделиться с миром» и они естественно понимают, какой человеку фидбек нужен. А есть там булшит-сендвич или нет — дело десятое. Не в сэндвиче дело.  Так что будете в следующий раз писать в код-ревью «этот код — говно» остановитесь и задумайтесь, а почему, собственно, говно? В чем конкретно его говнистость? А то может вы и сами не знаете. А как подумаете, может, он и неплохим кодом покажется.",479
"Хостер Vercel анонсировал поддержку баз данных, в том числе Postgres, и проиллюстрировал анонс вот таким примером кода:   import { sql } from '@vercel/postgres'; import { redirect } from 'next/navigation';  async function create (formData: FormData) {   'use server';   const { rows } = await sql`     INSERT INTO products (name)     VALUES (${formData.get('name' )})   `;   redirect('/product/${rows [0].slug}'); }  export default function Page) {   return (     <form action={create}>       <input type=""text"" name= ""name"" />       <button type=""submit"">Submit</button>     </form>   ); }   Опытные эксперты взвыли в первую очередь — эй, иньекции же! Самые культурные даже вспомнили Бобби Тейблса. Спешу вас огорчить — разработчики в Vercel оказались умнее среднего твиттерского комментатора и об инъекциях заранее подумали. Так что это неинтересно.  Интересно, что код начали гнобить! Это шаг назад, возврат к ПХП, код-лапша, кто так пишет. Ну, знаете, эти вот незлые (на самом деле еще какие злые) неконкретные комментарии, работающие на чувство собственной важности комментирующих.  Ну а я на другой стороне баррикад: а что, собственно, вам не нравится? Код простой и прямой, красота же! Что еще надо? Фабрик насыпать? Монад? И-де-аль-но же!  Ну и ПХП тоже не с бухты-барахты захватил интернет. Он был простым, удобным и логичным. Миллионы мух не могут ошибаться — в том смысле что если у Руби 1% рынка а у ПХП 90%, то наверное он что-то такое все-таки дает людям, что-то важное, чего не дает Руби. И можно воротить сколько угодно от него нос, но факт остается фактом, цифры говорят сами за себя.  А программисты, которые любят сложность как свинья грязь, для меня не новость. Представь, что ты весь такой умный и логичный, айкью зашкаливает, а тебе дают ПХП, где нужно написать текст как есть на странице и в паре мест вставить парочку переменных. И все. Все работает. Куда в таком случае мозг девать? К чему этот гигантский ум прикладывать? Вот и ищут, чего бы усложнить.  Так что даешь make PHP great again! Можно нам хотя бы одну штуку в компьютерах, которая просто и понятно работает? А с типами идите в Котлин свой играть, как раз сборку в Гредле настроите к моменту, когда я свой сайт допишу.",480
"Гитхаб выкатил новый дизайн навигатора кода, который до этого обкатывали в превью. Было только для желающих, а теперь и для нежелающих. Это, кстати, кажется единственная превью-фича, которую я почти сразу же отключил.  Вкратце, помимо собственно файла слева теперь панель с деревом кода, справа — панель символов в текущем файле, сверху sticky заголовок, который показывает начало функции, если ты долистал до ее середины, а кнопка T (перейти к файлу) теперь в малюсеньком попапе.  Вот что я хочу про него сказать: да, функций стало больше, так что формально, на бумаге, стало полезнее. Я уверен, что они даже иногда приходятся кстати.  Но меня не покидает ощущение перегруженности. Что тебе так много показывают, что ты не знаешь даже, куда смотреть. Тем более что визуальной иерархии, главное-второстепенное, тут не сделали. В итоге у тебя три визуально равноправные панели, хотя ты всего-то хотел посмотреть на файл. Хуже того, текст файла даже теряется, потому что обе панели используют гораздо более яркие иконки.  Второй момент — это лайаут. Я уже писал, как не нравятся дебаггеры и devtools чисто визуально, потому что там миллион панелей, расставленных более-менее случайно. Так и тут. Еще я когда-то писал, что первое ощущение от Идеи — что тебя обложили. Потому что панели со всех сторон — слева, справа, снизу и сверху. Хотя вроде особо выраженной клаустрофобией я не страдаю, но все равно, тесновато. Удивительно, что гитхаберы снизу никакой панели не влепили. А чего, место же есть!  В принципе, собрать «как было» в новом дизайне почти можно. Можно скрыть обе панели, и тогда из ухудшений останутся только трехуровневая прилипающая шапка и засунутый в попап go to file, который будет выровнен по правому краю (бе).  Я это пишу, потому что наверняка набегут умники только чтобы сказать «чего ты разнылся, вот же, можно сделать как было». А разнылся я, конечно, не для себя, а для моих дорогих читателей, которым не просто надо как-то приспособиться, а которые будут когда-нибудь дизайнить свой продукт и им это наблюдение пригодится: помнить нужно не только о функциях, но и визуальной простоте, лаконичности, легкости. Этот блог вообще не о том, как мне плохо с текущими инструментами, а как делать хорошие, новые.  А с Гитхабом, я думаю, дальше будет все хуже и хуже. Теперь, когда туда пришли vs-кодовцы и у них появились свободные руки, которые надо чем-то занять, он будет только усложняться. В здоровом стартапе, где рук сильно не хватает, фичи взвешиваются по коэффициенту легкость реализации/важность, и делается в основном только самое главное. В успешном энтерпрайзе же рук сильно больше, чем хороших идей, куда эти руки приложить. Поэтому реализуются даже супер неэффективные/ненужные фичи, просто потому что могут и потому что надо чем-то занимать программистов. Ровно то же самое произошло и с VS Code. Так что держитесь, зима близко.",481
"Когда-то, лет, допустим, 20 назад, фичи операционных систем что-то значили. Помню, как читал книжку по Windows 95 и восхищался кнопке Пуск, панели задач, корзине и пытался понять, зачем нужен Портфель. У МакОСа тогда тоже наверняка был такой период, просто у меня на него денег еще не было.  Более того, компании-производители ОС кое-что еще умели, и программы, которые шли с ОС, вызывали восторг. Лучший музыкальный плеер был в встроен в МакОС, лучший текстовый редактор — в Виндоус, лучшая игра — пасьянс Косынка — тоже.  Ну и вот. В какой-то момент все все фичи сделали, что можно друг у друга украли, и стало непонятно, что делать дальше. Пришел веб и забрал у ОС функцию провайдера фич, а также нормализовал более-менее все интерфейсы между платформами. Компании-производители ОС разучились писать хороший софт, и сейчас никто в здравом уме не пользуется встроенными почтой, сообщениями или фотками. Музыку просрали, книги просрали, кино просрали, даже спотлайт и тот просрали. И даже браузер ушел к третьим лицам, хотя когда-то Майкрософт плотно доминировал на этом рынке И имел преимущество предустановки.  Короче, да, веб — это новая ОС. Там происходит жизнь, делают какие-то новые фичи, улучшают старые, закрывают уязвимости, развиваются, а главное — дают разработчикам и юзерам что-то, с чем можно, и, главное, хочется работать.  А хотелось бы чтобы в ОС тоже теплилась какая-то жизнь. Чтобы выкатывались новые фичи и АПИ, полезные системные сервисы, которыми хотелось бы пользоваться.  И вот у меня есть идея, что можно было бы улучшить. Работу с фокусом. А именно — кражу фокуса. Дело в том, что сейчас любое приложение может украсть фокус в любой момент. Захотелось левой пятке — пошло и выставило себе на передний план. Юзер-экспириенс хуевый, зато, наверное, менеджеры рады.  В вебе есть похожие прецеденты. Например, когда-то страница могла открыть всплывающее окно в любой момент. А теперь — не может. Надо, чтобы пользователь сперва активно на что-то нажал. Так веб защищает пользователей от недобровестных сайтов.  Хочется, чтобы ОС работали так же. Я нажал на иконку — появилось окно и забрало фокус. Я переключился куда-то — все, хуй тебе, а не фокус. Жди, пока тебя явно не позовут. Это гигиена простейшая, правила хорошего тона.  Красота этого решения в том, что от него никто не пострадает. Ну, не вылезет окно на передний план там, где раньше вылазило. Ну и не беда — пошел и нажал на него сам.  Сейчас некоторые приложения латают кражей фокуса собственные проблемы с запуском. То есть я кликнул на иконку, приложение начало запускаться и запускается, скажем, 10 секунд. В течение этих 10 секунд на экране ничего не происходит. Пользователь, естественно, уходит заниматься своими делами. А тут приложение хоба-на: «я запустилось». И вылезает поперек экрана. Ну что за дела?  В общем, было бы круто, если бы ОС встали немножно на сторону пользователя и боролись с подобным абьюзом, ровно как это происходит в вебе. А то сколько раз можно переключатель раскладок ломать, а, Эпл?",482
"Если подумать, то в Си-подобном синтаксисе дофига нелогичностей. Ну, скажем, как вы вызываете функцию?   f(a, b)   При этом порядок вычислений будет: сначала a, потом b и только потом f. То есть 2, 3, 1. Ну бред же!  Более того, иногда можно писать вообще   a + b   И тут уже будет a → b → +, то есть левый, правый, середина. 1, 3, 2. Каково? И почему тогда нельзя писать   +(a, b)   (в Кложе, кстати, можно), или, скажем,   a f b   тогда уж? (в Хаскелле, кстати, можно)  Потому что нелогично? Ну так и f(a, b) нелогично!  Если добавить объекты, то вообще начнется атас. Ну вот что это такое:   o.m(a, b)   Сначала вычислится первый (`o`), потом третий (`a`), потом четвертый (`b`), и только потом наконец второй (`m`). Нормально?  Зато методы на объектах можно стыковать:   o.a(x, y, z).b(p, q, r).c(s, t, u)   что тоже та еще шизофрения: вроде исполняется все слева направо, но по пути сначала заходим в скобки, а потом выходим, и только потом движемся дальше.  Кстати, если к этому еще присваивание добавить, то вообще кайф начинается!   x = o.m(a, b)   Тут вся та же беда, что и с объектами, только самое начало выполнится последним! Итого порядок будет 2, 4, 5, 3, 1. Пойди, объясни это неспециалисту.  И ведь даже простые люди нет-нет да чувствуют проблему и пытаются что-то с ней сделать. Ну там pipeline operator ввести какой-нибудь. Потому что писать   const num = multiply(add(subtract(15)))   это полный бред, надо быть сумасшедшим, чтобы это расшифровать. А вот   const num = 15 |> add |> subtract |> multiply   Толькоя я бы еще дальше пошел и присваивание тоже направо вынес. Чтобы уж совсем все по-порядку:   15 |> add |> subtract |> multiply => const num   Понятно, что это все идет из математики, включая желание писать 1 + 2, а не 1 2 + и не +(1, 2). Но мы-то инженеры, мы должны лучше эргономику чувствовать, чем математики. Математика вообще когда-то оптимизировалась под запись ручкой на бумаге, оттуда идут и однобуквенные обозначения, и всякие нетривиальные многострочные лайауты для дробей, и значащие орнаменты на буквах (N ≠ ℕ ≠ 𝒩).  Понятно, что запись 1 2 + => x выглядит дико. Но зато она логичная! К непривычности можно привыкнуть, а вот отсутствие логики не устранится никогда. Опять же, Лиспы тоже выглядят сперва непривычно, однако очень быстро привыкаешь писать (+ 1 2) и даже ловить в этом единообразии кайф.  Короче, пора уже вынуть голову из штанов, отбросить груз векового легаси и перепридумать синтаксис заново. Пора придумывать Форт.",483
"Чего я не понимаю так это лимита на длину строки. Ну там 80, 120, знаете, как занудные программисты любят себе настроить и потом еще другим мозг этим парить.  Не понимаю я вот почему. Ситуации бывают разные. Бывают 4К телевизоры, а бывают 720p ноутбуки. Бывает хорошее зрение, а бывает шрифт 20 пунктов. Бывает терминал развернут на весь экран, а бывает на половину. Бывает открыта дерево файлов слева, а бывает дебаггер справа. Короче, в каждый конкретный момент размер экрана может быть совсем разный. Даже в пределах одного программиста и одного сетапа.  Ну и какой из этого вывод? Очевидно, что ширина редактора должна настраиваться редактором, динамически. В зависимости от размера окна. Или настроек пользователя. Или еще каких-то факторов. К счастью, редакторы это прекрасно умеют, и код переносить, и ресайзиться динамически. Даже терминалы умеют, что уж о нормальных редакторах!  А предлагается что? Предлагается эту ширину захардкодить в абстрактное с потолка взятое число. Ну, не совсем с потолка, конечно, а знаете откуда? С перфокарты. Да, это не шутка. 80 символов — это 80 колонок на перфокарте. Загуглите фотку, если не верите.  То есть, принудительно засунуть текст в рамки, которые, скорее всего, не подойдут и неудобны никому и ни в каких условиях. Ну может удобны иногда, но не оптимальны.  Но самая жопа знаете какая? Это изменение необратимо. Если ты расставил переносы после каждого 80-го символа, редактор ничего с этим не сможет сделать, только показать как есть. И пофиг, что у тебя справа еще три тыщи пикселей пустуют. Тимлид сказал что надо врапать после 80-го — значит будем врапать.  А наоборот — обратимо. Если принудительно текст не переносить, то редактор прекрасно его перенесет на любой желаемой колонке, в реальном времени, хоть 60 раз в секунду.  Так что ситуация несимметрична. Выбор очевиден. Но попробуй пойди это объясни программистам.",484
